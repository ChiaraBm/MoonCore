@using Microsoft.AspNetCore.Components.Rendering
@using MoonCore.Blazor.FlyonUi.Common
@using MoonCore.Blazor.FlyonUi.Components
@using MoonCore.Blazor.FlyonUi.Grid

<DataGrid @ref="Grid"
          TGridItem="FsEntry"
          OnConfigure="OnConfigure"
          ItemSource="ItemSource">
    <ChildContent>
        <FileColumn ShowIcons="ShowIcons" UseDynamicIcons="UseDynamicIcons" ShowSize="ShowSize" ShowDate="ShowDate" />
        
        @ChildContent
    </ChildContent>
</DataGrid>

@code
{
    /// <summary>
    /// Callback to retrieve the file entries
    /// </summary>
    [Parameter] public Func<Task<IEnumerable<FsEntry>>> Load { get; set; }
    
    /// <summary>
    /// <b>Optional:</b> Callback which handles when a file is clicked
    /// </summary>
    [Parameter] public Func<FsEntry, Task>? OnClick { get; set; }
    
    /// <summary>
    /// <b>Optional:</b> Custom middle click link provider callback
    /// </summary>
    [Parameter] public Func<FsEntry, string>? CustomClickLink { get; set; }
    
    /// <summary>
    /// <b>Optional:</b> Location to put your configuration into
    /// </summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    /// <summary>
    /// <b>Optional:</b> Template to override the default NoFiles UI
    /// </summary>
    [Parameter] public RenderFragment? NoFilesContent { get; set; }
    
    /// <summary>
    /// <b>Optional:</b> Callback for handling context menu actions
    /// </summary>
    [Parameter] public Func<MouseEventArgs, FsEntry, Task>? OnContextMenu { get; set; }

    /// <summary>
    /// Toggles whether to use icons when displaying files and folders. Default: true
    /// </summary>
    [Parameter] public bool ShowIcons { get; set; } = true;
    
    /// <summary>
    /// Toggles whether to use the <see cref="FileIconHelper"/> when displaying files to determine the best icon. Default: true
    /// </summary>
    [Parameter] public bool UseDynamicIcons { get; set; } = true;
    
    /// <summary>
    /// Toggles whether to show the modification time of a file. Default: false
    /// </summary>
    [Parameter] public bool ShowDate { get; set; } = false;
    
    /// <summary>
    /// Toggles whether to show the size of a file. Default: false
    /// </summary>
    [Parameter] public bool ShowSize { get; set; } = false;

    private DataGrid<FsEntry> Grid;
    private ItemSource<FsEntry> ItemSource => ItemSourceFactory.From(Load);

    /// <summary>
    /// Proxy function to refresh the underlying table
    /// </summary>
    /// <param name="silent">Whether to refresh the table without showing a loading animation</param>
    public async Task RefreshAsync(bool silent = false) => await Grid.RefreshAsync(silent: silent);
    
    private void OnConfigure(DataGridOptions<FsEntry> options)
    {
        options.Customization.NoItemsContent = NoFilesContent ?? DefaultNoItemsContent;
        options.Customization.ColumnsContainer = ColumnsContainer;
    }

    private void DefaultNoItemsContent(RenderTreeBuilder __builder)
    {
        <div class="p-5">
            <IconAlert Title="No files/folders found"
                       Icon="icon-file-stack"
                       Color="text-info">
                No files and folders found in that directory
            </IconAlert>
        </div>
    }

    private RenderFragment ColumnsContainer(RenderFragment fragment, FsEntry entry)
    {
        return __builder =>
        {
            __builder.OpenElement(0, "tr");
            __builder.AddAttribute(1, "class", "cursor-pointer");

            if (OnClick != null)
            {
                __builder.AddAttribute(3, "onclick", EventCallback.Factory.Create(this, () => OnClick.Invoke(entry)));
                __builder.AddEventPreventDefaultAttribute(4, "onclick", true);
            }

            if (OnContextMenu != null)
            {
                __builder.AddAttribute(5, "oncontextmenu", EventCallback.Factory.Create(this, (MouseEventArgs args) =>OnContextMenu.Invoke(args, entry)));
                __builder.AddEventPreventDefaultAttribute(6, "oncontextmenu", true);
            }
            
            __builder.AddContent(7, fragment);
            
            __builder.CloseElement();
        };
    }
}
