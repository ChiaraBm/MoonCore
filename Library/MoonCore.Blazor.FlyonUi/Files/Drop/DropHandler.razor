@using Microsoft.JSInterop
@using MoonCore.Blazor.FlyonUi.Components

@inject IJSRuntime JsRuntime
@inject DropHandlerService HandlerService

@if (IsEnabled && IsActive)
{
    <div class="overlay-backdrop pointer-events-none fixed inset-0 overflow-y-auto z-50 bg-base-300/45">
        <div class="overlay modal modal-middle open opened opacity-100"
             role="dialog" tabindex="-1" aria-overlay="true">
            <div class="modal-dialog opacity-100">
                <div class="modal-content bg-transparent">
                    <div class="p-8 border-2 border-dashed border-base-content rounded-lg">
                        <IconAlert Title="Drop files to upload" Color="text-base-content" Icon="icon-files">
                            Drop your files and folders here in order to upload
                        </IconAlert>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    /// <summary>
    /// Represents the current state of the handler
    /// </summary>
    public bool IsEnabled { get; private set; } = false;

    private bool IsInitialized = false;
    private bool IsActive => Counter != 0;

    private int Counter = 0;

    protected override void OnInitialized()
    {
        HandlerService.SetHandler(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!IsInitialized)
        {
            await JsRuntime.InvokeVoidAsync(
                "moonCore.dropzone.init",
                DotNetObjectReference.Create(this)
            );
            
            IsInitialized = true;
        }
    }

    /// <summary>
    /// Enables the handling of file drops and initializes the interop
    /// </summary>
    public async Task EnableAsync()
    {
        IsEnabled = true;
        Counter = 0;
        await InvokeAsync(StateHasChanged);

        await JsRuntime.InvokeVoidAsync("moonCore.dropzone.enable");
    }

    /// <summary>
    /// Disables the handling of file drops and disables the interop handling for it
    /// </summary>
    public async Task DisableAsync()
    {
        IsEnabled = false;
        await InvokeAsync(StateHasChanged);
        
        await JsRuntime.InvokeVoidAsync("moonCore.dropzone.disable");
    }

    /// <summary>
    /// Peeks at the next item in the stack of files provided by the interop
    /// </summary>
    /// <returns><b>null</b> if no item is left otherwise it returns the next item</returns>
    public async Task<DropData?> PeekItemAsync()
    {
        return await JsRuntime.InvokeAsync<DropData?>(
            "moonCore.dropzone.peek"
        );
    }
    
    /// <summary>
    /// Pops the current item of the interop stack
    /// </summary>
    public async Task PopItemAsync()
    {
        await JsRuntime.InvokeVoidAsync(
            "moonCore.dropzone.pop"
        );
    }

    #region Handlers

    [JSInvokable]
    public async Task TriggerAsync()
    {
        Counter = 0;
        await InvokeAsync(StateHasChanged);

        await HandlerService.TriggerDroppedAsync();
    }

    [JSInvokable]
    public async Task OnDragEnter()
    {
        Counter++;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task OnDragLeave()
    {
        Counter--;
        await InvokeAsync(StateHasChanged);
    }

    #endregion

}
