@using System.ComponentModel.DataAnnotations
@using MoonCore.Blazor.FlyonUi.Components

@inherits MoonCore.Blazor.FlyonUi.Modals.BaseModal

<div class="p-5">
    <div class="flex items-center gap-4">
        <div class="avatar avatar-placeholder max-sm:hidden">
            <div class="border-base-content/20 rounded-box w-13 border-1">
                <span class="icon-folder-pen text-xl"></span>
            </div>
        </div>
        <div class="space-y-1">
            <h3 class="text-base-content text-2xl font-semibold">Renaming @OldName</h3>
            <p class="text-base-content/80">Enter a new name for the file/folder</p>
        </div>
    </div>
    
    <HandleForm @ref="HandleForm" Model="Form" OnValidSubmit="HandleSubmitAsync">
        <div class="mt-5 text-center sm:mt-5">
            <div>
                <input class="input" @bind="Form.Name" placeholder="Enter a new name"/>
            </div>
        </div>
        <div class="mt-5 flex justify-end">
            <button @onclick="HideAsync" type="button" class="btn btn-secondary me-2">
                Cancel
            </button>
            <WButton IsWorking="HandleForm.IsSubmitting" Type="submit">
                Rename
            </WButton>
        </div>
    </HandleForm>
</div>

@code
{
    /// <summary>
    /// Specifies the old name the folder/file has before renaming
    /// </summary>
    public string OldName { get; set; } = "";
    
    /// <summary>
    /// Callback with the new name which will be invoked when the user provided the new name
    /// </summary>
    public required Func<string, Task> OnSubmit { get; set; }

    private FormData Form;
    private HandleForm HandleForm;

    protected override void OnInitialized()
    {
        Form = new()
        {
            Name = OldName
        };
    }

    record FormData
    {
        [Required(ErrorMessage = "You need to provide a new name")]
        public string Name { get; set; }
    }

    private async Task HandleSubmitAsync()
    {
        await OnSubmit.Invoke(Form.Name);
        await HideAsync();
    }
}