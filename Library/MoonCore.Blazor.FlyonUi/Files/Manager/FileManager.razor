@using MoonCore.Blazor.FlyonUi.Files.View
@using MoonCore.Blazor.FlyonUi.Toasts
@using MoonCore.Blazor.FlyonUi.Components
@using MoonCore.Blazor.FlyonUi.Files.Manager.Abstractions
@using MoonCore.Blazor.FlyonUi.Grid.Columns
@using MoonCore.Blazor.FlyonUi.Grid.Rows

@inject ToastService ToastService

@inject IServiceProvider ServiceProvider

@implements IFileManager

@if (ShowOpenWindow)
{
    @* Open Window *@
    
    <div>
        @OpenWindow
    </div>
}
else
{
    @* Header *@
    
    <div class="card card-body p-2">
        <div class="grid grid-cols-1 xl:grid-cols-2">
            <div class="col-span-1 hidden xl:flex">
                <div class="flex flex-row justify-start w-full">
                    <PathBreadcrumb Path="@CurrentPath"
                                    OnClick="SetPathAsync"/>
                </div>
            </div>
            <div class="col-span-1">
                <div class="hidden lg:flex flex-row justify-end">
                    @if (SelectedEntries.Count > 0)
                    {
                        for (var i = 0; i < MultiFsOperations.Length; i++)
                        {
                            var operation = MultiFsOperations[i];

                            <button @onclick="_ => RunSelectionOperationAsync(operation)"
                                    class="btn @(operation.ToolbarCss) @(i != MultiFsOperations.Length - 1 ? "me-2" : "")">
                                <i class="@operation.Icon"></i>
                                @operation.Name
                            </button>
                        }
                    }
                    else
                    {
                        for (var i = 0; i < ToolbarOperations.Length; i++)
                        {
                            var operation = ToolbarOperations[i];

                            <button @onclick="_ => RunToolbarOperationAsync(operation)"
                                    class="btn @(operation.ToolbarCss) @(i != ToolbarOperations.Length - 1 ? "me-2" : "")">
                                <i class="@operation.Icon"></i>
                                @operation.Name
                            </button>
                        }
                    }
                </div>

                <div class="flex lg:hidden flex-row justify-end">
                    <Dropdown Align="right-0">
                        <Activator>
                            <button class="btn btn-square btn-secondary">
                                <i class="icon-menu"></i>
                            </button>
                        </Activator>
                        <Content>
                            @if (SelectedEntries.Count > 0)
                            {
                                foreach (var operation in MultiFsOperations)
                                {
                                    <button @onclick="_ => RunSelectionOperationAsync(operation)"
                                            class="dropdown-item">
                                        <i class="@operation.Icon @operation.ContextCss"></i>
                                        @operation.Name
                                    </button>
                                }
                            }
                            else
                            {
                                foreach (var operation in ToolbarOperations)
                                {
                                    <button @onclick="_ => RunToolbarOperationAsync(operation)"
                                            class="dropdown-item">
                                        <i class="@operation.Icon @operation.ContextCss"></i>
                                        @operation.Name
                                    </button>
                                }
                            }
                        </Content>
                    </Dropdown>
                </div>
            </div>
        </div>
    </div>
    
    @* File List *@

    <div class="mt-5">
        <FileView @ref="FileView" Load="LoadAsync" ShowDate="true" ShowSize="true" OnClick="OnClick"
                  CustomClickLink="CustomClickLink" OnContextMenu="OnContextMenu">
            <ChildContent>
                <SelectColumn Order="int.MinValue" Selection="SelectedEntries" OnSelectionChanged="OnSelectionChanged"/>


                <TemplateRow TGridItem="FsEntry">
                    @if (CurrentPath != "/")
                    {
                        <tr>
                            <td class="ms-1.5 w-4 pe-1"></td>
                            <td class="w-6">
                                <div class="flex justify-center">
                                    <i class="icon-folder-up text-accent text-2xl me-5"></i>
                                </div>
                            </td>
                            <td @onclick="GoUpAsync" scope="row" colspan="99999"
                                class="py-1.5 px-3 text-left font-normal cursor-pointer">
                                <div class="flex flex-row items-center">
                                    <div>Go up</div>
                                </div>
                            </td>
                        </tr>
                    }
                </TemplateRow>

                <TemplateColumn TGridItem="FsEntry" Order="5">
                    <td>
                        <div class="flex justify-end me-1.5">
                            <a href="#" @onclick="e => OnContextMenu(e.ClientX - 215, e.ClientY, context)"
                               @onclick:preventDefault @onclick:stopPropagation>
                                <i class="icon-ellipsis text-lg"></i>
                            </a>
                        </div>
                    </td>
                </TemplateColumn>
            </ChildContent>
        </FileView>
    </div>
}

<ContextMenu @ref="ContextMenu">
    @if (ContextEntry != null)
    {
        foreach (var operation in SingleFsOperations.Where(x => x.Filter == null || x.Filter.Invoke(ContextEntry)))
        {
            <button @onclick="_ => RunSingleContextOperationAsync(operation)" type="button" class="dropdown-item">
                <i class="@(operation.Icon) @(operation.ContextCss)"></i>
                @operation.Name
            </button>
        }

        foreach (var operation in MultiFsOperations)
        {
            <button @onclick="_ => RunMultiContextOperationAsync(operation)" type="button" class="dropdown-item">
                <i class="@(operation.Icon) @(operation.ContextCss)"></i>
                @operation.Name
            </button>
        }
    }
</ContextMenu>

@code
{
    /// <summary>
    /// <see cref="IFsAccess"/> to use for all operations
    /// </summary>
    [Parameter]
    public IFsAccess FsAccess { get; set; }

    /// <summary>
    /// Configuration callback to register all operations
    /// which the user should be able to use
    /// </summary>
    [Parameter]
    public required Action<FileManagerOptions> OnConfigure { get; set; }

    /// <summary>
    /// Current active file view component
    /// </summary>
    public FileView FileView { get; private set; }

    /// <summary>
    /// Options the file manager has been configured with. Don't modify any values here
    /// </summary>
    public FileManagerOptions Options { get; private set; }
    
    private ContextMenu ContextMenu;

    private IFsOpenOperation[] OpenOperations;
    private ISingleFsOperation[] SingleFsOperations;
    private IMultiFsOperation[] MultiFsOperations;
    private IToolbarOperation[] ToolbarOperations;

    protected override void OnInitialized()
    {
        Options = new FileManagerOptions(ServiceProvider);
        OnConfigure.Invoke(Options);

        SingleFsOperations = Options.SingleFsOperations
            .Where(x => x.CheckCompatability(FsAccess, this))
            .OrderByDescending(x => x.Order)
            .ToArray();

        MultiFsOperations = Options.MultiFsOperations
            .Where(x => x.CheckCompatability(FsAccess, this))
            .OrderByDescending(x => x.Order)
            .ToArray();

        ToolbarOperations = Options.ToolbarOperations
            .Where(x => x.CheckCompatability(FsAccess, this))
            .OrderByDescending(x => x.Order)
            .ToArray();

        OpenOperations = Options.OpenOperations
            .Where(x => x.CheckCompatability(FsAccess, this))
            .OrderByDescending(x => x.Order)
            .ToArray();
    }

    /// <summary>
    /// Refreshes the file list of the manager instance
    /// </summary>
    /// <param name="silent">Whether to show a loading indicator while refreshing.
    /// If set to true the data will just appear for the user without indication if it actually loads</param>
    /// <returns></returns>
    public Task RefreshAsync(bool silent = false)
        => FileView.RefreshAsync(silent: silent);
}
