@using Microsoft.Extensions.Logging
@using MoonCore.Blazor.FlyonUi.Files.View
@using MoonCore.Blazor.FlyonUi.DataTables
@using MoonCore.Blazor.FlyonUi.Files.Manager.Partials
@using MoonCore.Blazor.FlyonUi.Toasts
@using MoonCore.Blazor.FlyonUi.Components
@using MoonCore.Blazor.FlyonUi.Files.Manager.Abstractions
@using MoonCore.Blazor.FlyonUi.Grid.Columns
@using MoonCore.Blazor.FlyonUi.Grid.Rows

@inject ToastService ToastService
@inject ILogger<FileManager> Logger
@inject DropHandlerService DropHandlerService

@inject IServiceProvider ServiceProvider

@implements IAsyncDisposable
@implements IFileManager

@if (ShowOpenWindow)
{
    <div>
        @OpenWindow
    </div>
}
else
{
    <FileManagerHeader CurrentPath="@CurrentPath"
                       OnBreadcrumbClick="SetPathAsync"
                       OnHomeClick="@(() => SetPathAsync("/"))"
                       OnRefreshClick="() => FileView.RefreshAsync()"
                       OnFileSelected="HandleFileUploadAsync"
                       ShowMultiOperations="@(SelectedEntries.Count > 0)"
                       MultiOperations="MultiFsOperations"
                       OnMultiOperationClicked="RunSelectionOperationAsync"
                       ToolbarOperations="ToolbarOperations"
                       OnToolbarClicked="RunToolbarOperationAsync"
                       EnableUpload="EnableUpload"/>

    <div class="mt-5">
        <FileView @ref="FileView" Load="LoadAsync" ShowDate="true" ShowSize="true" OnClick="OnClick"
                  CustomClickLink="CustomClickLink" OnContextMenu="OnContextMenu">
            <ChildContent>
                <SelectColumn Order="int.MinValue" Selection="SelectedEntries" OnSelectionChanged="OnSelectionChanged"/>


                <TemplateRow TGridItem="FsEntry">
                    @if (CurrentPath != "/")
                    {
                        <tr>
                            <td class="ms-1.5 w-4 pe-1"></td>
                            <td class="w-6">
                                <div class="flex justify-center">
                                    <i class="icon-folder-up text-accent text-2xl me-5"></i>
                                </div>
                            </td>
                            <td @onclick="GoUpAsync" scope="row" colspan="99999"
                                class="py-1.5 px-3 text-left font-normal cursor-pointer">
                                <div class="flex flex-row items-center">
                                    <div>Go up</div>
                                </div>
                            </td>
                        </tr>
                    }
                </TemplateRow>

                <TemplateColumn TGridItem="FsEntry" Order="5">
                    <td>
                        <div class="flex justify-end me-1.5">
                            <a href="#" @onclick="e => OnContextMenu(e.ClientX - 215, e.ClientY, context)"
                               @onclick:preventDefault @onclick:stopPropagation>
                                <i class="icon-ellipsis text-lg"></i>
                            </a>
                        </div>
                    </td>
                </TemplateColumn>
            </ChildContent>
        </FileView>
    </div>
}

<ContextMenu @ref="ContextMenu">
    @if (ContextEntry != null)
    {
        foreach (var operation in SingleFsOperations.Where(x => x.Filter == null || x.Filter.Invoke(ContextEntry)))
        {
            <button @onclick="_ => RunSingleContextOperationAsync(operation)" type="button" class="dropdown-item">
                <i class="@(operation.Icon) @(operation.ContextCss) text-lg me-1"></i>
                @operation.Name
            </button>
        }

        foreach (var operation in MultiFsOperations)
        {
            <button @onclick="_ => RunMultiContextOperationAsync(operation)" type="button" class="dropdown-item">
                <i class="@(operation.Icon) @(operation.ContextCss) text-lg me-1"></i>
                @operation.Name
            </button>
        }
    }
</ContextMenu>

@code
{
    /// <summary>
    /// <see cref="IFsAccess"/> to use for all operations
    /// </summary>
    [Parameter]
    public IFsAccess FsAccess { get; set; }

    /// <summary>
    /// Configuration callback to register all operations
    /// which the user should be able to use
    /// </summary>
    [Parameter]
    public required Action<FileManagerOptions> OnConfigure { get; set; }

    /// <summary>
    /// Toggles whether to allow the user to upload files/folders
    /// </summary>
    [Parameter]
    public bool EnableUpload { get; set; } = true;

    /// <summary>
    /// Current active file view component
    /// </summary>
    public FileView FileView { get; private set; }

    private ContextMenu ContextMenu;

    private IFsOpenOperation[] OpenOperations;
    private ISingleFsOperation[] SingleFsOperations;
    private IMultiFsOperation[] MultiFsOperations;
    private IToolbarOperation[] ToolbarOperations;

    private FileManagerOptions Options;

    protected override async Task OnInitializedAsync()
    {
        Options = new FileManagerOptions(ServiceProvider);
        OnConfigure.Invoke(Options);

        SingleFsOperations = Options.SingleFsOperations
            .Where(x => x.CheckCompatability(FsAccess, this))
            .OrderByDescending(x => x.Order)
            .ToArray();

        MultiFsOperations = Options.MultiFsOperations
            .Where(x => x.CheckCompatability(FsAccess, this))
            .OrderByDescending(x => x.Order)
            .ToArray();

        ToolbarOperations = Options.ToolbarOperations
            .Where(x => x.CheckCompatability(FsAccess, this))
            .OrderByDescending(x => x.Order)
            .ToArray();

        OpenOperations = Options.OpenOperations
            .Where(x => x.CheckCompatability(FsAccess, this))
            .OrderByDescending(x => x.Order)
            .ToArray();

        if (EnableUpload)
            await InitializeUploadAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        if (EnableUpload)
            await LateInitializeUploadAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (EnableUpload)
            await DisposeUploadAsync();
    }

    public Task RefreshAsync()
        => FileView.RefreshAsync();
}
