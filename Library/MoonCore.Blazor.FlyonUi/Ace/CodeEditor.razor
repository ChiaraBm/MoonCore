@using Microsoft.JSInterop

@inject CodeEditorService CodeEditorService

@implements IAsyncDisposable

<div class="rounded-lg w-full @CssClasses" style="height: @Height" id="@EditorId">
    @(InitialContent)
</div>

@code
{
    /// <summary>
    /// Initial content of the text editor. Use this property to set the content of the editor
    /// </summary>
    [Parameter] public string InitialContent { get; set; }
    
    /// <summary>
    /// Callback used to collect configuration options
    /// </summary>
    [Parameter] public Action<CodeEditorOptions>? OnConfigure { get; set; }
    
    /// <summary>
    /// CSS height property for the editor
    /// </summary>
    [Parameter] public string Height { get; set; } = "60dvh";
    
    /// <summary>
    /// Can be used to provide custom css classes to the editor container
    /// </summary>
    [Parameter] public string CssClasses { get; set; } = "";
    
    private string EditorId;
    private CodeEditorOptions Options;
    private bool IsInitialized = false;

    protected override void OnInitialized()
    {
        EditorId = "editor" + GetHashCode();
        
        Options = new()
        {
            Mode = "ace/mode/csharp",
            Theme = "ace/theme/mooncore",
            FontSize = 14
        };

        if(OnConfigure != null)
            OnConfigure.Invoke(Options);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)
            return;
        
        await CodeEditorService.AttachAsync(EditorId, Options);
        IsInitialized = true;
    }
    
    /// <summary>
    /// Retrieves the content of the editor
    /// </summary>
    /// <returns>String content of the editor. Contains all lines in one string</returns>
    public async Task<string> GetValueAsync()
    {
        return await CodeEditorService.GetValueAsync(EditorId);
    }

    public async ValueTask DisposeAsync()
    {
        if(!IsInitialized)
            return;
        
        try
        {
            await CodeEditorService.DestroyAsync(EditorId);
        }
        catch (JSDisconnectedException)
        {
            // Ignore
        }
    }
}