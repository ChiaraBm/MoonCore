@using MoonCore.Helpers
<div class="dropdown relative inline-flex @(IsVisible ? "open" : "")">
    <a href="#" @onclick="ToggleAsync" @onclick:preventDefault>
        @Activator
    </a>
    
    @if (IsActive)
    {
        <div @onclick="OnFocusOutDelayed" class="dropdown-menu dropdown-open:opacity-100 block absolute @Align mt-12 w-56 origin-top-left z-70" role="menu" aria-orientation="vertical" aria-labelledby="dropdown-default">
            @Content
        </div>
    }
</div>

@if (IsActive)
{
    <div @onclick="OnFocusOut" class="overlay-backdrop transition duration-300 fixed inset-0 overflow-y-auto z-69"></div>
}

@code
{
    /// <summary>
    /// Element content for the activator. Used for opening the dropdown. Put a button or simular here
    /// </summary>
    [Parameter] public RenderFragment Activator { get; set; }
    
    /// <summary>
    /// Content of the dropdown
    /// </summary>
    [Parameter] public RenderFragment Content { get; set; }
    
    /// <summary>
    /// CSS class for alignment. By default, <b>left-0</b> is used
    /// </summary>
    [Parameter] public string Align { get; set; } = "left-0";

    private bool IsActive = false;
    private bool IsVisible = false;

    private const int DelayMs = 10;
    private Debouncer Debouncer = new(DelayMs);

    private Task ToggleAsync()
    {
        Debouncer.Debounce(async () =>
        {
            IsActive = !IsActive;
            await InvokeAsync(StateHasChanged);

            if (IsActive)
            {
                await Task.Delay(DelayMs);

                IsVisible = true;
                await InvokeAsync(StateHasChanged);
            }
        });
        
        return Task.CompletedTask;
    }

    private async Task OnFocusOutDelayed()
    {
        try
        {
            await Task.Delay(DelayMs);
            await OnFocusOut();
        }
        catch (TaskCanceledException)
        {
        }
    }
    
    private async Task OnFocusOut()
    {
        IsVisible = false;
        await InvokeAsync(StateHasChanged);
        
        Debouncer.Debounce(async () =>
        {
            IsActive = false;
            await InvokeAsync(StateHasChanged);
        });
    }
}
