<CascadingValue TValue="Tabs" Value="@this" IsFixed="true">
    @ChildContent
</CascadingValue>

<nav class="tabs bg-base-200 rounded-field w-fit space-x-1 overflow-x-auto p-1" role="tablist">
    
    @foreach (var tab in TabList)
    {
        <button @onclick="() => SwitchTabAsync(tab)" type="button" class="btn btn-text active-tab:bg-primary active-tab:text-primary-content hover:text-primary active-tab:hover:text-primary-content hover:bg-transparent @(CurrentTab == tab ? "active" : "")" data-tab="dummy" role="tab" aria-selected="true" >
            @if (!string.IsNullOrEmpty(tab.Icon))
            {
                <i class="@tab.Icon"></i>
            }
            @tab.Name
        </button>
    }
</nav>

@if (CurrentTab != null)
{
    <div class="mt-5">
        @CurrentTab.ChildContent
    </div>
}

@code
{
    /// <summary>
    /// Define your <see cref="Tab"/> within here
    /// </summary>
    [Parameter] public RenderFragment ChildContent { get; set; }

    private readonly List<Tab> TabList = new();
    private Tab? CurrentTab = null;

    public void AddTab(Tab tab)
    {
        if (!TabList.Contains(tab))
            TabList.Add(tab);
    }

    /// <summary>
    /// Changes the current tab
    /// </summary>
    /// <param name="tab">Tab to switch to</param>
    public async Task SwitchTabAsync(Tab tab)
    {
        CurrentTab = tab;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        CurrentTab = TabList.FirstOrDefault();
        await InvokeAsync(StateHasChanged);
    }
}