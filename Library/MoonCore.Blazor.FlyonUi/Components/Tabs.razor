<CascadingValue TValue="Tabs" Value="@this" IsFixed="true">
    @ChildContent
</CascadingValue>

<nav class="tabs gap-x-1 overflow-x-auto p-1.5 bg-base-100 rounded-lg max-w-fit" aria-label="Tabs" role="tablist" aria-orientation="horizontal">
    @foreach (var tab in TabList)
    {
        <button type="button"
                class="btn @Size btn-text text-base-content/80 active-tab:bg-primary active-tab:text-primary-content hover:text-primary hover:bg-primary/20 @(CurrentTab == tab ? "active" : "")"
                role="tab"
                data-tab="dummy"
                @onclick="() => SwitchTabAsync(tab)">
            @if (!string.IsNullOrEmpty(tab.Icon))
            {
                <i class="@tab.Icon"></i>
            }
            <span class="hidden sm:inline">
                @tab.Name
            </span>
        </button>
    }
</nav>

@if (CurrentTab != null)
{
    <div class="mt-5">
        @CurrentTab.ChildContent
    </div>
}

@code
{
    /// <summary>
    /// Define your <see cref="Tab"/> within here
    /// </summary>
    [Parameter] public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// <b>Optional:</b> Specifies the button size of the tab items
    /// </summary>
    [Parameter] public string Size { get; set; } = "btn-sm";

    private readonly List<Tab> TabList = new();
    private Tab? CurrentTab = null;

    public void AddTab(Tab tab)
    {
        if (!TabList.Contains(tab))
            TabList.Add(tab);
    }

    /// <summary>
    /// Changes the current tab
    /// </summary>
    /// <param name="tab">Tab to switch to</param>
    public async Task SwitchTabAsync(Tab tab)
    {
        CurrentTab = tab;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        CurrentTab = TabList.FirstOrDefault();
        await InvokeAsync(StateHasChanged);
    }
}