@using MoonCore.Blazor.FlyonUi.Common
@using MoonCore.Helpers

@inject ToastService ToastService

<div aria-live="assertive" class="pointer-events-none fixed inset-0 flex items-end px-4 py-6 sm:p-6 z-40">
    <div class="flex w-full flex-col items-center space-y-4 sm:items-end">
        @foreach (var item in Items)
        {
            <div class="pointer-events-auto w-full max-w-sm overflow-hidden rounded-lg bg-base-150 shadow-lg">
                <div class="p-4">
                    <div class="flex items-center">
                        @{
                            var seqCounter = 0;
                        
                            __builder.OpenComponent(seqCounter++, item.ComponentType);

                            foreach (var option in item.Options)
                                __builder.AddComponentParameter(seqCounter++, option.Key, option.Value);
                        
                            __builder.AddComponentReferenceCapture(seqCounter, o =>
                            {
                                item.ComponentReference = o;
                            });
                        
                            __builder.CloseComponent();
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code
{
    private readonly ConcurrentList<ToastReference> Items = new();

    protected override void OnInitialized()
    {
        ToastService.SetLauncher(this);
    }

    /// <summary>
    /// Launches a component inside a toast container and automatically hides it again
    /// </summary>
    /// <param name="onConfigure">Callback to configure the parameters of the component</param>
    /// <param name="hideDelayMs">Time in milliseconds until the modal should hide again. Use <b>-1</b> to disable this. Default: <b>5s</b></param>
    /// <typeparam name="T">Type of the component</typeparam>
    /// <returns>Reference item to close the toast using <see cref="CloseAsync"/></returns>
    public async Task<ToastReference<T>> LaunchAsync<T>(Action<ComponentOptions<T>>? onConfigure = null, int hideDelayMs = 5000) where T : BaseToast
    {
        var item = new ToastReference<T>()
        {
            ComponentType = typeof(T)
        };
        
        var options = new ComponentOptions<T>();
        onConfigure?.Invoke(options);
        
        options.Add(nameof(BaseToast.Reference), item);
        options.Add(nameof(BaseToast.Launcher), this);

        item.Options = options;

        if (hideDelayMs > 0)
        {
            Task.Run(async () =>
            {
                await Task.Delay(hideDelayMs);
                await CloseAsync(item);
            });
        }

        Items.Add(item);
        await InvokeAsync(StateHasChanged);

        return item;
    }

    /// <summary>
    /// Closes the provided toast
    /// </summary>
    /// <param name="reference">Reference item of the toast to close</param>
    public async Task CloseAsync(ToastReference reference)
    {
        if (Items.Contains(reference))
            Items.Remove(reference);

        await InvokeAsync(StateHasChanged);
    }
}