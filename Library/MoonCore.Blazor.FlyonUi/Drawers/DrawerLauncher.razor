@using MoonCore.Blazor.FlyonUi.Common
@using MoonCore.Helpers
@inject DrawerService DrawerService

@if (Drawers.Count > 0)
{
    for (var i = 0; i < Drawers.Count; i++)
    {
        var reference = Drawers[i];

        var cssClasses = reference.Direction switch
        {
            DrawerDirection.Top => "overlay-open:translate-y-0 drawer-top",
            DrawerDirection.Bottom => "overlay-open:translate-y-0 drawer-bottom",
            DrawerDirection.Left => "overlay-open:translate-x-0 drawer-start",
            DrawerDirection.Right => "overlay-open:translate-x-0 drawer-end",
            _ => ""
        };

        <div @onclick="_ => OnBackdropClickAsync(reference)"
             class="overlay-backdrop transition duration-300 fixed inset-0 bg-base-300/50 overflow-y-auto"
             style="z-index: @(i + 100)">
        </div>

        <div class="overlay overlay-open:translate-x-0 drawer @(cssClasses) @(reference.IsVisible ? "open opened" : "")"
             role="dialog" tabindex="-1" style="z-index: @(i + 101)">
            @{
                var seqCounter = 0;
                        
                __builder.OpenComponent(seqCounter++, reference.ComponentType);

                foreach (var option in reference.Options)
                    __builder.AddComponentParameter(seqCounter++, option.Key, option.Value);
                        
                __builder.AddComponentReferenceCapture(seqCounter, o =>
                {
                    reference.ComponentReference = o;
                });
                        
                __builder.CloseComponent();
            }
        </div>
    }
}

@code
{
    private readonly List<DrawerReference> Drawers = new();

    protected override void OnInitialized()
    {
        DrawerService.SetLauncher(this);
    }

    /// <summary>
    /// Launches a new drawer instance of the specified type
    /// </summary>
    /// <param name="onConfigure">Callback for providing parameters to the drawer component</param>
    /// <param name="unfocusHide">Toggles if clicking on the backdrop will close the drawer</param>
    /// <param name="direction">Sets the direction in which the drawer should be opened</param>
    /// <typeparam name="T">Type of the component to launch</typeparam>
    /// <returns>Reference to the drawer instance which can be used for <see cref="CloseAsync"/></returns>
    public async Task<DrawerReference<T>> LaunchAsync<T>(
        Action<ComponentOptions<T>>? onConfigure = null,
        bool unfocusHide = false,
        DrawerDirection direction = DrawerDirection.Left
    ) where T : DrawerBase
    {
        var reference = new DrawerReference<T>()
        {
            AllowUnfocusHide = unfocusHide,
            IsVisible = false,
            Direction = direction
        };
     
        var options = new ComponentOptions<T>();
        onConfigure?.Invoke(options);

        reference.Options = options;
        
        Drawers.Add(reference);

        await InvokeAsync(StateHasChanged);

        Task.Run(async () =>
        {
            await Task.Delay(150);

            reference.IsVisible = true;
            await InvokeAsync(StateHasChanged);
        });

        return reference;
    }

    private async Task OnBackdropClickAsync(DrawerReference reference)
    {
        if (!reference.AllowUnfocusHide)
            return;

        await CloseAsync(reference);
    }

    /// <summary>
    /// Closes the provided drawer reference
    /// </summary>
    /// <param name="reference">Reference of the drawer</param>
    public async Task CloseAsync(DrawerReference reference)
    {
        reference.IsVisible = false;
        await InvokeAsync(StateHasChanged);

        Task.Run(async () =>
        {
            await Task.Delay(150);

            Drawers.Remove(reference);
            await InvokeAsync(StateHasChanged);
        });
    }
}
