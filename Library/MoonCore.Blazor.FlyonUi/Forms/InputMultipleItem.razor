@using Microsoft.AspNetCore.Components.Web.Virtualization
@using MoonCore.Blazor.FlyonUi.Common
@using MoonCore.Blazor.FlyonUi.Components
@using MoonCore.Common
@using MoonCore.Helpers

@typeparam TItem

<div class="advance-select relative active">
    <button @onclick="ToggleVisibilityAsync" type="button" aria-expanded="true"
            class="advance-select-toggle">
        @if (Value.Count == 0)
        {
            <span class="truncate">
                Select option...
            </span>
        }
        else
        {
            <span class="truncate">
                @{
                    string displayValue;

                    // Show the display field value of maximum the first 2 elements, then we just say + amount if more than 2
                    displayValue = string.Join(", ", Value.Take(2).Select(x => DisplayField.Invoke(x).ToString()));

                    if (Value.Count > 2)
                        displayValue += $", +{Value.Count - 2}";
                }

                @displayValue
            </span>
        }
    </button>

    @if (IsVisible)
    {
        <div
            class="absolute advance-select-menu opened top-full mt-3 z-70 max-h-52 overflow-y-auto bg-base-200! shadow-lg"
            role="listbox" tabindex="-1"
            aria-orientation="vertical">

            @if (ItemSource.IsFilterable)
            {
                <div class="bg-base-200 sticky top-0 border-b-2 border-b-base-content/20">
                    <input @oninput="OnSearchInput" value="@SearchTerm"
                           type="text" placeholder="Search..."
                           class="bg-transparent placeholder-base-content/60 w-full h-10 px-4 focus:outline-none">
                </div>
            }

            @if (IsLoading)
            {
                <div class="flex justify-center items-center my-5">
                    <Spinner/>
                </div>
            }

            <Virtualize @ref="VirtualizeHandle"
                        Context="item"
                        TItem="TItem"
                        MaxItemCount="MaxItems"
                        ItemsProvider="LoadItemsInternalAsync"
                        ItemSize="44">
                <Placeholder>
                    <div tabindex="0"
                         class="cursor-progress advance-select-option disabled">
                        <div class="flex flex-row justify-start items-center w-full">
                            <div class="italic">
                                Loading
                            </div>
                        </div>
                    </div>
                </Placeholder>
                <EmptyContent>
                    <div class="flex items-center justify-center pt-2 pb-1">
                        <span class="text-base-content/80">No items found</span>
                    </div>
                </EmptyContent>
                <ItemContent>
                    @{
                        var isSelected = Value.Contains(item);
                    }

                    <div @onclick="() => SelectAsync(item)"
                         tabindex="0"
                         class="cursor-pointer advance-select-option selected:select-active @(isSelected ? "selected" : "")">
                        @if (isSelected)
                        {
                            <div class="flex flex-row justify-between items-center w-full">
                                <div class="truncate">
                                    @DisplayField.Invoke(item)
                                </div>
                                <div>
                                    <i class="icon-check text-base text-primary-content"></i>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="flex flex-row justify-start items-center w-full">
                                <div class="truncate">
                                    @DisplayField.Invoke(item)
                                </div>
                            </div>
                        }
                    </div>
                </ItemContent>
            </Virtualize>
        </div>

        <div @onclick="OnFocusOut"
             class="overlay-backdrop transition duration-300 fixed inset-0 overflow-y-auto z-69"></div>
    }

    <i class="icon-chevrons-up-down text-base-content absolute top-1/2 end-3 -translate-y-1/2"></i>
</div>

@code
{
    /// <summary>
    /// Defines the list which should contain the selected items.
    /// This list will be modified by the component
    /// </summary>
    [Parameter]
    public IList<TItem> Value { get; set; }

    /// <summary>
    /// <b>Optional:</b> Callback which gets executed when the <see cref="Value"/> has changed
    /// </summary>
    [Parameter]
    public EventCallback<TItem?> OnValueChanged { get; set; }

    /// <summary>
    /// ItemSource to retrieve the items to display from.
    /// Supports filtering (and pagination when filtering)
    /// </summary>
    [Parameter]
    public required ItemSource<TItem> ItemSource { get; set; }

    /// <summary>
    /// Maximum amount of items to load and show within the viewport.
    /// Is limited due to the fixed height of the popup container
    /// </summary>
    [Parameter] public int MaxItems { get; set; } = 25;

    /// <summary>
    /// Define which field should be used to display the item in the dropdown.
    /// This expression can also build a string to combine multiple properties
    /// <br />
    /// <br />
    /// Example:
    /// <code>
    /// DisplayField="@(x => $"{x.FirstName} {x.LastName}")"
    /// </code>
    /// </summary>
    [Parameter]
    public required Func<TItem, object> DisplayField { get; set; }

    /// <summary>
    /// Debounce time of the search field in milliseconds. Used to limit the amount of times
    /// the component invokes the item source
    /// </summary>
    [Parameter] public int SearchDebounceMs { get; set; } = 50;

    private bool IsVisible;
    private bool IsLoading = true;
    private string SearchTerm;
    private Debouncer SearchDebouncer;
    private Virtualize<TItem> VirtualizeHandle;

    protected override void OnInitialized()
    {
        SearchDebouncer = new(SearchDebounceMs);
    }

    private async ValueTask<ItemsProviderResult<TItem>> LoadItemsInternalAsync(ItemsProviderRequest request)
    {
        var response = await ItemSource.QueryAsync(request.StartIndex, request.Count, SearchTerm, null);

        if (IsLoading)
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }

        // Early exit for pre counted data
        if (response is CountedData<TItem> countedData)
            return new ItemsProviderResult<TItem>(countedData.Items, countedData.TotalCount);

        // We are creating the array here as if we would use Count() it may enumerate multiple times
        var data = response.ToArray();

        var items = data.Skip(request.StartIndex).Take(request.Count);

        return new ItemsProviderResult<TItem>(items, data.Length);
    }

    private async Task SelectAsync(TItem item)
    {
        if (Value.Contains(item))
            Value.Remove(item);
        else
            Value.Add(item);

        await InvokeAsync(StateHasChanged);

        await OnValueChanged.InvokeAsync();
    }

    private async Task OnFocusOut()
    {
        IsVisible = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleVisibilityAsync()
    {
        SearchTerm = "";
        IsLoading = true;
        IsVisible = !IsVisible;
        await InvokeAsync(StateHasChanged);
    }

    private Task OnSearchInput(ChangeEventArgs eventArgs)
    {
        SearchTerm = eventArgs.Value?.ToString() ?? "";
        
        SearchDebouncer.Debounce(VirtualizeHandle.RefreshDataAsync);

        return Task.CompletedTask;
    }
}