@using System.Reflection
@using MoonCore.Blazor.Helpers
@using MoonCore.Blazor.Models.FastForms
@using MoonCore.Helpers
@using MoonCore.Blazor.Components

@typeparam TModel

@inject IServiceProvider ServiceProvider

@if (CurrentPage != null)
{
    if (ErrorMessages != null && ErrorMessages.Length > 0)
    {
        <div class="alert alert-danger bg-danger text-white fs-5 fw-semibold mb-5">
            @foreach (var errorMessage in ErrorMessages)
            {
                <div>@errorMessage</div>
            }
        </div>
    }
    
    if (Pages.Count > 1)
    {
        <div class="mb-5">
            <ul class="nav nav-pills border-0 fs-5">
                @foreach (var page in Pages)
                {
                    <li class="nav-item">
                        <a class="nav-link text-white border-top-0 border-start-0 border-end-0 border-2 @(CurrentPage == page ? "active" : "bg-secondary")" href="#" @onclick:preventDefault @onclick="() => SelectPage(page)">
                            @(string.IsNullOrEmpty(page.Name) ? "General" : page.Name)
                        </a>
                    </li>
                }
            </ul>
        </div>
    }

    if (CurrentPage.OverrideComponent == null)
    {
        foreach (var section in CurrentPage.Sections)
        {
            <div class="card mb-6">
                @if (!string.IsNullOrEmpty(section.Name))
                {
                    <div class="card-header">
                        <div class="card-title">
                            @if (!string.IsNullOrEmpty(section.Icon))
                            {
                                <i class="bx bx-md @(section.Icon) text-primary me-3 align-middle"></i>
                            }
                            <span class="h3 align-middle">@(section.Name)</span>
                        </div>
                    </div>
                }
                <div class="card-body">
                    <div class="row g-8">
                        @foreach (var component in section.Components)
                        {
                            <InstanceView Instance="component" />
                        }
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        @CurrentPage.OverrideComponent
    }
}

@code
{
    [Parameter] public Action<FastFormConfiguration<TModel>>? OnConfigure { get; set; }
    [Parameter] public TModel Model { get; set; }

    private FastFormConfiguration<TModel> Configuration = new();
    private List<FastFormPage> Pages = new();

    private FastFormPage? CurrentPage;
    private string[]? ErrorMessages;

    private bool RenderFinished = true;

    protected override void OnInitialized()
    {
        OnConfigure?.Invoke(Configuration);

        Init();
    }

    private void Init()
    {
        foreach (var configuration in Configuration.PropertyConfigurations)
        {
            var page = GetPage(configuration.PageConfiguration?.Name ?? "");
            var section = GetSection(page, configuration.SectionConfiguration?.Name ?? "");

            if (configuration.SectionConfiguration != null && configuration.SectionConfiguration.Icon != null)
                section.Icon = configuration.SectionConfiguration.Icon;

            // Binder
            var propBinderType = typeof(PropRefBinder<>).MakeGenericType(configuration.PropertyInfo.PropertyType);
            var propBinder = Activator.CreateInstance(propBinderType, [
                Model,
                configuration.PropertyInfo
            ])!;

            var instance = (ComponentBase)Activator.CreateInstance(configuration.ComponentType)!;

            var name = configuration.Name ?? Formatter.ConvertCamelCaseToSpaces(configuration.PropertyInfo.Name);
            configuration.ComponentType.GetProperty("Name")!.SetValue(instance, name);
            configuration.ComponentType.GetProperty("Description")!.SetValue(instance, configuration.Description);
            configuration.ComponentType.GetProperty("Binder")!.SetValue(instance, propBinder);
            
            // We need to pass the service provider here, as injected services wont work in the instance view component :c
            // this only affects the single component in the instance view, not all components below
            // TODO: DOCS
            configuration.ComponentType.GetProperty("ServiceProvider")!.SetValue(instance, ServiceProvider);

            if (configuration.OnConfigureFunc != null)
            {
                configuration.OnConfigureFunc.GetType().GetMethod("Invoke")!.Invoke(configuration.OnConfigureFunc, [instance]);
            }

            instance.GetType().GetMethod("OnInitialized", BindingFlags.NonPublic | BindingFlags.Instance).Invoke(instance, []);

            section.Components.Add(instance);
        }

        foreach (var customPage in Configuration.CustomPages)
        {
            Pages.Add(new()
            {
                Name = customPage.Name,
                OverrideComponent = customPage.OverrideComponent
            });
        }

        CurrentPage = Pages.FirstOrDefault(x => x.Name == "");

        if (CurrentPage == null && Pages.Count > 0)
            CurrentPage = Pages.First();
    }

    private FastFormPage GetPage(string? name)
    {
        var pageName = name ?? "";

        var foundPage = Pages
            .FirstOrDefault(x => x.Name == pageName);

        if (foundPage == null)
        {
            foundPage = new()
            {
                Name = pageName
            };

            Pages.Add(foundPage);
        }

        return foundPage;
    }

    private FastFormSection GetSection(FastFormPage page, string? name)
    {
        var sectionName = name ?? "";

        var foundPage = page.Sections
            .FirstOrDefault(x => x.Name == sectionName);

        if (foundPage == null)
        {
            foundPage = new()
            {
                Name = sectionName
            };

            page.Sections.Add(foundPage);
        }

        return foundPage;
    }
    
    public Task<bool> Validate(out string[] errorMessages)
    {
        List<string> errorMessageResult = new();
        bool isValid = true;

        foreach (var configuration in Configuration.PropertyConfigurations)
        {
            var propertyInfo = configuration.PropertyInfo;
            var propertyValue = propertyInfo.GetValue(Model);
            
            foreach (var validator in configuration.Validators)
            {
                var validationResult = validator.Check(propertyValue);

                if (validationResult == null)
                    continue;

                if (isValid)
                    isValid = false;

                if (validationResult.ErrorMessage != null)
                {
                    var formatedMessage = $"{configuration.Name ?? propertyInfo.Name}: " + validationResult.ErrorMessage;
                    errorMessageResult.Add(formatedMessage);
                }
            }
        }

        errorMessages = errorMessageResult.ToArray();
        return Task.FromResult(isValid);
    }

    public async Task<bool> Submit()
    {
        var valid = await Validate(out ErrorMessages);

        if (valid)
            return true;

        await InvokeAsync(StateHasChanged);
        return false;
    }

    private async Task SelectPage(FastFormPage page)
    {
        RenderFinished = false;

        await InvokeAsync(StateHasChanged);
        
        CurrentPage = page;
        
        await InvokeAsync(StateHasChanged);
    }
}