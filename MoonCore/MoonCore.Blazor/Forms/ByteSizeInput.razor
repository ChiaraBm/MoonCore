@using Microsoft.AspNetCore.Components.Forms

@inherits InputBase<int>

<div class="input-group">
    <input @bind="ValueInUnit" type="number" class="form-control w-75"/>
    <select @bind="Unit" class="form-select w-25 text-center">
        @if (MinimumUnitInt <= 0)
        {
            <option value="0">KB</option>
        }
        @if (MinimumUnitInt <= 1)
        {
            <option value="1">MB</option>
        }
        @if (MinimumUnitInt <= 2)
        {
            <option value="2">GB</option>
        }
    </select>
</div>

@code
{
    [Parameter] public string MinimumUnit { get; set; } = "KB";
    [Parameter] public string DefaultUnit { get; set; } = "KB";
    [Parameter] public int Converter { get; set; } = 0;

    private int Unit;

    private int MinimumUnitInt;
    private int DefaultUnitInt;

    private long ValueInUnit
    {
        get => (long)(KiloBytes / Math.Pow(1024D, Unit));
        set => KiloBytes = (long)(value * Math.Pow(1024D, Unit));
    }

    private long KiloBytes
    {
        get => (long)(CurrentValue * Math.Pow(1024D, Converter));
        set => CurrentValue = (int)(value / Math.Pow(1024D, Converter));
    }

    protected override void OnInitialized()
    {
        DefaultUnitInt = UnitToIndex(DefaultUnit);
        MinimumUnitInt = UnitToIndex(MinimumUnit);
        
        if (DefaultUnitInt < MinimumUnitInt)
            Unit = MinimumUnitInt;
        else
            Unit = DefaultUnitInt;
    }

    private int UnitToIndex(string unit)
    {
        switch (unit)
        {
            default:
                return 0;
            case "MB":
                return 1;
            case "GB":
                return 2;
        }
    }

    protected override bool TryParseValueFromString(string? value, out int result, out string? validationErrorMessage)
    {
        result = int.Parse(value!);
        validationErrorMessage = "";
        return false;
    }
}