@using Microsoft.AspNetCore.Components.Forms
@using MoonCore.Exceptions

<EditForm Model="Model" OnSubmit="OnSubmit">
    <div class="@(IsProcessing ? "blockui" : "")">

        @if (ErrorMessages.Count != 0)
        {
            <div class="alert alert-danger bg-danger text-white p-10 mb-5 fs-6">
                @foreach (var msg in ErrorMessages)
                {
                    @(msg)
                    <br/>
                }
            </div>
        }

        @ChildContent

        @if (IsProcessing)
        {
            <div class="blockui-overlay card-rounded bg-black bg-opacity-75">
                <div class="d-flex flex-column">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border spinner-border-lg text-primary" role="status"></div>
                    </div>
                    <div class="mt-3 d-flex justify-content-center">
                        <div class="text-white fs-4 fw-semibold">Loading</div>
                    </div>
                </div>
            </div>
        }
    </div>
</EditForm>

@code
{
    [Parameter] public object Model { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; }

    private readonly List<string> ErrorMessages = new();
    private bool IsProcessing = false;

    private async Task OnSubmit(EditContext context)
    {
        IsProcessing = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            await Task.Delay(5000);
        }
        catch (DisplayException e)
        {
            ErrorMessages.Add(e.Message);
        }

        IsProcessing = false;
        await InvokeAsync(StateHasChanged);
    }
}