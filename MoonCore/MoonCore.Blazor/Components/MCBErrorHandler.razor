@using System.Diagnostics
@using MoonCore.Helpers
@using MoonCore.Exceptions
@using Microsoft.Extensions.Logging
@using MoonCore.Blazor.Models

@inject ILogger<MCBErrorHandler> Logger
@inject IServiceProvider ServiceProvider
@inject MoonCoreBlazorConfiguration Configuration

@inherits ErrorBoundaryBase

@if (Crashed || Exception != null)
{
    if (
        Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") == "Development" ||
        Configuration.ErrorHandler.ShowStacktraceFunc != null &&
        Configuration.ErrorHandler.ShowStacktraceFunc.Invoke(ServiceProvider))
    {
        if (Exception != null)
        {
            var content = Formatter.FormatLineBreaks(Exception.ToStringDemystified());
            
            if (Configuration.ErrorHandler.StacktraceComponent != null)
            {
                @Configuration.ErrorHandler.StacktraceComponent.Invoke(content)
            }
            else
            {
                <div class="alert alert-danger bg-danger text-white p-3 mb-5 fw-semibold fs-5 text-center">
                    @content
                </div>
            }
        }
        else
        {
            if (Configuration.ErrorHandler.UnknownErrorComponent != null)
            {
                @Configuration.ErrorHandler.UnknownErrorComponent
            }
            else
            {
                <div class="alert alert-danger bg-danger text-white p-3 mb-5 fw-semibold fs-5 text-center">
                    An unknown error has occured while processing your request. Please refresh the page in order to continue. If this error persists please contact the administrator
                </div>
            }
        }
    }
    else
    {
        if (Configuration.ErrorHandler.UnknownErrorComponent != null)
        {
            @Configuration.ErrorHandler.UnknownErrorComponent
        }
        else
        {
            <div class="alert alert-danger bg-danger text-white p-3 mb-5 fw-semibold fs-5 text-center">
                An unknown error has occured while processing your request. Please refresh the page in order to continue. If this error persists please contact the administrator
            </div>
        }
    }
}
else
{
    if (ErrorMessages.Any())
    {
        foreach (var errorMessage in ErrorMessages)
        {
            if (Configuration.ErrorHandler.ErrorMessageComponent != null)
            {
                @Configuration.ErrorHandler.ErrorMessageComponent.Invoke(errorMessage)
            }
            else
            {
                <div class="alert alert-danger bg-danger text-white p-3 mb-5 fw-semibold fs-5 text-center">
                    @errorMessage
                </div>
            }
        }
    }

    @ChildContent
}

@code
{
    private bool Crashed = false;
    private List<string> ErrorMessages = new();
    private Exception? Exception;

    protected override async Task OnErrorAsync(Exception exception)
    {
        if (exception is DisplayException displayException)
        {
            ErrorMessages.Add(displayException.Message);

            Task.Run(async () =>
            {
                await Task.Delay(Configuration.ErrorHandler.DisplayErrorDisappearTimeout);

                ErrorMessages.Remove(displayException.Message);

                await InvokeAsync(StateHasChanged);
            });
        }
        else
        {
            Exception = exception;
            Crashed = true;

            Logger.LogError("An unhandled error occured in a blazor view: {exception}", exception);
        }

        Recover();

        // Note:
        // This fixes a weird behavior when a error in a component render call happens, e.g. missing parameter
        // Without this, it would not show the error, just nothing
        Task.Run(async () => { await InvokeAsync(StateHasChanged); });
    }
}