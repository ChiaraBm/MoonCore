@typeparam TItem where TItem : class
@typeparam TCreateForm
@typeparam TUpdateForm

@using MoonCore.Blazor.Bootstrap.Enums
@using MoonCore.Blazor.Bootstrap.Forms.Table
@using MoonCore.Blazor.Bootstrap.Models.Forms
@using MoonCore.Blazor.Bootstrap.Services
@using MoonCore.Extended.Abstractions
@using MoonCore.Helpers

@inject Repository<TItem> Repository
@inject ToastService ToastService
@inject AlertService AlertService

@if (State == AutoCrudState.View)
{
    <div class="card card-body mb-5 py-2 px-2">
        <div class="d-flex justify-content-between">
            <div>
                @if (Search != null)
                {
                    <div class="input-group">
                        <div class="input-group-text">
                            <i class="bx bx-sm bx-search-alt"></i>
                        </div>
                        <input class="form-control" placeholder="Search" @onchange="OnSearchTermChanged"/>
                    </div>
                }
            </div>
            <div>
                <div class="btn btn-primary" @onclick="() => SetState(AutoCrudState.Create)">
                    Create
                </div>
            </div>
        </div>
    </div>

    <div class="card px-3 py-3">
        <div class="card-body">
            <MCBTable @ref="Table" TItem="TItem" ItemSourceCallback="GetTableData">
                @View

                <MCBColumn TItem="TItem">
                    <Template>
                        <div class="text-center">
                            <div class="text-nowrap me-3 fw-semibold">
                                <a href="#" @onclick:preventDefault @onclick="() => StartUpdate(context!)">
                                    <i class="bx bx-edit"></i> Edit
                                </a>
                            </div>
                        </div>
                    </Template>
                </MCBColumn>
            </MCBTable>
        </div>
    </div>
}
else if (State == AutoCrudState.Create)
{
    <MCBForm Model="CreateForm" OnValidSubmit="OnCreate">
        <div class="card card-body mb-5 py-2 px-2">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <a href="#" class="text-body fs-4" @onclick:preventDefault @onclick="() => SetState(AutoCrudState.View)">
                        <i class="bx bx-md bx-chevron-left align-middle"></i>
                        <span class="ms-1 align-middle">Back</span>
                    </a>
                </div>
                <div>
                    <button type="submit" class="btn btn-primary">
                        <i class="bx bx-sm bx-check"></i>
                        Create
                    </button>
                </div>
            </div>
        </div>

        <AutoFormGenerator Model="CreateForm">
            @if (CreateFormOptions != null)
            {
                @CreateFormOptions
            }
        </AutoFormGenerator>
    </MCBForm>
}
else if (State == AutoCrudState.Update)
{
    <MCBForm Model="UpdateForm" OnValidSubmit="OnUpdate">
        <div class="card card-body mb-5 py-2 px-2">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <a href="#" class="text-body fs-4" @onclick:preventDefault @onclick="() => SetState(AutoCrudState.View)">
                        <i class="bx bx-md bx-chevron-left align-middle"></i>
                        <span class="ms-1 align-middle">Back</span>
                    </a>
                </div>
                <div>
                    <button @onclick="StartDelete" type="button" class="btn btn-danger me-1">
                        <i class="bx bx-sm bx-trash"></i>
                        Delete
                    </button>
                    <button type="submit" class="btn btn-primary">
                        <i class="bx bx-sm bx-save"></i>
                        Save changes
                    </button>
                </div>
            </div>
        </div>

        <AutoFormGenerator Model="UpdateForm">
            @if (UpdateFormOptions != null)
            {
                @UpdateFormOptions.Invoke(CurrentItem!)
            }
        </AutoFormGenerator>
    </MCBForm>
}

@code
{
    // View
    [Parameter] public RenderFragment View { get; set; }
    [Parameter] public Func<Repository<TItem>, IEnumerable<TItem>>? Loader { get; set; }
    [Parameter] public Func<IEnumerable<TItem>, string, IEnumerable<TItem>>? Search { get; set; }

    private string SearchTerm = "";
    private MCBTable<TItem> Table;

    // Create
    [Parameter] public RenderFragment? CreateFormOptions { get; set; }

    private TCreateForm CreateForm = Activator.CreateInstance<TCreateForm>();

    // Update, Delete
    [Parameter] public RenderFragment<TItem>? UpdateFormOptions { get; set; }

    private TUpdateForm UpdateForm = Activator.CreateInstance<TUpdateForm>();
    private TItem? CurrentItem;

    // Core
    [Parameter] public Action<AutoCrudConfiguration<TItem>>? OnConfigure { get; set; }

    private AutoCrudConfiguration<TItem> Configuration = new();
    private AutoCrudState State = AutoCrudState.View;

    protected override async Task OnInitializedAsync()
    {
        OnConfigure?.Invoke(Configuration);
    }

    private async Task SetState(AutoCrudState state)
    {
        State = state;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnCreate()
    {
        var item = Mapper.Map<TItem>(CreateForm!);

        Configuration.ValidateAdd?.Invoke(item);

        if (Configuration.CustomAdd != null)
            await Configuration.CustomAdd.Invoke(item);
        else
            Repository.Add(item);

        CreateForm = Activator.CreateInstance<TCreateForm>();
        await ToastService.Success("Successfully created item");
        await SetState(AutoCrudState.View);
    }

    private async Task StartUpdate(TItem item)
    {
        CurrentItem = item;
        UpdateForm = Mapper.Map<TUpdateForm>(CurrentItem);

        await SetState(AutoCrudState.Update);
    }

    private async Task OnUpdate()
    {
        if (CurrentItem == null)
            return;

        var item = Mapper.Map(CurrentItem, UpdateForm!);

        Configuration.ValidateUpdate?.Invoke(item);

        if (Configuration.CustomUpdate != null)
            await Configuration.CustomUpdate.Invoke(item);
        else
            Repository.Update(item);

        await ToastService.Success("Successfully updated item");
        await SetState(AutoCrudState.View);
    }

    private async Task StartDelete()
    {
        await AlertService.Confirm(
            "Confirm item deletion",
            "Do you really want to delete this item? This cannot be undone",
            OnDelete
        );
    }

    private async Task OnDelete()
    {
        if (CurrentItem == null)
            return;

        if (Configuration.CustomDelete != null)
            await Configuration.CustomDelete.Invoke(CurrentItem);
        else
            Repository.Delete(CurrentItem);

        await ToastService.Success("Successfully deleted item");
        await SetState(AutoCrudState.View);
    }

    private IEnumerable<TItem> GetTableData()
    {
        IEnumerable<TItem> dataSource;

        if (Loader == null)
            dataSource = Repository.Get();
        else
            dataSource = Loader.Invoke(Repository);
        
        if (Search == null || string.IsNullOrEmpty(SearchTerm))
            return dataSource;

        return Search.Invoke(dataSource, SearchTerm);
    }

    private async Task OnSearchTermChanged(ChangeEventArgs eventArgs)
    {
        SearchTerm = eventArgs.Value?.ToString() ?? "";
        await Table.Refresh(fullRefresh: true);
    }
}