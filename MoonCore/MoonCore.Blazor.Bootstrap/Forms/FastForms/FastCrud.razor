@using Mappy.Net
@using Microsoft.Extensions.Logging
@using MoonCore.Abstractions
@using MoonCore.Blazor.Bootstrap.Forms.Table
@using MoonCore.Blazor.Bootstrap.Models.FastForms
@using MoonCore.Blazor.Bootstrap.Services
@using MoonCore.Exceptions

@typeparam TItem where TItem : class

@inject Repository<TItem> ItemRepository
@inject ToastService ToastService
@inject AlertService AlertService

@inject ILogger<FastCrud<TItem>> Logger

@if (State == FastCrudState.View)
{
    <div class="card card-body mb-5 p-3">
        <div class="d-flex justify-content-between">
            @if (SelectedItems.Count > 0)
            {
                <div class="d-flex align-items-center">
                    <div class="ms-1 fs-4 fw-semibold">@SelectedItems.Count item(s) selected</div>
                </div>
                <div>
                    @if (SelectActions != null)
                    {
                        @SelectActions.Invoke(SelectedItems.ToArray())
                    }

                    <div class="btn btn-danger" @onclick="DeleteSelection">
                        <i class="bx bx-sm bx-trash"></i>
                        Delete
                    </div>
                </div>
            }
            else
            {
                <div>
                    @if (Search != null)
                    {
                        <div class="input-group">
                            <div class="input-group-text">
                                <i class="bx bx-sm bx-search-alt"></i>
                            </div>
                            <input class="form-control" placeholder="Search" @onchange="OnSearchTermChanged"/>
                        </div>
                    }
                </div>
                <div>
                    @if (ViewToolbar != null)
                    {
                        @ViewToolbar
                    }

                    <div class="btn btn-primary" @onclick="StartCreate">
                        Create
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="card">
        <div class="card-body pt-3 px-5 pb-4">
            <MCBTable @ref="Table" TItem="TItem" ItemSourceCallback="GetTableData" OnRefreshed="OnRefreshed">
                <MCBColumn TItem="TItem" CssClasses="w-10px align-middle" HeadCssClasses="w-10px align-middle">
                    <HeadTemplate>
                        @if (SelectedItems.Count > 0 && SelectedItems.Count == Table.CurrentItems.Length)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" checked="checked" @onclick="() => SelectAll(false)">
                            </div>
                        }
                        else
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @onclick="() => SelectAll(true)">
                            </div>
                        }
                    </HeadTemplate>
                    <Template>
                        @if (SelectedItems.Contains(context))
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" checked="checked" @onclick="() => Select(context, false)">
                            </div>
                        }
                        else
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @onclick="() => Select(context, true)">
                            </div>
                        }
                    </Template>
                </MCBColumn>

                @View

                <MCBColumn TItem="TItem">
                    <Template>
                        <div class="text-center">
                            <div class="text-nowrap me-3 fw-semibold">
                                @if (ViewContextActions != null)
                                {
                                    @ViewContextActions
                                }

                                <a href="#" @onclick:preventDefault @onclick="() => StartEdit(context!)">
                                    <i class="bx bx-edit"></i> Edit
                                </a>
                            </div>
                        </div>
                    </Template>
                </MCBColumn>
            </MCBTable>
        </div>
    </div>
}
else if (State == FastCrudState.Create)
{
    <div class="card card-body mb-5 p-3">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <a href="#" class="text-body fs-4" @onclick:preventDefault @onclick="() => SetState(FastCrudState.View)">
                    <i class="bx bx-md bx-chevron-left align-middle"></i>
                    <span class="ms-1 align-middle">Back</span>
                </a>
            </div>
            <div>
                @if (CreateToolbar != null)
                {
                    @CreateToolbar
                }

                <WButton CssClasses="btn btn-primary" OnClick="FinishCreate">
                    <i class="bx bx-sm bx-check"></i>
                    Create
                </WButton>
            </div>
        </div>
    </div>

    if (CreateErrorMessages != null && CreateErrorMessages.Length > 0)
    {
        <div class="alert alert-danger bg-danger text-white p-10 mb-5 fs-6">
            @foreach (var errorMessage in CreateErrorMessages)
            {
                @errorMessage
                <br/>
            }
        </div>
    }

    <FastForm @ref="CreateForm" Model="ItemToCreate" OnConfigure="OnConfigureCreateForm"/>
}
else if (State == FastCrudState.Edit)
{
    <div class="card card-body mb-5 p-3">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <a href="#" class="text-body fs-4" @onclick:preventDefault @onclick="() => SetState(FastCrudState.View)">
                    <i class="bx bx-md bx-chevron-left align-middle"></i>
                    <span class="ms-1 align-middle">Back</span>
                </a>
            </div>
            <div>
                @if (EditToolbar != null)
                {
                    @EditToolbar.Invoke(ItemToEditSrc)
                }

                <WButton CssClasses="btn btn-danger me-1" OnClick="OnDelete">
                    <i class="bx bx-sm bx-trash"></i>
                    Delete
                </WButton>
                <WButton CssClasses="btn btn-primary" OnClick="FinishEdit">
                    <i class="bx bx-sm bx-check"></i>
                    Save changes
                </WButton>
            </div>
        </div>
    </div>

    if (EditErrorMessages != null && EditErrorMessages.Length > 0)
    {
        <div class="alert alert-danger bg-danger text-white p-10 mb-5 fs-6">
            @foreach (var errorMessage in EditErrorMessages)
            {
                @errorMessage
                <br/>
            }
        </div>
    }

    <FastForm @ref="EditForm" Model="ItemToEdit" OnConfigure="OnConfigureEditForm"/>
}

@code
{
// View
    [Parameter] public RenderFragment View { get; set; }
    [Parameter] public Func<Repository<TItem>, IEnumerable<TItem>>? Loader { get; set; }
    [Parameter] public Func<IEnumerable<TItem>, string, IEnumerable<TItem>>? Search { get; set; }
    [Parameter] public RenderFragment? ViewToolbar { get; set; }
    [Parameter] public RenderFragment? ViewContextActions { get; set; }
    [Parameter] public RenderFragment<TItem[]>? SelectActions { get; set; }
    [Parameter] public bool ShowSelectionDelete { get; set; } = true;

    private List<TItem> SelectedItems = new();
    
// Create
    [Parameter] public RenderFragment? CreateToolbar { get; set; }

    private TItem ItemToCreate;
    private string[]? CreateErrorMessages;
    private FastForm<TItem> CreateForm;

// Edit
    [Parameter] public RenderFragment<TItem>? EditToolbar { get; set; }

    private TItem ItemToEdit;
    private TItem ItemToEditSrc; // Used when data cloning is not disabled
    private string[]? EditErrorMessages;
    private FastForm<TItem> EditForm;

// Core
    [Parameter] public Action<FastCrudConfiguration<TItem>>? OnConfigure { get; set; }
    [Parameter] public Action<FastFormConfiguration<TItem>, TItem>? OnConfigureCreate { get; set; }
    [Parameter] public Action<FastFormConfiguration<TItem>, TItem>? OnConfigureEdit { get; set; }

    private FastCrudState State = FastCrudState.View;
    private FastCrudConfiguration<TItem> Configuration = new();

    #region Core

    protected override void OnInitialized()
    {
        Logger.LogTrace("OnInitialized() called");

        OnConfigure?.Invoke(Configuration);
    }

    public async Task Refresh(bool fullRefresh = false, bool isSilent = false)
    {
        if (Table != null)
            await Table.Refresh(fullRefresh, isSilent);
    }

    public async Task SetState(FastCrudState state)
    {
        // Reset
        SelectedItems.Clear();
        
        State = state;

        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Create

    private async Task StartCreate()
    {
        ItemToCreate = Activator.CreateInstance<TItem>();
        await SetState(FastCrudState.Create);
    }

    private async Task FinishCreate()
    {
// Validate form
        if (!await CreateForm.Validate(out CreateErrorMessages))
        {
            await InvokeAsync(StateHasChanged);
            return;
        }

// Custom validate hook
        if (Configuration.ValidateCreate != null)
        {
            try
            {
                await Configuration.ValidateCreate.Invoke(ItemToCreate);
            }
            catch (DisplayException e)
            {
                CreateErrorMessages = [e.Message];

                await InvokeAsync(StateHasChanged);
                return;
            }
        }

// Choose creation strategy
        if (Configuration.CustomCreate != null)
            await Configuration.CustomCreate.Invoke(ItemToCreate);
        else
            ItemRepository.Add(ItemToCreate);

// Feedback
        await ToastService.Success("Successfully added item");
        await SetState(FastCrudState.View);
    }

    private void OnConfigureCreateForm(FastFormConfiguration<TItem> configuration)
        => OnConfigureCreate?.Invoke(configuration, ItemToCreate);

    #endregion

    #region View

    private MCBTable<TItem> Table;
    private string? SearchTerm;

    private IEnumerable<TItem> GetTableData()
    {
        Logger.LogTrace("GetTableData() called");

        IEnumerable<TItem> dataSource;

        if (Loader == null)
            dataSource = ItemRepository.Get();
        else
            dataSource = Loader.Invoke(ItemRepository);

        if (Search == null || string.IsNullOrEmpty(SearchTerm))
            return dataSource;

        return Search.Invoke(dataSource, SearchTerm);
    }

    private async Task SelectAll(bool status)
    {
        if (status)
        {
            foreach (var item in Table.CurrentItems)
                SelectedItems.Add(item);
        }
        else
            SelectedItems.Clear();

        await InvokeAsync(StateHasChanged);
    }

    private async Task Select(TItem item, bool status)
    {
        if (status)
        {
            if(!SelectedItems.Contains(item))
                SelectedItems.Add(item);
        }
        else
        {
            if (SelectedItems.Contains(item))
                SelectedItems.Remove(item);
        }
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteSelection()
    {
        var items = SelectedItems.ToArray();
        
        await AlertService.Confirm(
            "Confirm item deletion",
            $"Do you really want to delete {items.Length} item(s)? This action cannot be undone",
            async () =>
            {
// Hook for custom validator
                if (Configuration.ValidateDelete != null)
                {
                    try
                    {
                        foreach (var item in items)
                            await Configuration.ValidateDelete.Invoke(item);
                    }
                    catch (DisplayException e)
                    {
                        EditErrorMessages = [e.Message];

                        await InvokeAsync(StateHasChanged);
                        return;
                    }
                }

                await ToastService.CreateProgress("selectionDeletion", "Deleting item selection...");
                
// Choose deletion strategy

                var counter = 0;

                if (Configuration.CustomDelete != null)
                {
                    foreach (var item in items)
                    {
                        counter++;
                        await ToastService.UpdateProgress("selectionDeletion", $"Deleting item {counter}/{items.Length}");
                        
                        await Configuration.CustomDelete.Invoke(item);
                    }
                }
                else
                {
                    foreach (var item in SelectedItems)
                    {
                        counter++;
                        await ToastService.UpdateProgress("selectionDeletion", $"Deleting item {counter}/{items.Length}");
                        
                        ItemRepository.Delete(item);
                    }
                }

// Feedback
                await ToastService.DeleteProgress("selectionDeletion");
                await ToastService.Success($"Successfully deleted {items.Length} items");
                await Table.Refresh(fullRefresh: true);
            }
        );
    }
    
    private async Task OnRefreshed()
    {
        SelectedItems.Clear();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSearchTermChanged(ChangeEventArgs eventArgs)
    {
        SearchTerm = eventArgs.Value?.ToString() ?? "";
        await Table.Refresh(fullRefresh: true);
    }

    #endregion

    #region Edit

    public async Task StartEdit(TItem item)
    {
        ItemToEditSrc = item;

// Configure edit model
        if (Configuration.ExperimentalDisableItemCloning)
            ItemToEdit = item;
        else
            ItemToEdit = Mapper.Map<TItem>(item); // Create a clone of the item

        await SetState(FastCrudState.Edit);
    }

    private async Task FinishEdit()
    {
// Validate form
        if (!await EditForm.Validate(out EditErrorMessages))
        {
            await InvokeAsync(StateHasChanged);
            return;
        }

// Collect data
        TItem itemToEdit;

        if (Configuration.ExperimentalDisableItemCloning)
            itemToEdit = ItemToEdit;
        else
            itemToEdit = Mapper.Map(ItemToEditSrc, ItemToEdit);

// Hook for custom validator. We use the itemToEdit variable here as it represents the changes made to the current item
        if (Configuration.ValidateEdit != null)
        {
            try
            {
                await Configuration.ValidateEdit.Invoke(itemToEdit);
            }
            catch (DisplayException e)
            {
                EditErrorMessages = [e.Message];

                await InvokeAsync(StateHasChanged);
                return;
            }
        }

// Choose edit strategy
        if (Configuration.CustomEdit != null)
            await Configuration.CustomEdit.Invoke(itemToEdit);
        else
            ItemRepository.Update(itemToEdit);

// Feedback
        await ToastService.Success("Successfully updated item");
        await SetState(FastCrudState.View);
    }

    private void OnConfigureEditForm(FastFormConfiguration<TItem> fastConfiguration)
        => OnConfigureEdit?.Invoke(fastConfiguration, ItemToEditSrc);

    #endregion

    #region Delete

    private async Task OnDelete()
    {
        await AlertService.Confirm(
            "Confirm item deletion",
            "Do you really want to delete this item? This action cannot be undone",
            async () =>
            {
// Hook for custom validator
                if (Configuration.ValidateDelete != null)
                {
                    try
                    {
                        await Configuration.ValidateDelete.Invoke(ItemToEditSrc);
                    }
                    catch (DisplayException e)
                    {
                        EditErrorMessages = [e.Message];

                        await InvokeAsync(StateHasChanged);
                        return;
                    }
                }

// Choose deletion strategy
                if (Configuration.CustomDelete != null)
                    await Configuration.CustomDelete.Invoke(ItemToEditSrc);
                else
                    ItemRepository.Delete(ItemToEditSrc);

// Feedback
                await ToastService.Success("Successfully deleted items");
                await SetState(FastCrudState.View);
            }
        );
    }

    #endregion
}