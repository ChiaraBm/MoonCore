@using System.Text.Json
@inherits BaseFormComponent<string>

<div class="relative">
    <button @onclick="ToggleShow" class="form-input !py-1 !px-1">
        <div class="space-x-1 space-y-1">
            @foreach (var tag in Tags)
            {
                <span class="rounded-lg px-2 py-1 text-sm bg-indigo-500">
                    <span>@(tag)</span>
                    <span @onclick="() => Remove(tag)" class="font-semibold cursor-pointer">
                        <i class="bi bi-x"></i>
                    </span>
                </span>
            }
        </div>
    </button>
    
    @if (Show)
    {
        <div class="absolute z-10 mt-1 max-h-56 w-full overflow-auto text-base shadow-lg" tabindex="-1" role="listbox">
            <input @ref="InputReference"
                   @onfocusout="OnFocusOut"
                   @bind:event="oninput"
                   @bind="CurrentInput"
                   @onkeydown="OnSubmit"
                   type="text"
                   class="form-input w-full"
                   placeholder="Enter value...">
        </div>
    }
</div>

@code
{
    private List<string> Tags = new();
    private string CurrentInput = "";

    private bool Show = false;
    private ElementReference InputReference;

    protected override void OnInitialized()
    {
        Tags = JsonSerializer.Deserialize<List<string>>(Binder.Value) ?? new();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Show)
            await InputReference.FocusAsync();
    }

    private async Task ToggleShow()
    {
        Show = !Show;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnFocusOut()
    {
        await Task.Delay(200);

        Show = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Add()
    {
        CurrentInput = CurrentInput.Trim();

        if (string.IsNullOrEmpty(CurrentInput))
            return;

        Tags.Add(CurrentInput);
        Sync();

        CurrentInput = "";
        await InvokeAsync(StateHasChanged);
    }

    private async Task Remove(string toRemove)
    {
        if (!Tags.Contains(toRemove))
            return;

        Tags.Remove(toRemove);
        Sync();

        await InvokeAsync(StateHasChanged);
    }

    private void Sync()
    {
        Binder.Value = JsonSerializer.Serialize(Tags);
    }

    private async Task OnSubmit(KeyboardEventArgs args)
    {
        if(args.Key != "Enter")
            return;

        await Add();
    }
}