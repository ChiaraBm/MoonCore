@typeparam TItem where TItem : class

@inherits BaseFormComponent<TItem>

<div class="relative mt-2">
    <button @onclick="ToggleShow" @onfocusout="OnFocusOut" type="button" class="form-select w-full cursor-default">
        <div class="flex items-center justify-start">
            @if (Binder.ValueNullable == null)
            {
                <span class="block truncate text-gray-500">Select...</span>
            }
            else
            {
                <span class="block truncate">
                    @DisplayProperty.Invoke(Binder.Value)
                </span>
            }
        </div>
    </button>

    @if (Show)
    {
        <ul class="absolute z-10 mt-1 max-h-56 w-full overflow-auto rounded-md bg-gray-800 py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm" tabindex="-1" role="listbox">
            @if (AllowNone)
            {
                <li @onclick="() => Select(null)" class="relative cursor-default select-none py-2 pl-3 pr-3 text-gray-300 hover:bg-primary-600 hover:text-white">
                    <div class="flex items-center justify-between">
                        <span class="block truncate">
                            None
                        </span>

                        <span>
                            @if (Binder.ValueNullable == null)
                            {
                                <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"/>
                                </svg>
                            }
                        </span>
                    </div>
                </li>
            }

            @foreach (var item in Items)
            {
                <li @onclick="() => Select(item)" class="relative cursor-default select-none py-2 pl-3 pr-3 text-gray-300 hover:bg-primary-600 hover:text-white">
                    <div class="flex items-center justify-between">
                        <span class="block truncate">
                            @DisplayProperty.Invoke(item)
                        </span>

                        <span>
                            @if (item == Binder.ValueNullable)
                            {
                                <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"/>
                                </svg>
                            }
                        </span>
                    </div>
                </li>
            }
        </ul>
    }
</div>

@code
{
    [Parameter] public Func<TItem, string> DisplayProperty { get; set; }
    [Parameter] public TItem[] Items { get; set; }
    [Parameter] public bool AllowNone { get; set; } = false;

    private bool Show = false;

    private async Task ToggleShow()
    {
        Show = !Show;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Select(TItem? item)
    {
        Binder.ValueNullable = item;
        await InvokeAsync(StateHasChanged);
    }

    private Task OnFocusOut()
    {
        Task.Run(async () =>
        {
            await Task.Delay(200);

            Show = false;
            await InvokeAsync(StateHasChanged);
        });
        
        return Task.CompletedTask;
    }
}