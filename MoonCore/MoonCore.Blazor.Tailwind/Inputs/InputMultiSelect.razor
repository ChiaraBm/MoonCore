@using MoonCore.Blazor.Tailwind.Modals

@typeparam TItem
@typeparam TProperty

@inject ModalService ModalService

<button @onclick="LaunchModal" type="button" class="form-select w-full cursor-default">
    <div class="flex items-center justify-start">
        @if (Value == null || Value.Length == 0)
        {
            <span class="block truncate text-gray-500">Select...</span>
        }
        else
        {
            <span class="block truncate">
                @($"{Value?.Length ?? 0} selected")
            </span>
        }
    </div>
</button>

@code
{
    [Parameter] public Func<TItem, string> DisplayProperty { get; set; }
    [Parameter] public Func<TItem, TProperty> ValueProperty { get; set; }
    [Parameter] public Func<Task<TItem[]>> Loader { get; set; }
    [Parameter] public bool AllowSearch { get; set; } = true;

    #region Binder

    private TProperty[]? _value;

    [Parameter]
    public TProperty[]? Value
    {
        get => _value;
        set
        {
            if (Equals(value, _value)) return;
            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    [Parameter] public EventCallback<TProperty[]?> ValueChanged { get; set; }

    #endregion

    private async Task LaunchModal()
    {
        var onSubmit = async (TProperty[] items) =>
        {
            Value = items;
            await InvokeAsync(StateHasChanged);
        };
        
        await ModalService.Launch<MultiSelectModal<TItem, TProperty>>(parameters =>
        {
            parameters.Add("DisplayProperty", DisplayProperty);
            parameters.Add("ValueProperty", ValueProperty);
            parameters.Add("Loader", Loader);
            parameters.Add("OnSubmit", onSubmit);
            parameters.Add("Value", Value!);
            parameters.Add("AllowSearch", AllowSearch);
        }, "max-w-3xl");
    }
}
