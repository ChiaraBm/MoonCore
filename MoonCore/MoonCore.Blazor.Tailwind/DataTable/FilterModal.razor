@using MoonCore.Models
@using MoonCore.Blazor.Tailwind.Modals.Components
@using MoonCore.Blazor.Tailwind.Components

@typeparam TItem
@inherits BaseModal

<div class="grid grid-cols-2 gap-x-2 gap-y-2">
    @foreach (var filter in Filters)
    {
        <div class="col-span-2">
            <FilterInput Filter="filter" />
        </div>
    }
</div>

<WButton OnClick="_ => Apply()" CssClasses="btn btn-primary w-full mt-3">Apply filters</WButton>

@code
{
    [Parameter] public QueryOptions Options { get; set; }
    [Parameter] public List<DataColumn<TItem>> Columns { get; set; }
    [Parameter] public Func<Task> OnApplied { get; set; }

    private readonly List<Filter> Filters = new();

    protected override void OnInitialized()
    {
        foreach (var column in Columns)
        {
            if(Options.Filters.Any(x => x.Field == column.Title))
                Filters.Add(Options.Filters.First(x => x.Field == column.Title));
            else
            {
                Filters.Add(new Filter()
                {
                    Field = column.Title!,
                    Type = FilterType.Contains,
                    Value = ""
                });
            }
        }
    }

    private async Task Apply()
    {
        Options.Filters.Clear();
        Options.Filters.AddRange(Filters.Where(x => !string.IsNullOrEmpty(x.Value)));

        await Hide();
        
        // Notify the data table that we are done changing the filter
        await OnApplied.Invoke();
    }
}
