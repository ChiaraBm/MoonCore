@using MoonCore.Blazor.Tailwind.Modals.Components
@using MoonCore.Blazor.Tailwind.Components
@using MoonCore.Blazor.Tailwind.Fm.Models
@using MoonCore.Blazor.Tailwind.Inputs
@using MoonCore.Helpers

@inherits BaseModal

<h1 class="mb-5 font-semibold text-xl">Creating archive</h1>

<HandleForm @ref="HandleForm" Model="Input" OnValidSubmit="OnValidSubmit">
    <div class="grid grid-cols-1 gap-y-3">
        <div class="col-span-1">
            <label class="block text-sm font-medium leading-6 text-white">Compress type</label>
            <InputItemSelect Value="Input.Type"
                             TItem="CompressType"
                             TProperty="CompressType"
                             ValueChanged="ChangeCompressType"
                             DisplayProperty="@(x => x.DisplayName)"
                             ValueProperty="@(x => x!)"
                             Loader="() => Task.FromResult(CompressTypes)"/>
        </div>
        <div class="col-span-1">
            <label class="block text-sm font-medium leading-6 text-white">File name</label>
            <input @bind="Input.FileName" type="text" class="form-input w-full placeholder-gray-500"
                   placeholder="Enter a file name"/>
        </div>
    </div>
</HandleForm>

<div class="mt-5 flex space-x-2">
    <WButton OnClick="_ => Hide()" CssClasses="btn btn-secondary grow">Cancel</WButton>
    <WButton OnClick="_ => Submit()" CssClasses="btn btn-primary grow">Submit</WButton>
</div>

@code
{
    [Parameter] public Func<CompressType, string, Task> OnSubmit { get; set; }
    [Parameter] public CompressType[] CompressTypes { get; set; }

    private HandleForm HandleForm;
    private CompressOptionStruct Input = new();

    protected override void OnInitialized()
    {
        Input.Type = CompressTypes.First();
        Input.FileName = $"archive-{DateTimeOffset.Now.ToUnixTimeSeconds()}.{Input.Type.Extension}";
    }

    private async Task ChangeCompressType(CompressType? compressType)
    {
        if (compressType == null)
            return;

        Input.FileName = Formatter.ReplaceEnd(
            Input.FileName,
            Input.Type.Extension,
            compressType.Extension
        );

        Input.Type = compressType;

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnValidSubmit()
    {
        await OnSubmit.Invoke(Input.Type, Input.FileName);
        await Hide();
    }

    private Task Submit() => HandleForm.Submit();
}