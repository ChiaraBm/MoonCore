@using MoonCore.Blazor.Tailwind.Dt
@using MoonCore.Blazor.Tailwind.States
@using MoonCore.Helpers

<DataTable @ref="DataTable"
           TItem="FileSystemEntry"
           LoadItemsAsync="LoadItemsAsync"
           OnContextMenuRequested="OnContextMenuRequested"
           EnableHeaderRounding="EnableHeadRounding">
    <Configuration>

        @* First, let other components apply their config if necessary *@
        
        @if (PreConfiguration != null)
        {
            @PreConfiguration
        }

        @* Then, apply our own config *@
        <DataTableColumn TItem="FileSystemEntry" HeaderCss="w-12 px-2" ColumnCss="w-12 px-2">
            <ColumnTemplate>
                <div class="flex justify-center items-center">
                    @if (context.IsFile)
                    {
                        <i class="icon-file-text text-2xl text-warning-500"></i>
                    }
                    else
                    {
                        <i class="icon-folder text-2xl text-primary-500"></i>
                    }
                </div>
            </ColumnTemplate>
        </DataTableColumn>
        <DataTableColumn TItem="FileSystemEntry" Field="@(x => x.Name)"
                         Name="Name"
                         HeaderCss="px-1 py-2"
                         ColumnCss="px-1 py-3">
            <ColumnTemplate>
                <a class="hover:text-gray-100" @onclick="() => InvokeInteract(context)" @onclick:preventDefault
                   href="#">
                    @context.Name
                </a>
            </ColumnTemplate>
        </DataTableColumn>

        @* And at the end, let other components apply their post config if necessary *@

        @if (PostConfiguration != null)
        {
            @PostConfiguration
        }
        
    </Configuration>
    <NoItemsTemplate>
        @if (NoFilesTemplate != null)
        {
            @NoFilesTemplate
        }
        else
        {
            <StateDisplay Title="No files found"
                          Description="No files or folders found"
                          Icon="icon-folder-open"
                          IconColor="text-primary-500"
                          Type="StateType.Custom"/>
        }
    </NoItemsTemplate>
</DataTable>

@code
{
    [Parameter] public IFileSystemProvider FileSystemProvider { get; set; }
    [Parameter] public string InitialPath { get; set; } = "/";
    [Parameter] public Func<IEnumerable<FileSystemEntry>, IEnumerable<FileSystemEntry>>? EntryFilter { get; set; }

    [Parameter] public RenderFragment? PreConfiguration { get; set; }
    [Parameter] public RenderFragment? PostConfiguration { get; set; }
    [Parameter] public RenderFragment? NoFilesTemplate { get; set; }

    [Parameter] public Func<FileSystemEntry, Task>? OnInteract { get; set; }

    public string CurrentPath { get; private set; }
    
    // Proxy to DataTable
    [Parameter] public bool EnableHeadRounding { get; set; } = true;
    [Parameter] public Func<MouseEventArgs, FileSystemEntry, Task>? OnContextMenuRequested { get; set; }
    
    public FileSystemEntry[] LoadedEntries => DataTable.LoadedData.Items;
    
    private DataTable<FileSystemEntry> DataTable;
    
    protected override void OnInitialized()
    {
        CurrentPath = InitialPath;
    }

    private async Task<IEnumerable<FileSystemEntry>> LoadItemsAsync()
    {
        IEnumerable<FileSystemEntry> entries = await FileSystemProvider.List(CurrentPath);

        // Additional filter
        if (EntryFilter != null)
            entries = EntryFilter.Invoke(entries);

        // Default filter
        entries = entries
            .OrderBy(x => x.IsFile)
            .ThenBy(x => x.Name);

        return entries;
    }

    private async Task InvokeInteract(FileSystemEntry entry)
    {
        if (OnInteract == null)
            return;

        await OnInteract.Invoke(entry);
    }

    public async Task Refresh()
    {
        await DataTable.Refresh();
        await InvokeAsync(StateHasChanged);
    }

    public async Task<string> Navigate(string path)
    {
        if (path.StartsWith("/"))
            CurrentPath = path;
        else
            CurrentPath = PathBuilder.FullPathUnix(CurrentPath, path);
        
        await DataTable.Refresh();
        return CurrentPath;
    }
}
