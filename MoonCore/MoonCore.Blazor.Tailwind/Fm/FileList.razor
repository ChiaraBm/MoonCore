@using MoonCore.Blazor.Tailwind.Dt
@using MoonCore.Blazor.Tailwind.States
@using MoonCore.Helpers
@using MoonCore.Blazor.Tailwind.Components

<DataTable @ref="DataTable"
           TItem="FileSystemEntry"
           OnContextMenu="OnContextMenu"
           ContainerCss="@ContainerCss"
           ItemSource="LoadItemsAsync">
    <Configuration>
        @if (Configuration != null)
        {
            @Configuration
        }

        <DataTableColumn TItem="FileSystemEntry" HeaderCss="w-12 px-2" ColumnCss="w-12 px-2" Index="1">
            <ColumnTemplate>
                <div class="flex justify-center items-center">
                    @if (context.IsFile)
                    {
                        <i class="icon-file-text text-2xl text-warning"></i>
                    }
                    else
                    {
                        <i class="icon-folder text-2xl text-primary"></i>
                    }
                </div>
            </ColumnTemplate>
        </DataTableColumn>
        <DataTableColumn TItem="FileSystemEntry" Field="@(x => x.Name)"
                         Name="Name"
                         HeaderCss="px-1 py-2"
                         ColumnCss="px-1 py-3"
                         Index="2">
            <ColumnTemplate>
                <a class="hover:text-gray-100" @onclick="() => InvokeInteract(context)" @onclick:preventDefault
                   href="#">
                    @context.Name
                </a>
            </ColumnTemplate>
        </DataTableColumn>
    </Configuration>
    <NoItemsIndicator>
        @if (NoFilesTemplate != null)
        {
            @NoFilesTemplate
        }
        else
        {
            <IconAlert Title="No files found"
                       Color="text-primary"
                       Icon="icon-folder-open">
                No files or folders found
            </IconAlert>
        }
    </NoItemsIndicator>
</DataTable>

@code
{
    [Parameter] public IFileSystemProvider FileSystemProvider { get; set; }
    [Parameter] public string InitialPath { get; set; } = "/";
    [Parameter] public Func<IEnumerable<FileSystemEntry>, IEnumerable<FileSystemEntry>>? EntryFilter { get; set; }

    [Parameter] public RenderFragment? Configuration { get; set; }
    [Parameter] public RenderFragment? NoFilesTemplate { get; set; }

    [Parameter] public Func<FileSystemEntry, Task>? OnInteract { get; set; }

    public string CurrentPath { get; private set; }

    [Parameter] public string ContainerCss { get; set; } = "overflow-x-auto bg-gray-800 rounded-lg";
    [Parameter] public Func<MouseEventArgs, FileSystemEntry, Task>? OnContextMenu { get; set; }

    public FileSystemEntry[] Entries => DataTable.Items;

    private DataTable<FileSystemEntry> DataTable;

    protected override void OnInitialized()
    {
        CurrentPath = InitialPath;
    }

    private async Task<FileSystemEntry[]> LoadItemsAsync()
    {
        IEnumerable<FileSystemEntry> entries = await FileSystemProvider.List(CurrentPath);

        // Additional filter
        if (EntryFilter != null)
            entries = EntryFilter.Invoke(entries);

        // Default filter
        return entries
            .OrderBy(x => x.IsFile)
            .ThenBy(x => x.Name)
            .ToArray();
    }

    private async Task InvokeInteract(FileSystemEntry entry)
    {
        if (OnInteract == null)
            return;

        await OnInteract.Invoke(entry);
    }

    public async Task Refresh()
    {
        await DataTable.Refresh();
    }

    public async Task<string> Navigate(string path)
    {
        if (path.StartsWith("/"))
            CurrentPath = path;
        else
            CurrentPath = UnixPath.Combine(CurrentPath, path);

        await DataTable.Refresh();
        return CurrentPath;
    }
}
