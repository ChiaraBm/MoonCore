@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using MoonCore.Blazor.Tailwind.Fm.Models
@using MoonCore.Blazor.Tailwind.Modals.Components
@using MoonCore.Blazor.Tailwind.Toasts
@using MoonCore.Helpers

@inherits BaseModal

@inject ToastService ToastService
@inject IJSRuntime JsRuntime
@inject ILogger<UploadModal> Logger

<div id="dropzone" class="flex items-center justify-center w-full">
    <label for="file-select"
           class="flex flex-col items-center justify-center w-full h-64 border-2 border-dashed rounded-lg cursor-pointer bg-gray-700 border-gray-600 hover:border-gray-500 hover:bg-gray-600">
        <div class="flex flex-col items-center justify-center pt-5 pb-6">
            <i class="text-gray-400 text-3xl icon-cloud-upload"></i>
            <p class="mb-2 text-sm text-gray-400 font-semibold">
                Click to upload or drag and drop your files
            </p>
            <p class="text-xs text-gray-400 italic">Folders supported via drag and drop</p>
        </div>
    </label>
</div>

@* The input is placed here so we can change the view without losing track of the element *@
<input @onchange="OnChanged" id="file-select" type="file" class="hidden" multiple=""/>

@code
{
    [Parameter] public Func<Task> OnTriggerUpload { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await JsRuntime.InvokeVoidAsync(
            "moonCoreFileManager.setup",
            "dropzone",
            DotNetObjectReference.Create(this)
        );
    }

    [JSInvokable]
    public async Task TriggerUpload(int amount)
    {
        await OnTriggerUpload.Invoke();
        await Hide();
    }

    private async Task OnChanged()
    {
        await JsRuntime.InvokeVoidAsync("moonCoreFileManager.addFilesToCache", "file-select");
        await Hide();
    }
}
