@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using MoonCore.Blazor.Tailwind.Alerts
@using MoonCore.Blazor.Tailwind.Modals
@using MoonCore.Blazor.Tailwind.Services
@using MoonCore.Blazor.Tailwind.Toasts
@using MoonCore.Helpers
@using MoonCore.Blazor.Tailwind.Components
@using MoonCore.Blazor.Tailwind.HotKeys
@using MoonCore.Blazor.Tailwind.States
@using MoonCore.Blazor.Tailwind.Ace
@using MoonCore.Blazor.Tailwind.Dt

@inject ModalService ModalService
@inject ToastService ToastService
@inject AlertService AlertService
@inject DownloadService DownloadService
@inject HotKeyService HotKeyService
@inject IJSRuntime JsRuntime
@inject ILogger<FileManager> Logger

<div class="bg-gray-800 rounded-lg py-1 mb-5">
    <div class="flex justify-between items-center px-3 py-2">
        @if (IsEditing)
        {
            <div class="flex items-center text-base font-semibold">
                <i class="icon-file text-lg me-3"></i>
                <span class="me-1">@EditorEntry.Name</span>
                <span class="text-sm text-gray-400 hidden sm:block">/ @Formatter.FormatSize(EditorEntry.Size)</span>
            </div>
            <div class="flex flex-row gap-x-2">
                <WButton OnClick="_ => SaveFile()" CssClasses="btn btn-primary">
                    <i class="icon-save"></i>
                    <span class="hidden sm:block ms-2">Save changes</span>
                </WButton>

                <button @onclick="CloseEditor" class="btn btn-danger">
                    <i class="icon-door-open"></i>
                    <span class="hidden sm:block ms-2">Close</span>
                </button>
            </div>
        }
        else if (SelectedEntries.Count > 0)
        {
            <div class="flex items-center text-base font-semibold">
                <i class="icon-files text-lg me-3"></i>
                <span class="me-1">@SelectedEntries.Count item(s) selected</span>
            </div>
            <div class="flex flex-row gap-x-2">
                @if (SelectionActionTemplate != null)
                {
                    @SelectionActionTemplate.Invoke(SelectedEntries.ToArray())
                }

                @if (CompressProvider != null)
                {
                    <button @onclick="() => Compress(SelectedEntries.ToArray())" class="btn btn-success">
                        <i class="icon-file-archive"></i>
                        <span class="hidden sm:block ms-2">Archive</span>
                    </button>
                }

                <button @onclick="MoveSelection" class="btn btn-primary">
                    <i class="icon-move"></i>
                    <span class="hidden sm:block ms-2">Move</span>
                </button>

                <button @onclick="DeleteSelection" class="btn btn-danger">
                    <i class="icon-trash-2"></i>
                    <span class="hidden sm:block ms-2">Delete</span>
                </button>
            </div>
        }
        else
        {
            <div></div>
            <div class="flex flex-row gap-x-2">
                @if (ActionTemplate != null)
                {
                    @ActionTemplate
                }

                <button @onclick="LaunchUploadModal" class="btn btn-primary">
                    <i class="icon-cloud-upload me-2"></i>
                    Upload
                </button>

                <button @onclick="LaunchFileModal" class="btn btn-primary">
                    <i class="icon-file-plus me-2"></i>
                    New File
                </button>

                <button @onclick="LaunchFolderModal" class="btn btn-primary">
                    <i class="icon-folder-plus me-2"></i>
                    New Folder
                </button>
            </div>
        }
    </div>
</div>

@if (IsEditing)
{
    <LazyLoader Load="LoadEditor">
        <CodeEditor @ref="FileEditor" InitialContent="@EditorInitialContent" OnConfigure="ConfigureEditor"/>
    </LazyLoader>
}
else
{
    <div class="bg-gray-800 rounded-lg py-1" @ondragenter="HandleDrag">
        <div class="flex justify-between items-center px-4 py-2">
            <PathBreadcrumb Path="@CurrentPath"
                            OnClick="OnPathBreadcrumbClick"
                            ShowHome="true"/>
        </div>

        <FileList @ref="FileList"
                   FileSystemProvider="FileSystemProvider"
                   OnInteract="OnInteract"
                   InitialPath="@CurrentPath"
                   EnableHeadRounding="false"
                   OnContextMenuRequested="(args, entry) => LaunchContextMenu(args, entry)">
            <PreConfiguration>
                <DataTableColumn TItem="FileSystemEntry" HeaderCss="w-8 ps-4" ColumnCss="ps-4">
                    <HeaderTemplate>
                        <div class="flex justify-center">
                            @if (FileList.LoadedEntries.Length != 0 && FileList.LoadedEntries.Length == SelectedEntries.Count)
                            {
                                <input @onclick="() => SetAllSelection(false)" type="checkbox" class="form-checkbox" checked="checked">
                            }
                            else
                            {
                                <input @onclick="() => SetAllSelection(true)" type="checkbox" class="form-checkbox">
                            }
                        </div>
                    </HeaderTemplate>
                    <ColumnTemplate>
                        <div class="flex justify-center">
                            @if (SelectedEntries.Contains(context))
                            {
                                <input @onclick="() => SetSelection(context, false)" type="checkbox" class="form-checkbox" checked="checked">
                            }
                            else
                            {
                                <input @onclick="() => SetSelection(context, true)" type="checkbox" class="form-checkbox">
                            }
                        </div>
                    </ColumnTemplate>
                </DataTableColumn>
            </PreConfiguration>
            <PostConfiguration>
                <DataTableColumn TItem="FileSystemEntry" Field="@(x => x.Size)"
                                 Name="Size"
                                 HeaderCss="px-6 py-2 hidden md:table-cell"
                                 ColumnCss="px-6 py-3 hidden md:table-cell">
                    <ColumnTemplate>
                        @if (context.IsFile)
                        {
                            @Formatter.FormatSize(context.Size)
                        }
                        else
                        {
                            <span>-</span>
                        }
                    </ColumnTemplate>
                </DataTableColumn>
                <DataTableColumn TItem="FileSystemEntry" Field="@(x => x.CreatedAt)"
                                 Name="Created At"
                                 HeaderCss="px-6 py-2 hidden md:table-cell"
                                 ColumnCss="px-6 py-3 hidden md:table-cell">
                    <ColumnTemplate>
                        @Formatter.FormatDate(context.CreatedAt)
                    </ColumnTemplate>
                </DataTableColumn>
                <DataTableColumn TItem="FileSystemEntry" ColumnCss="px-3">
                    <ColumnTemplate>
                        <div class="flex justify-end">
                            <a @onclick="args => LaunchContextMenu(args, context, useOffset: true)" @onclick:preventDefault href="#">
                                <i class="icon-ellipsis text-xl text-white"></i>
                            </a>
                        </div>
                    </ColumnTemplate>
                </DataTableColumn>
            </PostConfiguration>
            <NoFilesTemplate>
                <div class="p-5">
                    <StateDisplay Title="No files found"
                                  Description="Upload files by drag and drop or clicking on the upload button"
                                  Icon="icon-folder-open"
                                  IconColor="text-primary-500"
                                  Type="StateType.Custom"/>
                </div>
            </NoFilesTemplate>
        </FileList>
    </div>

    <ContextMenu @ref="ContextMenu">
        @if (ContextMenuTemplate != null)
        {
            @ContextMenuTemplate.Invoke(ContextMenuEntry)
        }

        <a href="#" @onclick="() => Move(ContextMenuEntry)" @onclick:preventDefault @onmousedown:preventDefault
           @onmousedown:stopPropagation
           class="flex px-4 py-2 items-center hover:bg-gray-700 border-b border-gray-700" role="menuitem"
           tabindex="-1">
            <i class="me-2 text-warning-500 icon-move text-lg"></i>
            <span class="text-sm">Move</span>
        </a>
        <a href="#" @onclick="() => Download(ContextMenuEntry)" @onclick:preventDefault @onmousedown:preventDefault
           @onmousedown:stopPropagation
           class="flex px-4 py-2 items-center hover:bg-gray-700 border-b border-gray-700" role="menuitem"
           tabindex="-1">
            <i class="me-2 text-primary-500 icon-hard-drive-download text-lg"></i>
            <span class="text-sm">Download</span>
        </a>

        @if (CompressProvider != null)
        {
            <a href="#" @onclick="() => Compress([ContextMenuEntry])" @onclick:preventDefault
               @onmousedown:preventDefault
               @onmousedown:stopPropagation
               class="flex px-4 py-2 items-center hover:bg-gray-700 border-b border-gray-700" role="menuitem"
               tabindex="-1">
                <i class="me-2 text-success-500 icon-package text-lg"></i>
                <span class="text-sm">Compress</span>
            </a>

            if (ContextMenuEntry.IsFile)
            {
                var compressType = CompressProvider.CompressTypes.FirstOrDefault(
                    x => ContextMenuEntry.Name.EndsWith(x.Extension, StringComparison.InvariantCultureIgnoreCase)
                );

                if (compressType != null)
                {
                    <a href="#" @onclick="() => Decompress(ContextMenuEntry, compressType)" @onclick:preventDefault
                       @onmousedown:preventDefault
                       @onmousedown:stopPropagation
                       class="flex px-4 py-2 items-center hover:bg-gray-700 border-b border-gray-700" role="menuitem"
                       tabindex="-1">
                        <i class="me-2 text-success-500 icon-package-open text-lg"></i>
                        <span class="text-sm">Decompress</span>
                    </a>
                }
            }
        }

        <a href="#" @onclick="() => Rename(ContextMenuEntry)" @onclick:preventDefault @onmousedown:preventDefault
           @onmousedown:stopPropagation
           class="flex px-4 py-2 items-center hover:bg-gray-700 border-b border-gray-700" role="menuitem"
           tabindex="-1">
            <i class="me-2 text-tertiary-500 icon-pencil-line text-lg"></i>
            <span class="text-sm">Rename</span>
        </a>
        <a href="#" @onclick="() => Delete(ContextMenuEntry)" @onclick:preventDefault @onmousedown:preventDefault
           @onmousedown:stopPropagation
           class="flex px-4 py-2 items-center hover:bg-gray-700" role="menuitem" tabindex="-1">
            <i class="me-2 text-danger-500 icon-trash-2 text-lg"></i>
            <span class="text-sm">Delete</span>
        </a>
    </ContextMenu>
}

@code
{
    [Parameter] public IFileSystemProvider FileSystemProvider { get; set; }

    protected override void OnInitialized()
    {
        // Cast if possible, save so the ui doesnt need to try casting all the time
        CompressProvider = FileSystemProvider as ICompressFileSystemProvider;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnInteract(FileSystemEntry entry)
    {
        // We want to clear the selected entries no matter what we are doing
        SelectedEntries.Clear();
        
        if (entry.IsFile)
        {
            if (entry.Size > MaxEditorOpenSize)
            {
                await ToastService.Danger("Unable to open file in text editor. The file is too big");
                return;
            }

            await OpenEditor(entry);
        }
        else
        {
            CurrentPath = await FileList.Navigate(entry.Name);
            await InvokeAsync(StateHasChanged);
        }
    }
}
