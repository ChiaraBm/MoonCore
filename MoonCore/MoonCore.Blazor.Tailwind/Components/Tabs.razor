<CascadingValue TValue="Tabs" Value="@this" IsFixed="true">
    @ChildContent
</CascadingValue>

<ul class="flex flex-wrap -m-1">
    @foreach (var tab in TabList)
    {
        <li class="m-1">
            @if (tab == CurrentTab)
            {
                <a @onclick:preventDefault href="#" class="inline-flex items-center justify-center text-sm font-medium leading-5 rounded-full px-3 py-1 border border-transparent shadow-sm bg-gray-100 text-gray-800 transition">
                    @tab.Name
                </a>
                
            }
            else
            {
                <a @onclick="() => SwitchTab(tab)" @onclick:preventDefault href="#" class="inline-flex items-center justify-center text-sm font-medium leading-5 rounded-full px-3 py-1 border border-gray-700/60 hover:border-gray-600 shadow-sm bg-gray-800 text-gray-400 transition">
                    @tab.Name
                </a>
            }
        </li>
    }
</ul>

@if (CurrentTab != null)
{
    <div class="mt-5">
        @CurrentTab.ChildContent
    </div>
}

@code
{
    [Parameter] public bool NavStyle { get; set; } = false;
    [Parameter] public bool BarStyle { get; set; } = false;

    [Parameter] public Func<Task> BarClick { get; set; }
    [Parameter] public string BarText { get; set; } = "";

    [Parameter] public RenderFragment ChildContent { get; set; }

    private readonly List<Tab> TabList = new();
    private Tab? CurrentTab = null;

    public void AddTab(Tab tab)
    {
        if (!TabList.Contains(tab))
            TabList.Add(tab);
    }

    public async Task SwitchTab(Tab tab)
    {
        CurrentTab = tab;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        CurrentTab = TabList.FirstOrDefault();
        await InvokeAsync(StateHasChanged);
    }
}