<CascadingValue TValue="Tabs" Value="@this" IsFixed="true">
    @ChildContent
</CascadingValue>

<div class="tabs">
    @foreach (var tab in TabList)
    {
        <a @onclick="() => SwitchTab(tab)" @onclick:preventDefault href="#" class="tabs-segment @(tab == CurrentTab ? "tabs-segment-active" : "")">
            @if (!string.IsNullOrEmpty(tab.Icon))
            {
                <i class="@tab.Icon me-1"></i>
            }
            @tab.Name
        </a>
    }
</div>

@if (CurrentTab != null)
{
    <div class="mt-5">
        @CurrentTab.ChildContent
    </div>
}

@code
{
    [Parameter] public bool NavStyle { get; set; } = false;
    [Parameter] public bool BarStyle { get; set; } = false;

    [Parameter] public Func<Task> BarClick { get; set; }
    [Parameter] public string BarText { get; set; } = "";

    [Parameter] public RenderFragment ChildContent { get; set; }

    private readonly List<Tab> TabList = new();
    private Tab? CurrentTab = null;

    public void AddTab(Tab tab)
    {
        if (!TabList.Contains(tab))
            TabList.Add(tab);
    }

    public async Task SwitchTab(Tab tab)
    {
        CurrentTab = tab;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        CurrentTab = TabList.FirstOrDefault();
        await InvokeAsync(StateHasChanged);
    }
}