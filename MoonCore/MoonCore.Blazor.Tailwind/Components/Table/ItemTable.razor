@typeparam TItem

<CascadingValue Value="this" IsFixed="true">
    @ChildContent
</CascadingValue>

@{
    string tableRounding;
    var isSpecialBody = IsLoading || TotalItemsCount == 0;

    if (isSpecialBody)
    {
        if (DisableHeadRounding)
            tableRounding = "";
        else
            tableRounding = "rounded-t-lg";
    }
    else
    {
        if (DisableHeadRounding)
            tableRounding = "rounded-b-lg";
        else
            tableRounding = "rounded-lg";
    }
}

<div class="overflow-x-auto @(tableRounding)">
    <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
        <tr>
            @if (IsLoading)
            {
                <th scope="col" class="text-center px-6 py-2">Loading</th>
            }
            else
            {
                foreach (var column in Columns)
                {
                    <th scope="col" class="px-6 py-2">
                        <div class="flex items-center">
                            @column.Title

                            @if (column.Sortable)
                            {
                                <a href="#" class="pl-1">
                                    <i class="bx bx-sort-alt-2 text-base align-middle"></i>
                                </a>
                            }

                            @if (column.Filterable)
                            {
                                <a href="#" class="pl-1">
                                    <i class="bx bx-search-alt text-base align-middle"></i>
                                </a>
                            }
                        </div>
                    </th>
                }
            }
        </tr>
        </thead>

        @if (TotalItemsCount != 0)
        {
            var i = 1;

            <tbody>
            @foreach (var item in CurrentItems)
            {
                <tr class="bg-white dark:bg-gray-800 @(i != CurrentItems.Length ? "border-b dark:border-gray-700" : "")">
                    @foreach (var column in Columns)
                    {
                        <th scope="row" class="px-6 py-3 whitespace-nowrap">
                            @if (column.Template == null)
                            {
                                @column.CompiledField.Invoke(item)
                            }
                            else
                            {
                                @column.Template.Invoke(item)
                            }
                        </th>
                    }
                </tr>

                i++;
            }
            </tbody>
        }
    </table>
</div>
@if (isSpecialBody)
{
    <div class="bg-white dark:bg-gray-800 rounded-b-lg">
        @if (IsLoading)
        {
            <div class="flex justify-center flex-col items-center py-8">
                <div role="status">
                    <svg aria-hidden="true" class="inline w-10 h-10 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                        <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
                    </svg>
                    <span class="sr-only">Loading...</span>
                </div>
                <p class="mt-3 text-lg text-gray-600 dark:text-gray-300">
                    Processing items
                </p>
            </div>
        }
        else if (TotalItemsCount == 0)
        {
            <div class="flex justify-center py-8">
                <div class="text-center">
                    <div class="inline-flex items-center justify-center w-16 h-16 rounded-full bg-gradient-to-t from-gray-200 to-gray-100 dark:from-gray-700 dark:to-gray-800 mb-4">
                        <svg class="w-5 h-6 fill-current" viewBox="0 0 20 24">
                            <path class="text-gray-500 dark:text-gray-600" d="M10 10.562l9-5-8.514-4.73a1 1 0 00-.972 0L1 5.562l9 5z"></path>
                            <path class="text-gray-300 dark:text-gray-400" d="M9 12.294l-9-5v10.412a1 1 0 00.514.874L9 23.294v-11z"></path>
                            <path class="text-gray-400 dark:text-gray-500" d="M11 12.294v11l8.486-4.714a1 1 0 00.514-.874V7.295l-9 4.999z"></path>
                        </svg>
                    </div>
                    <h2 class="text-2xl text-gray-800 dark:text-gray-100 font-bold mb-2">Pay your bills in just a few clicks</h2>
                    <div class="mb-6">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</div>
                    <button class="btn bg-gray-900 text-gray-100 hover:bg-gray-800 dark:bg-gray-100 dark:text-gray-800 dark:hover:bg-white">Add Event</button>
                </div>
            </div>
        }
    </div>
}

<nav class="flex flex-col md:flex-row justify-between items-start md:items-center space-y-3 md:space-y-0 p-4" aria-label="Table navigation">
    <span class="text-sm font-normal text-gray-500 dark:text-gray-400">
        @{
            var start = 0;
            var end = 0;

            if (TotalItemsCount != 0)
            {
                start = CurrentPage * PageSize + 1;

                var fullEnd = CurrentPage * PageSize + PageSize;

                if (TotalItemsCount < fullEnd)
                    end = CurrentPage * PageSize + (TotalItemsCount - start + 1);
                else
                    end = fullEnd;
            }
        }

        Showing
        <span class="font-semibold text-gray-900 dark:text-white">@(start)-@(end)</span>
        of
        <span class="font-semibold text-gray-900 dark:text-white">
            @TotalItemsCount
        </span>
    </span>
    <div class="flex">
        @if (CurrentPage == 0)
        {
            <button class="flex items-center justify-center px-3 h-8 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:border-gray-200 dark:disabled:border-gray-700 disabled:bg-white dark:disabled:bg-gray-800 disabled:text-gray-300 dark:disabled:text-gray-600 disabled:cursor-not-allowed" disabled="disabled">
                Previous
            </button>
        }
        else
        {
            <button @onclick="() => NavigatePage(-1)" class="flex items-center justify-center px-3 h-8 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
                Previous
            </button>
        }
        
        @if (CurrentPage == TotalPages -1)
        {
            <button class="ms-3 lex items-center justify-center px-3 h-8 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:border-gray-200 dark:disabled:border-gray-700 disabled:bg-white dark:disabled:bg-gray-800 disabled:text-gray-300 dark:disabled:text-gray-600 disabled:cursor-not-allowed" disabled="disabled">
                Next
            </button>
        }
        else
        {
            <button @onclick="() => NavigatePage(1)" class="ms-3 flex items-center justify-center px-3 h-8 ms-3 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
                Next
            </button>
        }
    </div>
</nav>


@code
{
    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public Func<IEnumerable<TItem>>? ItemsCallback { get; set; }
    
    [Parameter] public RenderFragment? NoItemView { get; set; }

    [Parameter] public bool DisableHeadRounding { get; set; } = false;
    [Parameter] public int PageSize { get; set; } = 15;

    private readonly List<TableColumn<TItem>> Columns = new();

    private int CurrentPage = 0;
    private int TotalItemsCount = 0;
    private int TotalPages;
    private TItem[] CurrentItems = [];

    private bool IsLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await Reload();
    }

    public async Task Reload(bool silent = false, bool fullRefresh = true)
    {
        if (!silent) // If no silent reload is request, show the loading screen
        {
            IsLoading = true;
            await InvokeAsync(StateHasChanged);
        }
        
        if (fullRefresh)
        {
            // Calculating total count
            TotalItemsCount = GetItems().Count();
        }
        
        // Load the items of the current page 
        CurrentItems = GetItems()
            .Skip(CurrentPage * PageSize)
            .Take(PageSize)
            .ToArray();
        
        // Calculate total pages
        var pagesMod = TotalItemsCount % PageSize;

        if (pagesMod == 0)
            TotalPages = TotalItemsCount / PageSize;
        else if (TotalItemsCount > PageSize)
            TotalPages = (TotalItemsCount - pagesMod) / PageSize + 1;
        else
            TotalPages = (TotalItemsCount - pagesMod) / PageSize;

        IsLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private IEnumerable<TItem> GetItems()
    {
        if (Items == null && ItemsCallback == null)
            throw new ArgumentNullException(nameof(Items), "You need to provide either Items or ItemsCallback");

        if (ItemsCallback != null)
            return ItemsCallback.Invoke();

        if (Items != null)
            return Items;

        return [];
    }

    public void AddColumn(TableColumn<TItem> column) => Columns.Add(column);

    private async Task NavigatePage(int diff)
    {
        CurrentPage += diff;

        if (CurrentPage < 0)
            CurrentPage = 0;

        if (CurrentPage > TotalPages)
            CurrentPage = TotalPages;

        await Reload(fullRefresh: false);
    }
}