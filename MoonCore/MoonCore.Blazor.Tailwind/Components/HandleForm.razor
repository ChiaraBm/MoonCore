@using System.ComponentModel.DataAnnotations
@using MoonCore.Blazor.Tailwind.Exceptions
@using MoonCore.Exceptions

<div>
    @if (ShowError)
    {
        <div class="rounded-md bg-red-50 p-4">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="text-red-400 text-lg bi bi-exclamation-octagon-fill"></i>
                </div>
                <div class="ml-3">
                    <h3 class="text-sm font-medium text-red-800">An error occured while submitting</h3>
                    <div class="mt-2 text-sm text-red-700">
                        <ul role="list" class="list-disc space-y-1 pl-5">
                            @foreach (var message in ErrorMessages)
                            {
                                <li>@message</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@ChildContent

@code
{
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public object Model { get; set; }
    [Parameter] public Func<Task> OnValidSubmit { get; set; }

    private bool ShowError;
    private string[] ErrorMessages;

    public async Task Submit()
    {
        ShowError = false;
        ErrorMessages = [];
        
        // Validate
        Validate();

        if (ShowError)
        {
            await InvokeAsync(StateHasChanged);
            return;
        }
        
        // Handle submit errors
        try
        {
            await OnValidSubmit.Invoke();
        }
        catch (DisplayException e)
        {
            ErrorMessages = [e.Message];
            ShowError = true;
        }
        catch (HttpApiException e)
        {
            var errorMessage = string.IsNullOrEmpty(e.Detail) ? e.Title : e.Title + ": " + e.Detail;
            ErrorMessages = [errorMessage];
            ShowError = true;
        }
        
        await InvokeAsync(StateHasChanged);
    }

    private void Validate()
    {
        var validationContext = new ValidationContext(Model);
        Validator.ValidateObject(Model, validationContext);
        
        if(validationContext.Items.Count == 0)
            return;

        ErrorMessages = validationContext
            .Items
            .Select(x => x.Value == null ? x.Key.ToString() ?? "" : $"{x.Key}: {x.Value}")
            .ToArray();

        ShowError = true;
    }
}
