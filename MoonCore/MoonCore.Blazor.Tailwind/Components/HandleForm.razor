@using System.ComponentModel.DataAnnotations
@using MoonCore.Blazor.Tailwind.Exceptions
@using MoonCore.Exceptions

<div>
    @if (ShowError)
    {
        <div class="rounded-md bg-danger-600 p-4 mb-5">
            <div class="text-left px-5">
                <h3 class="text-sm font-medium text-white">An error occured while submitting</h3>
                <div class="mt-2 text-sm text-white">
                    <ul role="list" class="list-disc space-y-1 pl-5">
                        @foreach (var message in ErrorMessages)
                        {
                            <li>@message</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    }
</div>

@ChildContent

@code
{
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public object Model { get; set; }
    [Parameter] public Func<Task> OnValidSubmit { get; set; }

    private bool ShowError;
    private string[] ErrorMessages;

    public async Task<bool> Submit()
    {
        ShowError = false;
        ErrorMessages = [];
        
        var wasSuccessful = await InternalSubmit();

        ShowError = !wasSuccessful;
        await InvokeAsync(StateHasChanged);

        return wasSuccessful;
    }

    private async Task<bool> InternalSubmit()
    {
        // Validate
        Validate();

        if (ShowError)
            return false;

        // Handle submit errors
        try
        {
            await OnValidSubmit.Invoke();
        }
        catch (DisplayException e)
        {
            ErrorMessages = [e.Message];
            return false;
        }
        catch (HttpApiException e)
        {
            // We don't want to handle authentication errors in this component
            if (e.Status == 401)
                throw;

            if (e.Status == 400)
            {
                if (e.Errors != null && e.Errors.Count > 0)
                {
                    ErrorMessages = e.Errors
                        .Select(x => $"{x.Key}: {string.Join(", ", x.Value)}")
                        .ToArray();
                    
                    return false;
                }
            }

            var errorMessage = string.IsNullOrEmpty(e.Detail) ? e.Title : e.Title + ": " + e.Detail;
            ErrorMessages = [errorMessage];

            return false;
        }
        
        return true;
    }

    private void Validate()
    {
        var context = new ValidationContext(Model, null, null);
        var results = new List<ValidationResult>();

        var isValid = Validator.TryValidateObject(Model, context, results, true);

        if (isValid)
            return;

        ErrorMessages = results
            .Select(x => $"{string.Join(", ", x.MemberNames)}: {x.ErrorMessage}")
            .ToArray();

        ShowError = true;
    }
}