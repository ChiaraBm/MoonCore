@using System.Reflection
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using MoonCore.Blazor.Components
@using MoonCore.Blazor.Tailwind.States
@using MoonCore.Blazor.Tailwind.Auth

<ErrorLogger>
    @if (IsLoading)
    {
        if (LoadingTemplate != null)
        {
            @LoadingTemplate
        }
        else
        {
            <div class="m-10">
                <StateDisplay Type="StateType.Custom"
                              Icon="icon-loader"
                              IconColor="text-tertiary-500"
                              Title="Loading"
                              Description="Preparing application"/>
            </div>
        }
    }
    else
    {
        <AuthorizeView>
            <Authorized>
                <Router AppAssembly="AppAssembly" AdditionalAssemblies="AdditionalAssemblies">
                    <Found Context="routeData">
                        <LayoutView Layout="@DefaultLayout">
                            <ErrorHandler>
                                <RouteView RouteData="@routeData"/>
                            </ErrorHandler>
                        </LayoutView>
                    </Found>
                    <NotFound>
                        <PageTitle>Not found</PageTitle>
                        <LayoutView Layout="@DefaultLayout">
                            <StateDisplay Type="StateType.Custom"
                                          Icon="icon-telescope"
                                          IconColor="text-tertiary-500"
                                          Title="Page not found"
                                          Description="The requested page could not be found"/>
                        </LayoutView>
                    </NotFound>
                </Router>
            </Authorized>
            <Authorizing>
                @if (AuthenticatingTemplate != null)
                {
                    @AuthenticatingTemplate
                }
                else
                {
                    <div class="m-10">
                        <StateDisplay Type="StateType.Custom"
                                      Icon="icon-arrow-up-down"
                                      IconColor="text-tertiary-500"
                                      Title="Checking authentication state"
                                      Description="Loading authentication state from identity provider"/>
                    </div>
                }
            </Authorizing>
            <NotAuthorized>
                @if (LoginTemplate != null)
                {
                    @LoginTemplate
                }
                else
                {
                    <DefaultLoginTemplate/>
                }
            </NotAuthorized>
        </AuthorizeView>
    }
</ErrorLogger>

@code
{
    [Parameter] public Assembly AppAssembly { get; set; }
    [Parameter] public IEnumerable<Assembly> AdditionalAssemblies { get; set; } = [];
    [Parameter] public Type DefaultLayout { get; set; }
    [Parameter] public bool DisableBlazorServerSideSafeMode { get; set; } = false;

    [Parameter] public RenderFragment? LoginTemplate { get; set; }
    [Parameter] public RenderFragment? AuthenticatingTemplate { get; set; }
    [Parameter] public RenderFragment? LoadingTemplate { get; set; }

    private bool IsLoading = true;

    protected override void OnInitialized()
    {
        if (DisableBlazorServerSideSafeMode)
            IsLoading = false;
    }

    // We need this loading state to prevent blazor server from calling the authentication stuff twice
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (DisableBlazorServerSideSafeMode || !firstRender)
            return;

        IsLoading = false;
        await InvokeAsync(StateHasChanged);
    }
}