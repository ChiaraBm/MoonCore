<a href="#" @onclick="Toggle" @onclick:preventDefault>
    @Activator
</a>

@if (Show)
{
    <div @ref="Reference" @onfocusout="OnFocusOut" style="@($"top: {Y}px; left: {X}px")" class="fixed z-10 mt-6 w-40 rounded-md bg-gray-900 text-white shadow-lg focus:outline-none" role="menu" aria-orientation="vertical" aria-labelledby="menu-button" tabindex="-1">
        <div class="py-1" role="none">
            @Content
        </div>
    </div>
}

@code
{
    [Parameter] public RenderFragment Activator { get; set; }
    [Parameter] public RenderFragment Content { get; set; }

    private bool Show = false;
    private double X;
    private double Y;
    private ElementReference Reference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!Show)
            return;

        await Reference.FocusAsync();
    }

    private async Task Toggle(MouseEventArgs eventArgs)
    {
        Show = !Show;
        X = eventArgs.ClientX - 130;
        Y = eventArgs.ClientY - 10;
        
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task OnFocusOut()
    {
        try
        {
            await Task.Delay(150);
            
            Show = false;
            await InvokeAsync(StateHasChanged);
        }
        catch (TaskCanceledException)
        {
        }
    }
}
