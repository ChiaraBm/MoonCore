@using Microsoft.Extensions.DependencyInjection
@using MoonCore.Blazor.Tailwind.Components
@using MoonCore.Blazor.Tailwind.Modals.Components
@using MoonCore.Helpers
@using MoonCore.Blazor.Tailwind.Alerts.Interfaces

@typeparam T where T : class
@typeparam TUi where TUi : FormInputUi<T>



@inject IServiceProvider ServiceProvider

@inherits FormInputModalBase<T>


<CascadingValue Value="this">
    <div class="mt-3 text-center sm:mt-5">
        <h3 class="text-lg font-semibold leading-6 text-gray-100" id="modal-title">
            @Title
        </h3>

        <div class="mt-4 px-4 block relative text-left">
            @FormInputUi
        </div>
    </div>
    <div class="mt-5 sm:mt-6 flex justify-stretch space-x-1">
        <button @onclick="Hide" type="button" class="btn btn-secondary w-full">
            Cancel
        </button>
        <WButton CssClasses="btn btn-danger w-full" OnClick="Send">
            Confirm
        </WButton>
    </div>
</CascadingValue>
@code
{
    [Parameter] public string Title { get; set; }
    [Parameter] public Func<T, Task> ConfirmAction { get; set; }

    private FormInputUi<T> FormInput;
    private RenderFragment FormInputUi;

    protected override void OnParametersSet()
    {
        FormInputUi = ComponentHelper.FromType<TUi>();

        FormInput = ActivatorUtilities.CreateInstance<TUi>(ServiceProvider);
    }

    private async Task Send(WButton _)
    {
        try
        {
            var item = await FormInput.Evaluate();

            if (item != null)
            {
                await ConfirmAction.Invoke(item);
                await Hide();
            }
        }
        catch (Exception)
        {
            await Hide();
            throw;
        }
    }
    
    public override async Task RegisterFormInputUi(FormInputUi<T> formInputUi)
    {
        FormInput = formInputUi;
        await InvokeAsync(StateHasChanged);
    }
    
}