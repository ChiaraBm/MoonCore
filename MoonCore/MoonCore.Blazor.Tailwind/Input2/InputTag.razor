<div class="form-input p-1 text-sm flex w-full items-center">
    @foreach (var tag in InternalTags)
    {
        <a href="#"
           @onclick:preventDefault
           @onclick="() => RemoveTag(tag)"
           class="bg-primary rounded-lg py-1 px-2 me-1">
            @tag
        </a>
    }
    <input @onkeyup="OnKeyUp"
           @bind="InputField"
           @bind:event="oninput"
           type="text"
           class="min-w-0 bg-transparent placeholder-gray-500 focus:outline-none focus:ring-0 border-transparent text-sm p-1"
           placeholder="Enter..."/>
</div>

@code
{

    #region Binder

    [Parameter]
    public string[]? Value
    {
        get => _value;
        set
        {
            if (_value == value)
                return;

            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    [Parameter] public EventCallback<string[]?> ValueChanged { get; set; }

    private string[]? _value;

    #endregion

    private List<string> InternalTags = new();
    private string InputField = "";

    protected override void OnInitialized()
    {
        InternalTags = Value?.ToList() ?? [];
    }

    private async Task RemoveTag(string tag)
    {
        InternalTags.Remove(tag);
        
        Value = InternalTags.ToArray();

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnKeyUp(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Code != "Space" && keyboardEventArgs.Code != "Enter")
        {
            Console.WriteLine("No: " + keyboardEventArgs.Code);
            return;
        }

        Console.WriteLine(keyboardEventArgs.Code);
        
        InputField = InputField.Trim();

        if (string.IsNullOrEmpty(InputField))
            return;

        if (InternalTags.Contains(InputField))
            return;

        InternalTags.Add(
            InputField
        );
        
        InputField = "";
        Value = InternalTags.ToArray();

        await InvokeAsync(StateHasChanged);
    }
}