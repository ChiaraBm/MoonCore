@typeparam TItem where TItem : class

<div class="relative inline-block text-left w-full">
    @if (IsLoading)
    {
        <button type="button" class="btn btn-secondary w-full flex" disabled="disabled">
            <div class="flex">
                <i class="animate-spin icon-loader me-2"></i>
            </div>
            <span>Loading</span>
        </button>
    }
    else
    {
        <button @onclick="() => ToggleOpen(!IsOpen)" type="button" class="btn btn-secondary w-full flex items-center">
            @if (_value == null)
            {
                <span class="me-2">Nothing selected</span>
                <i class="icon-chevron-down"></i>
            }
            else
            {
                <span class="me-2">@DisplayProperty.Invoke(_value)</span>
                <i class="icon-chevron-down"></i>
            }
        </button>
    }

    @if (!IsLoading && IsOpen)
    {
        <div class="absolute z-10 mt-2 w-full rounded-md shadow-lg bg-gray-800">
            <ul class="max-h-60 overflow-y-auto py-1 text-sm text-gray-200" role="listbox">
                @if (_value == null)
                {
                    <li @onclick="() => Select(null)"
                        class="cursor-pointer select-none px-4 py-2 bg-primary text-diffcolor flex items-center" role="option">
                        <i class="icon-check me-2"></i>
                        Nothing
                    </li>
                }
                else
                {
                    <li @onclick="() => Select(null)"
                        class="cursor-pointer select-none px-4 py-2 hover:bg-primary hover:text-diffcolor"
                        role="option">
                        Nothing
                    </li>
                }
                
                @foreach (var item in Items)
                {
                    if (item.Equals(_value))
                    {
                        <li @onclick="() => Select(item)"
                            class="cursor-pointer select-none px-4 py-2 bg-primary text-diffcolor flex items-center" role="option">
                            <i class="icon-check me-2"></i>
                            @(DisplayProperty.Invoke(item))
                        </li>
                    }
                    else
                    {
                        <li @onclick="() => Select(item)"
                            class="cursor-pointer select-none px-4 py-2 hover:bg-primary hover:text-diffcolor"
                            role="option">
                            @(DisplayProperty.Invoke(item))
                        </li>
                    }
                }
            </ul>
        </div>
    }
</div>

@code
{

    #region Binder

    [Parameter]
    public TItem? Value
    {
        get => _value;
        set
        {
            if(_value == null && value == null)
                return;
            
            if(_value?.Equals(value) ?? false)
                return;
            
            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    [Parameter] public EventCallback<TItem?> ValueChanged { get; set; }

    private TItem? _value;

    #endregion

    [Parameter] public Func<TItem, object> DisplayProperty { get; set; }
    [Parameter] public Func<Task<TItem[]>> ItemSource { get; set; }
    [Parameter] public bool AllowNull { get; set; } = false;

    private bool IsLoading = true;
    private bool IsOpen = false;
    private TItem[] Items;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        Items = await ItemSource.Invoke();

        IsLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Select(TItem? item)
    {
        Value = item!;
        IsOpen = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleOpen(bool toggle)
    {
        IsOpen = toggle;
        await InvokeAsync(StateHasChanged);
    }
}