@using MoonCore.Blazor.Tailwind.Modals.Components
@using MoonCore.Helpers

@inject ModalService ModalService

@if (Modals.Count > 0)
{
    var modal = Modals.Last();
    
    <div class="relative z-50" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <div @onclick="HandleOutOfFocusClick" class="fixed inset-0 bg-gray-900/75 transition-opacity" aria-hidden="true"></div>

        <div class="fixed inset-0 z-50 w-screen overflow-y-auto" style="pointer-events: none">
            <div class="flex min-h-full justify-center p-4 text-center items-center sm:p-0">
                <div class="relative transform overflow-hidden rounded-lg text-left shadow-xl transition-all my-8 w-full max-w-lg sm:@(modal.Size)" style="pointer-events: all">
                    <div class="bg-gray-750 px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                        <div>
                            @modal.Component
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    @* class="sm:max-w-md sm:max-w-lg sm:max-w-xl sm:max-w-2xl sm:max-w-3xl sm:max-w-4xl sm:max-w-5xl sm:max-w-6xl sm:max-w-7xl" *@
}

@code
{
    private List<ModalItem> Modals = new();

    protected override void OnInitialized()
    {
        ModalService.SetLauncher(this);
    }

    public async Task<ModalItem> Launch<T>(Action<Dictionary<string, object>>? onConfigure = null, string size = "max-w-lg", bool allowUnfocusHide = false) where T : BaseModal
    {
        var item = new ModalItem()
        {
            Size = size,
            AllowUnfocusHide = allowUnfocusHide
        };

        item.Component = ComponentHelper.FromType<T>(buildAttr =>
        {
            buildAttr.Add("Launcher", this);
            buildAttr.Add("ModalItem", item);

            onConfigure?.Invoke(buildAttr);
        });

        Modals.Add(item);
        
        await InvokeAsync(StateHasChanged);

        return item;
    }

    private async Task HandleOutOfFocusClick()
    {
        var modal = Modals.LastOrDefault();
        
        if(modal == null)
            return;
        
        if(!modal.AllowUnfocusHide)
            return;

        await Close(modal);
    }

    public async Task Close(ModalItem item)
    {
        Modals.Remove(item);
        await InvokeAsync(StateHasChanged);
    }
}