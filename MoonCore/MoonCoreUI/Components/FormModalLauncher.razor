@using MoonCoreUI.Components.Forms

@if (IsReady)
{
    <SmartModal @ref="Modal" CssClasses="@CssClasses">
        <div class="modal-header">
            <h5 class="modal-title">
                @Title
            </h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <SmartForm Model="Form" OnValidSubmit="SubmitForm">
            <div class="modal-body">
                <DynamicTypedAutoForm Columns="Columns" Model="Form"/>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Cancel</button>
                <button type="submit" class="btn btn-primary">@Submit</button>
            </div>
        </SmartForm>
    </SmartModal>
}

@code
{
    [Parameter] public string CssClasses { get; set; } = "";
    
    private SmartModal Modal;

    private string Title = "";
    private string Submit = "";
    private string Cancel = "";
    private int Columns = 12;
    private object Form = new();
    private object HandleCall = new();

    private bool IsReady = false;

    public async Task Show<T>(string title, Func<T, Task> handle, string submitText = "Submit", string cancelText = "Cancel", int columns = 12, T? formModel = default)
    {
        await ShowInternal(title, handle, typeof(T), submitText, cancelText, columns, formModel);
    }
    
    public async Task Show(string title, Func<object, Task> handle, Type formType, string submitText = "Submit", string cancelText = "Cancel", int columns = 12, object? formModel = default)
    {
        await ShowInternal(title, handle, formType, submitText, cancelText, columns, formModel);
    }

    private async Task ShowInternal(string title, object handle, Type formType, string submitText = "Submit", string cancelText = "Cancel", int columns = 12, object? formModel = default)
    {
        // Note:
        // The IsReady is used to rerender the smart form in order to ensure it is a new instance
        
        IsReady = false;
        await InvokeAsync(StateHasChanged);
        
        Title = title;

        if (formModel != null)
            Form = formModel;
        else
            Form = Activator.CreateInstance(formType)!;
        
        HandleCall = handle;

        Submit = submitText;
        Cancel = cancelText;

        Columns = columns;
        
        IsReady = true;
        await InvokeAsync(StateHasChanged);

        await Modal.Show();
    }

    public async Task Hide() => await Modal.Hide();

    private async Task SubmitForm()
    {
        var handleType = typeof(Func<,>).MakeGenericType(Form.GetType(), typeof(Task));
        var result = handleType.GetMethod("Invoke")!.Invoke(HandleCall, new[] { Form });
        var resultTask = result as Task;

        await resultTask!;

        await Hide();
    }
}