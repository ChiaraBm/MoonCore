@using Mappy.Net
@using MoonCore.Abstractions
@using MoonCore.Helpers
@using MoonCoreUI.Services

@typeparam TItem where TItem : class
@typeparam TRootItem where TRootItem : class
@typeparam TCreateForm
@typeparam TUpdateForm

@inject ToastService ToastService
@inject Repository<TRootItem> RootRepository
@inject Repository<TItem> ItemRepository

@if (ShowCreate)
{
    <div class="card card-body p-5 mb-5">
        <a href="#" @onclick:preventDefault @onclick="GoToView" class="text-muted mb-1">
            <i class="bx bx-sm bx-left-arrow-alt align-middle"></i>
            @if (string.IsNullOrEmpty(Title))
            {
                <span class="align-middle">Back to @ItemName</span>
            }
            else
            {
                <span class="align-middle">Back to @Title</span>
            }
        </a>
        <div class="fw-semibold fs-2">
            @if (string.IsNullOrEmpty(CreateText))
            {
                <span>Create @ItemName</span>
            }
            else
            {
                @CreateText
            }
        </div>
    </div>

    <SmartForm Model="CreateForm" OnValidSubmit="FinishCreate">
        <div class="card card-body p-8 mb-5">
            <div class="row g-5">
                <AutoForm Columns="@(CreateForm.GetType().GetProperties().Length > 1 ? 6 : 12)" Model="CreateForm"/>
            </div>
        </div>

        <div class="card card-body p-5">
            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-primary">
                    @if (string.IsNullOrEmpty(CreateText))
                    {
                        <span>Create @ItemName</span>
                    }
                    else
                    {
                        @CreateText
                    }
                </button>
            </div>
        </div>
    </SmartForm>
}
else if (ShowUpdate)
{
    <div class="card card-body p-5 mb-5">
        <a href="#" @onclick:preventDefault @onclick="GoToView" class="text-muted mb-1">
            <i class="bx bx-sm bx-left-arrow-alt align-middle"></i>
            @if (string.IsNullOrEmpty(Title))
            {
                <span class="align-middle">Back to @ItemName</span>
            }
            else
            {
                <span class="align-middle">Back to @Title</span>
            }
        </a>
        <div class="fw-semibold fs-2">
            @if (string.IsNullOrEmpty(UpdateText))
            {
                <span>Update @ItemName</span>
            }
            else
            {
                @UpdateText
            }
        </div>
    </div>

    <SmartForm Model="UpdateForm" OnValidSubmit="FinishUpdate">
        <div class="card card-body p-8 mb-5">
            <div class="row g-5">
                <AutoForm Columns="@(UpdateForm.GetType().GetProperties().Length > 1 ? 6 : 12)" Model="UpdateForm"/>
            </div>
        </div>

        <div class="card card-body p-5">
            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-primary">
                    @if (string.IsNullOrEmpty(UpdateText))
                    {
                        <span>Update @ItemName</span>
                    }
                    else
                    {
                        @UpdateText
                    }
                </button>
            </div>
        </div>
    </SmartForm>
}
else
{
    <div class="card card-body mb-5 p-3">
        <div class="d-flex justify-content-between align-items-center">
            <div class="fs-3 fw-semibold ms-3">
                @Title
            </div>
            <div class="text-end">
                @if (Toolbar != null)
                {
                    @Toolbar
                }
                <button @onclick="StartCreate" type="button" class="btn btn-primary ms-3">
                    @if (string.IsNullOrEmpty(CreateText))
                    {
                        <span>Create @ItemName</span>
                    }
                    else
                    {
                        @CreateText
                    }
                </button>
            </div>
        </div>
    </div>


    <div class="card card-body px-5">
        <LazyLoader @ref="LazyLoader" Load="LoadItems">
            @if (Items.Length == 0)
            {
                if (NoItemsView == null)
                {
                    <span class="text-center text-muted fs-5">No items found</span>
                }
                else
                {
                    @NoItemsView
                }
            }
            else
            {
                <CrudTable TItem="TItem" ItemSource="Items" PageSize="@PageSize">
                    @View

                    <CrudColumn TItem="TItem" CssClasses="py-1 my-0">
                        <Template>
                            <div class="text-end">
                                <div class="btn-group">
                                    @if (Actions != null)
                                    {
                                        @Actions.Invoke(context)
                                    }
                                    <button @onclick="() => StartUpdate(context)" type="button" class="btn btn-icon btn-warning">
                                        <i class="bx bx-sm bx-slider"></i>
                                    </button>
                                    <button @onclick="() => StartDelete(context)" type="button" class="btn btn-icon btn-danger">
                                        <i class="bx bx-sm bx-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </Template>
                    </CrudColumn>
                </CrudTable>
            }
        </LazyLoader>
    </div>
}

<SmartModal @ref="DeleteModal" CssClasses="modal-dialog-centered">
    <div class="modal-header">
        <h5 class="modal-title">Do you want to delete this item?</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    <div class="modal-body">
        <p class="text-gray-800 fs-5 fw-semibold">
            This action cannot be undone. The data will be deleted and cannot be restored
        </p>
    </div>
    <div class="modal-footer p-3">
        <div class="btn-group w-100">
            <WButton OnClick="FinishDelete" Text="Delete" CssClasses="btn btn-danger w-50 me-3"/>
            <button class="btn btn-secondary w-50" data-bs-dismiss="modal">Cancel</button>
        </div>
    </div>
</SmartModal>

@code
{
    [Parameter] public string Title { get; set; } = "";
    
    [Parameter] public string CreateText { get; set; } = "";

    [Parameter] public string UpdateText { get; set; } = "";

    [Parameter] public TRootItem RootItem { get; set; }

    [Parameter] public Func<TRootItem, IList<TItem>> Field { get; set; }

    [Parameter] public RenderFragment View { get; set; }

    [Parameter] public RenderFragment? NoItemsView { get; set; }

    [Parameter] public RenderFragment? Toolbar { get; set; }

    [Parameter] public RenderFragment<TItem>? Actions { get; set; }

    [Parameter] public Func<TItem, Task>? ValidateAdd { get; set; }

    [Parameter] public Func<TItem, Task>? ValidateUpdate { get; set; }

    [Parameter] public Func<TItem, Task>? ValidateDelete { get; set; }

    [Parameter] public int PageSize { get; set; } = 25;

    private TItem[] Items;
    private TCreateForm CreateForm;
    private TUpdateForm UpdateForm;
    private TItem ItemToUpdate;
    private TItem ItemToDelete;

    private SmartModal DeleteModal;

    private bool ShowCreate = false;
    private bool ShowUpdate = false;

    private LazyLoader LazyLoader;

    private string ItemName => Formatter.ConvertCamelCaseToSpaces(typeof(TItem).Name);

    protected override void OnInitialized()
    {
        if (Field == null)
            throw new ArgumentNullException(nameof(Field));

        CreateForm = Activator.CreateInstance<TCreateForm>()!;
        UpdateForm = Activator.CreateInstance<TUpdateForm>()!;
    }

    public async Task Reload() => await LazyLoader.Reload();

    private Task LoadItems(LazyLoader _)
    {
        Items = Field.Invoke(RootItem).ToArray();

        return Task.CompletedTask;
    }

    private async Task StartUpdate(TItem item)
    {
        UpdateForm = Mapper.Map<TUpdateForm>(item);
        ItemToUpdate = item;
        
        ShowUpdate = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task FinishUpdate()
    {
        var item = Mapper.Map(ItemToUpdate, UpdateForm!);

        if (ValidateUpdate != null) // Optional additional validation
            await ValidateUpdate.Invoke(item);

        ItemRepository.Update(item);

        // Reset
        ShowUpdate = false;
        await InvokeAsync(StateHasChanged);
        await LazyLoader.Reload();
        await ToastService.Success("Successfully updated item");
    }

    private async Task StartCreate()
    {
        CreateForm = Activator.CreateInstance<TCreateForm>()!;
        
        ShowCreate = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task FinishCreate()
    {
        var item = Mapper.Map<TItem>(CreateForm!);

        if (ValidateAdd != null) // Optional additional validation
            await ValidateAdd.Invoke(item);

        Field.Invoke(RootItem).Add(item);
        RootRepository.Update(RootItem);

        // Reset
        ShowCreate = false;
        await InvokeAsync(StateHasChanged);
        await LazyLoader.Reload();
        await ToastService.Success("Successfully added item");
    }

    private async Task StartDelete(TItem item)
    {
        ItemToDelete = item;
        await DeleteModal.Show();
    }

    private async Task FinishDelete()
    {
        if (ValidateDelete != null) // Optional additional validation
            await ValidateDelete.Invoke(ItemToDelete);

        Field.Invoke(RootItem).Remove(ItemToDelete);
        RootRepository.Update(RootItem);

        try
        {
            ItemRepository.Delete(ItemToDelete);
        }
        catch (Exception)
        {
            /* ignored, as we dont want such an operation to fail the request */
        }

        // Reset
        await DeleteModal.Hide();
        await LazyLoader.Reload();
        await ToastService.Success("Successfully deleted item");
    }
    
    private async Task GoToView()
    {
        ShowCreate = false;
        ShowUpdate = false;

        await InvokeAsync(StateHasChanged);
    }
}