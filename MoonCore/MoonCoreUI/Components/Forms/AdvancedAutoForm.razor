@using System.Reflection
@using MoonCoreUI.Attributes
@using MoonCoreUI.Helpers

@typeparam TForm

@foreach (var section in Sections)
{
    <div class="card mb-6">
        @if (!string.IsNullOrEmpty(section.Name))
        {
            <div class="card-header">
                <div class="card-title">
                    @if (!string.IsNullOrEmpty(section.Icon))
                    {
                        <i class="bx bx-md @(section.Icon) text-primary me-3 align-middle"></i>
                    }
                    <span class="h3 align-middle">@(section.Name)</span>
                </div>
            </div>
        }
        <div class="card-body">
            <div class="row g-8">
                @foreach (var rf in section.Renders)
                {
                    @rf
                }
            </div>
        </div>
    </div>
}

@code
{
    [Parameter] public TForm Model { get; set; }

    [Parameter] public int Columns { get; set; } = 6;

    private List<Section> Sections = new();

    protected override void OnInitialized()
    {
        var properties = typeof(TForm).GetProperties();
        var propertiesGrouped = properties
            .Select(x => GetSectionItem(x))
            .GroupBy(x => x?.Attribute.Name ?? "");

        foreach (var group in propertiesGrouped)
        {
            if(!group.Any())
                continue;

            var firstItem = group.First()!;

            var section = new Section()
            {
                Name = firstItem.Value.Attribute.Name,
                Icon = firstItem.Value.Attribute.Icon,
                Renders = new()
            };

            foreach (var item in group)
            {
                var typeToCreate = typeof(AutoProperty<>).MakeGenericType(item!.Value.Property.PropertyType);
                var rf = ComponentHelper.FromType(typeToCreate, parameters =>
                {
                    parameters.Add("Data", Model);
                    parameters.Add("Property", item!.Value.Property);
                    parameters.Add("EnableColumnDetection", true);
                });
                
                section.Renders.Add(rf);
            }
        }
    }

    private SectionItem? GetSectionItem(PropertyInfo info)
    {
        var attributes = info.GetCustomAttributes().ToArray();

        if (attributes.All(x => x.GetType() != typeof(SectionAttribute)))
            return null;

        var sectionAttribute = attributes.First(x => x.GetType() == typeof(SectionAttribute)) as SectionAttribute;
        
        return new()
        {
            Attribute = sectionAttribute!,
            Property = info
        };
    }

    struct Section
    {
        public string Name { get; set; }
        public string Icon { get; set; }
        public List<RenderFragment> Renders { get; set; }
    }

    struct SectionItem
    {
        public PropertyInfo Property { get; set; }
        public SectionAttribute Attribute { get; set; }
    }
}