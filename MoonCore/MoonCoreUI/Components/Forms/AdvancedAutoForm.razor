@using System.Reflection
@using MoonCoreUI.Attributes
@using MoonCoreUI.Helpers

@typeparam TForm

<div class="row g-5">
    @foreach (var kvp in PropertySections)
    {
        <div class="col-12">
            <div class="card">
                @if (!string.IsNullOrEmpty(kvp.Key))
                {
                    <div class="card-header">
                        <span class="card-title">@kvp.Key</span>
                    </div>
                }
                <div class="card-body">
                    <div class="row g-3">
                        @foreach (var prop in kvp.Value)
                        {
                            <div class="col-md-@(Columns) col-12">
                                @{
                                    var typeToCreate = typeof(AutoProperty<>).MakeGenericType(prop.PropertyType);
                                    var rf = ComponentHelper.FromType(typeToCreate, parameters =>
                                    {
                                        parameters.Add("Data", Model);
                                        parameters.Add("Property", prop);
                                    });
                                }

                                @rf
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code
{
    [Parameter] public TForm Model { get; set; }

    [Parameter] public int Columns { get; set; } = 6;

    private Dictionary<string, PropertyInfo[]> PropertySections = new();

    protected override void OnInitialized()
    {
        var properties = typeof(TForm).GetProperties();
        var propertiesGrouped = properties.GroupBy(x => GetSectionId(x));

        PropertySections = propertiesGrouped.ToDictionary(x => x.Key, x => x.ToArray());
    }

    private string GetSectionId(PropertyInfo info)
    {
        var attributes = info.GetCustomAttributes().ToArray();

        if (attributes.All(x => x.GetType() != typeof(SectionAttribute)))
            return string.Empty;

        var sectionAttribute = attributes.First(x => x.GetType() == typeof(SectionAttribute)) as SectionAttribute;

        if (sectionAttribute == null)
            return string.Empty;

        return sectionAttribute.Name;
    }
}