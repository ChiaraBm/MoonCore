@typeparam T
@inherits InputBase<List<T>>

@using Microsoft.AspNetCore.Components.Forms
@using MoonCoreUI.Helpers

<div class="dropdown w-100 border rounded" @onclick="OnClick">
    <div class="d-flex flex-wrap m-1">
        @foreach (var item in CurrentValue)
        {
            <span class="badge badge-primary fs-6 mx-1 text-body px-3 py-2 my-1 hover-elevate-up fw-bold">
                @if (IconFunc != null)
                {
                    <i class="bx bx-sm @(IconFunc.Invoke(item)) align-middle me-2"></i>
                }

                @DisplayFunc.Invoke(item)

                <a href="#" @onclick:preventDefault @onclick="() => RemoveItem(item)">
                    <i class="bx bx-sm bx-x ms-2 text-body"></i>
                </a>
            </span>
        }
        <input @ref="Reference" class="form-control form-control-transparent w-unset flex-grow-1" type="text" placeholder="Search..." @oninput="OnInput" @onfocusout="FocusOut"/>
    </div>
    @if (ShowItems)
    {
        <div class="dropdown-menu w-100 show">
            <div style="max-height: 200px; overflow-y: auto;">
                @{
                    IEnumerable<T> items;

                    if (string.IsNullOrEmpty(SearchTerm))
                        items = Items.Take(PageSize);
                    else
                        items = ItemsFiltered;
                }

                @foreach (var item in items)
                {
                    if (!CurrentValue.Contains(item))
                    {
                        <button class="dropdown-item py-2 fs-6" type="button" @onmousedown:preventDefault @onmousedown="() => AddItem(item)">
                            @if (IconFunc != null)
                            {
                                <i class="bx bx-sm @(IconFunc.Invoke(item)) align-middle me-2"></i>
                            }

                            <span class="align-middle">
                                @DisplayFunc(item)
                            </span>
                        </button>
                    }
                }
            </div>
        </div>
    }
</div>

@code
{
    [Parameter] public List<T> Items { get; set; }
    [Parameter] public Func<T, string> DisplayFunc { get; set; }
    [Parameter] public Func<T, string> SearchFunc { get; set; }
    [Parameter] public int PageSize { get; set; } = 10;
    [Parameter] public Func<T, string>? IconFunc { get; set; }

    private bool ShowItems = false;
    private ElementReference Reference;
    private string SearchTerm = "";

    private T[] ItemsFiltered = Array.Empty<T>();

    protected override void OnInitialized()
    {
        if (SearchFunc == null)
            throw new ArgumentNullException(nameof(SearchFunc));

        if (DisplayFunc == null)
            throw new ArgumentNullException(nameof(DisplayFunc));
    }

    private async Task OnClick()
    {
        ShowItems = !ShowItems;

        await InvokeAsync(StateHasChanged);

        if (ShowItems)
            await Reference.FocusAsync();
    }

    private async Task FocusOut()
    {
        ShowItems = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task AddItem(T item)
    {
        CurrentValue.Add(item);
        ShowItems = false;

        await InvokeAsync(StateHasChanged);
    }

    private async Task RemoveItem(T item)
    {
        CurrentValue.Remove(item);

        await InvokeAsync(StateHasChanged);
    }

    protected override bool TryParseValueFromString(string? value, out List<T> result, out string? validationErrorMessage)
    {
        throw new NotImplementedException();
    }

    private async Task OnInput(ChangeEventArgs args)
    {
        SearchTerm = args.Value?.ToString() ?? "";

        ItemsFiltered = Items
            .OrderByDescending(x => FormHelper.CalculateMatchScore(SearchFunc.Invoke(x), SearchTerm))
            .Take(PageSize)
            .ToArray();

        await InvokeAsync(StateHasChanged);
    }
}