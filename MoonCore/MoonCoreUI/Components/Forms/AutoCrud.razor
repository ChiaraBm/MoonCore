@using Mappy.Net
@using MoonCore.Abstractions
@using MoonCore.Helpers
@using MoonCoreUI.Models
@using MoonCoreUI.Services

@typeparam TItem where TItem : class
@typeparam TCreateForm
@typeparam TUpdateForm

@inject Repository<TItem> ItemRepository
@inject ToastService ToastService

<CascadingValue Value="Options" IsFixed="true" Name="Options">
    @if (ShowCreate)
    {
        <SmartForm Model="CreateForm" OnValidSubmit="FinishCreate">
            <div class="card card-body mb-8">
                <div class="d-flex justify-content-between align-items-center">
                    <a href="#" class="text-body fs-4" @onclick:preventDefault @onclick="GoToView">
                        <i class="bx bx-md bx-chevron-left align-middle"></i>
                        <span class="align-middle">Back</span>
                    </a>

                    <button type="submit" class="btn btn-primary">Create</button>
                </div>
            </div>

            <CascadingValue Value="Context" IsFixed="true" Name="Context">
                <AdvancedAutoForm Model="CreateForm"/>
            </CascadingValue>
        </SmartForm>
    }
    else if (ShowEdit)
    {
        <SmartForm Model="UpdateForm" OnValidSubmit="FinishEdit">
            <div class="card card-body mb-8">
                <div class="d-flex justify-content-between align-items-center">
                    <a href="#" class="text-body fs-4" @onclick:preventDefault @onclick="GoToView">
                        <i class="bx bx-md bx-chevron-left align-middle"></i>
                        <span class="align-middle">Back</span>
                    </a>

                    <div>
                        @if (UpdateActions != null)
                        {
                            @UpdateActions.Invoke(ItemToEdit)
                        }
                        <button type="button" class="btn btn-danger me-2" @onclick="StartDelete">
                            <i class="bx bx-sm bx-trash"></i>
                            <span class="ms-1">Delete</span>
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bx bx-sm bx-save"></i>
                            <span class="ms-1">Save</span>
                        </button>
                    </div>
                </div>
            </div>

            <CascadingValue Value="Context" IsFixed="true" Name="Context">
                <AdvancedAutoForm Model="UpdateForm"/>
            </CascadingValue>
        </SmartForm>

        <SmartModal @ref="DeleteModal" CssClasses="modal-dialog-centered">
            <div class="modal-header">
                <h5 class="modal-title">Do you want to delete this item?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-gray-800 fs-5 fw-semibold">
                    This action cannot be undone. The data will be deleted and cannot be restored
                </p>
            </div>
            <div class="modal-footer p-3">
                <div class="btn-group w-100">
                    <WButton OnClick="FinishDelete" Text="Delete" CssClasses="btn btn-danger w-50 me-3"/>
                    <button class="btn btn-secondary w-50" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </SmartModal>
    }
    else
    {
        <div class="card card-body mb-5 p-3">
            <div class="row">
                @if (Options.ShowSelect && SelectedItems.Length > 0)
                {
                    <div class="col-6 d-flex align-items-center justify-content-start">
                        <div class="ms-1 fs-4 fw-semibold">@SelectedItems.Length item(s) selected</div>
                    </div>
                    <div class="col-6 d-flex align-items-center justify-content-end">

                        @if (SelectionAction != null)
                        {
                            @SelectionAction.Invoke(SelectedItems)
                        }

                        <WButton CssClasses="btn-danger">
                            <i class="bx bx-sm bx-trash"></i>
                            <span class="ms-1">Delete</span>
                        </WButton>
                    </div>
                }
                else
                {
                    <div class="col-6 col-md-3">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bx bx-sm bx-search-alt"></i>
                            </span>
                            <input placeholder="Search" class="form-control"/>
                        </div>
                    </div>
                    <div class="col-6 col-md-9">
                        <div class="text-end">
                            @if (OverviewToolbar != null)
                            {
                                @OverviewToolbar
                            }

                            <button @onclick="StartCreate" type="button" class="btn btn-primary">
                                @if (string.IsNullOrEmpty(Options.CreateText))
                                {
                                    <span>Create @Options.ItemName</span>
                                }
                                else
                                {
                                    @Options.CreateText
                                }
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>


        <div class="card">
            <div class="card-body pt-3 px-5 pb-4">
                <CrudTable @ref="Table" TItem="TItem" ItemSource="ItemSource" OnRefreshed="OnRefreshed">
                    @if (Options.ShowSelect)
                    {
                        <CrudColumn TItem="TItem" HeadCssClasses="w-10px align-middle" CssClasses="w-10px align-middle">
                            <HeadTemplate>
                                <div class="form-check">
                                    @if (IsAllSelected)
                                    {
                                        <input class="form-check-input" type="checkbox" checked="checked" @onclick="() => SelectAll(false)">
                                    }
                                    else
                                    {
                                        <input class="form-check-input" type="checkbox" @onclick="() => SelectAll(true)">
                                    }
                                </div>
                            </HeadTemplate>
                            <Template>
                                <div class="form-check">
                                    @if (SelectionStatusCache.ContainsKey(context))
                                    {
                                        if (SelectionStatusCache[context])
                                        {
                                            <input class="form-check-input" type="checkbox" checked="checked" @onclick="() => ChangeSelection(context, false)">
                                        }
                                        else
                                        {
                                            <input class="form-check-input" type="checkbox" @onclick="() => ChangeSelection(context, true)">
                                        }
                                    }
                                    else
                                    {
                                        <input class="form-check-input" type="checkbox" @onclick="() => ChangeSelection(context, true)">
                                    }
                                </div>
                            </Template>
                        </CrudColumn>
                    }

                    @View

                    <CrudColumn TItem="TItem">
                        <Template>
                            <div class="text-center">
                                <div class="text-nowrap me-3 fw-semibold">
                                    <a href="#" @onclick:preventDefault @onclick="() => StartEdit(context)">
                                        <i class="bx bx-edit"></i> Edit
                                    </a>
                                </div>
                            </div>
                        </Template>
                    </CrudColumn>
                </CrudTable>
            </div>
        </div>
    }
</CascadingValue>

@code
{
    [Parameter] public Func<Repository<TItem>, IEnumerable<TItem>> Loader { get; set; }

    [Parameter] public RenderFragment View { get; set; }

    [Parameter] public RenderFragment? NoItemsView { get; set; }

    [Parameter] public RenderFragment? OverviewToolbar { get; set; }

    [Parameter] public RenderFragment<TItem>? UpdateActions { get; set; }

    [Parameter] public RenderFragment<TItem[]>? SelectionAction { get; set; }

    [Parameter] public Func<TItem, Task>? ValidateAdd { get; set; }

    [Parameter] public Func<TItem, Task>? ValidateUpdate { get; set; }

    [Parameter] public Func<TItem, Task>? ValidateDelete { get; set; }

    [Parameter] public Func<TItem, Task>? CustomAdd { get; set; }

    [Parameter] public Func<TItem, Task>? CustomUpdate { get; set; }

    [Parameter] public Func<TItem, Task>? CustomDelete { get; set; }

    [Parameter] public int PageSize { get; set; } = 25;

    [Parameter] public Action<AutoCrudOptions>? OnConfigure { get; set; }

    private SmartModal DeleteModal;

    private bool ShowCreate = false;
    private bool ShowEdit = false;

    private IEnumerable<TItem> ItemSource;
    private CrudTable<TItem> Table;

    private Dictionary<TItem, bool> SelectionStatusCache = new();
    private TItem[] SelectedItems = Array.Empty<TItem>();
    private bool IsAllSelected = false;

    private readonly AutoCrudOptions Options = new();
    private readonly AutoCrudContext Context = new();

    private TCreateForm CreateForm;
    private TUpdateForm UpdateForm;
    private TItem? ItemToEdit;

    protected override void OnInitialized()
    {
        if (View == null)
            throw new ArgumentNullException(nameof(View));

        Options.ItemName = Formatter.ConvertCamelCaseToSpaces(typeof(TItem).Name);

        if (OnConfigure != null)
            OnConfigure.Invoke(Options);

        CreateForm = Activator.CreateInstance<TCreateForm>()!;
        UpdateForm = Activator.CreateInstance<TUpdateForm>()!;

        // Update transfer context
        Context.CreateForm = CreateForm;
        Context.EditForm = UpdateForm;

        // Get ItemSource by calling loader func
        ItemSource = Loader.Invoke(ItemRepository);
    }

    public async Task Reload()
    {
        await Table.Refresh();
    }

    #region Edit

    private async Task StartEdit(TItem item)
    {
        UpdateForm = Mapper.Map<TUpdateForm>(item)!;
        Context.EditForm = UpdateForm;
        
        ItemToEdit = item;
        Context.ItemToEdit = ItemToEdit;

        ShowEdit = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task FinishEdit()
    {
        var item = Mapper.Map(ItemToEdit, UpdateForm!);

        if (ValidateUpdate != null) // Optional additional validation
            await ValidateUpdate.Invoke(item);

        if (CustomUpdate != null)
            await CustomUpdate.Invoke(item);
        else
            ItemRepository.Update(item);

        await ToastService.Success("Successfully updated item");
        await GoToView();
    }

    #endregion

    #region Create

    private async Task StartCreate()
    {
        CreateForm = Activator.CreateInstance<TCreateForm>()!;
        Context.CreateForm = CreateForm;

        ShowCreate = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task FinishCreate()
    {
        var item = Mapper.Map<TItem>(CreateForm!);

        if (ValidateAdd != null) // Optional additional validation
            await ValidateAdd.Invoke(item);

        if (CustomAdd != null)
            await CustomAdd.Invoke(item);
        else
            ItemRepository.Add(item);

        await ToastService.Success("Successfully added item");
        await GoToView();
    }

    #endregion

    #region Delete

    private async Task StartDelete()
    {
        await DeleteModal.Show();
    }

    private async Task FinishDelete()
    {
        if (ValidateDelete != null) // Optional additional validation
            await ValidateDelete.Invoke(ItemToEdit);

        if (CustomDelete != null)
            await CustomDelete.Invoke(ItemToEdit);
        else
            ItemRepository.Delete(ItemToEdit);

        await DeleteModal.Hide();
        await ToastService.Success("Successfully deleted item");

        await GoToView();
    }

    #endregion

    private async Task GoToView()
    {
        ShowCreate = false;
        ShowEdit = false;

        await InvokeAsync(StateHasChanged);
    }

    #region Selection

    private Task OnRefreshed()
    {
        if (!Options.ShowSelect)
            return Task.CompletedTask;
        
        SelectionStatusCache = Table.CurrentItems
            .ToDictionary(x => x, _ => false);

        SelectedItems = Array.Empty<TItem>();

        IsAllSelected = false;

        return Task.CompletedTask;
    }

    private async Task ChangeSelection(TItem item, bool selection)
    {
        if (IsAllSelected)
            IsAllSelected = false;

        SelectionStatusCache[item] = selection;

        SelectedItems = SelectionStatusCache
            .Where(x => x.Value)
            .Select(x => x.Key)
            .ToArray();

        await InvokeAsync(StateHasChanged);
    }

    private async Task SelectAll(bool toggle)
    {
        IsAllSelected = toggle;

        foreach (var key in SelectionStatusCache.Keys)
            SelectionStatusCache[key] = toggle;

        if (toggle)
            SelectedItems = Table.CurrentItems.ToArray();
        else
            SelectedItems = Array.Empty<TItem>();

        await InvokeAsync(StateHasChanged);
    }

    #endregion

}