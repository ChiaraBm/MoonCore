@using Mappy.Net
@using MoonCore.Abstractions
@using MoonCore.Helpers
@using MoonCoreUI.Services

@typeparam TItem where TItem : class
@typeparam TCreateForm
@typeparam TUpdateForm

@inject Repository<TItem> ItemRepository
@inject ToastService ToastService

@if (ShowCreate)
{
    <SmartForm Model="CreateForm" OnValidSubmit="FinishCreate">
        <div class="card card-body mb-8">
            <div class="d-flex justify-content-between align-items-center">
                <a href="#" class="text-body fs-4">
                    <i class="bx bx-md bx-chevron-left align-middle"></i>
                    <span class="align-middle">Back</span>
                </a>

                <button type="submit" class="btn btn-primary">Create</button>
            </div>
        </div>

        <AdvancedAutoForm Columns="@(CreateForm.GetType().GetProperties().Length > 1 ? 6 : 12)" Model="CreateForm"/>
    </SmartForm>
}
else if (ShowUpdate)
{
    <SmartForm Model="UpdateForm" OnValidSubmit="FinishUpdate">
        <div class="card card-body mb-8">
            <div class="d-flex justify-content-between align-items-center">
                <a href="#" class="text-body fs-4">
                    <i class="bx bx-md bx-chevron-left align-middle"></i>
                    <span class="align-middle">Back</span>
                </a>

                <button type="submit" class="btn btn-primary">Update</button>
            </div>
        </div>

        <AdvancedAutoForm Columns="@(UpdateForm.GetType().GetProperties().Length > 1 ? 6 : 12)" Model="UpdateForm"/>
    </SmartForm>
}
else
{
    <div class="card card-body mb-5 p-3">
        <div class="row">
            <div class="col-6 col-md-3">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bx bx-sm bx-search-alt"></i>
                    </span>
                    <input placeholder="Search" class="form-control"/>
                </div>
            </div>
            <div class="col-6 col-md-9">
                <div class="text-end">
                    @if (Toolbar != null)
                    {
                        @Toolbar
                    }
                    <DynamicFilterButton @ref="FilterButton" TItem="TItem" Color="FilterMenuColor"/>
                    <button @onclick="StartCreate" type="button" class="btn btn-primary ms-3">
                        @if (string.IsNullOrEmpty(CreateText))
                        {
                            <span>Create @ItemName</span>
                        }
                        else
                        {
                            @CreateText
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>


    <div class="card">
        <div class="card-body pt-3 px-5 pb-4">
            <LazyLoader @ref="LazyLoader" Load="LoadItems">
                @if (Items.Length == 0)
                {
                    if (NoItemsView == null)
                    {
                        <span class="text-center text-muted fs-5">No items found</span>
                    }
                    else
                    {
                        @NoItemsView
                    }
                }
                else
                {
                    <CrudTable TItem="TItem" ItemSource="@(ItemRepository.Get())" PageSize="@PageSize">
                        <CrudColumn TItem="TItem" HeadCssClasses="w-10px align-middle" CssClasses="w-10px align-middle">
                            <HeadTemplate>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="0">
                                </div>
                            </HeadTemplate>
                            <Template>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="0">
                                </div>
                            </Template>
                        </CrudColumn>

                        @View

                        <CrudColumn TItem="TItem">
                            <Template>
                                <div class="text-end">
                                    @if (Actions != null)
                                    {
                                        @Actions.Invoke(context)
                                    }
                                </div>
                            </Template>
                        </CrudColumn>
                        <CrudColumn TItem="TItem">
                            <Template>
                                <div class="text-center">
                                    <div class="text-nowrap me-3 fw-semibold">
                                        <a href="#" @onclick:preventDefault @onclick="() => StartUpdate(context)">
                                            <i class="bx bx-edit"></i> Edit
                                        </a>
                                    </div>
                                </div>
                            </Template>
                        </CrudColumn>
                    </CrudTable>
                }
            </LazyLoader>
        </div>
    </div>
}

<SmartModal @ref="DeleteModal" CssClasses="modal-dialog-centered">
    <div class="modal-header">
        <h5 class="modal-title">Do you want to delete this item?</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    <div class="modal-body">
        <p class="text-gray-800 fs-5 fw-semibold">
            This action cannot be undone. The data will be deleted and cannot be restored
        </p>
    </div>
    <div class="modal-footer p-3">
        <div class="btn-group w-100">
            <WButton OnClick="FinishDelete" Text="Delete" CssClasses="btn btn-danger w-50 me-3"/>
            <button class="btn btn-secondary w-50" data-bs-dismiss="modal">Cancel</button>
        </div>
    </div>
</SmartModal>

@code
{
    [Parameter] public string Title { get; set; } = "";

    [Parameter] public string CreateText { get; set; } = "";

    [Parameter] public string UpdateText { get; set; } = "";

    [Parameter] public Func<Repository<TItem>, TItem[]> Load { get; set; }

    [Parameter] public RenderFragment View { get; set; }

    [Parameter] public RenderFragment? NoItemsView { get; set; }

    [Parameter] public RenderFragment? Toolbar { get; set; }

    [Parameter] public RenderFragment<TItem>? Actions { get; set; }

    [Parameter] public Func<TItem, Task>? ValidateAdd { get; set; }

    [Parameter] public Func<TItem, Task>? ValidateUpdate { get; set; }

    [Parameter] public Func<TItem, Task>? ValidateDelete { get; set; }

    [Parameter] public Func<TItem, Task>? CustomAdd { get; set; }

    [Parameter] public Func<TItem, Task>? CustomUpdate { get; set; }

    [Parameter] public Func<TItem, Task>? CustomDelete { get; set; }

    [Parameter] public int PageSize { get; set; } = 25;

    [Parameter] public string FilterMenuColor { get; set; } = "gray-700";

    private TItem[] Items;
    private TCreateForm CreateForm;
    private TUpdateForm UpdateForm;
    private TItem ItemToUpdate;
    private TItem ItemToDelete;

    private SmartModal DeleteModal;

    private DynamicFilterButton<TItem> FilterButton;

    private bool ShowCreate = false;
    private bool ShowUpdate = false;

    private LazyLoader LazyLoader;

    private string ItemName => Formatter.ConvertCamelCaseToSpaces(typeof(TItem).Name);

    protected override void OnInitialized()
    {
        if (Load == null)
            throw new ArgumentNullException(nameof(Load));

        if (View == null)
            throw new ArgumentNullException(nameof(View));

        CreateForm = Activator.CreateInstance<TCreateForm>()!;
        UpdateForm = Activator.CreateInstance<TUpdateForm>()!;
    }

    public async Task Reload() => await LazyLoader.Reload();

    private Task LoadItems(LazyLoader _)
    {
        Items = Load.Invoke(ItemRepository);

        return Task.CompletedTask;
    }

    private async Task StartUpdate(TItem item)
    {
        UpdateForm = Mapper.Map<TUpdateForm>(item);
        ItemToUpdate = item;

        ShowUpdate = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task FinishUpdate()
    {
        var item = Mapper.Map(ItemToUpdate, UpdateForm!);

        if (ValidateUpdate != null) // Optional additional validation
            await ValidateUpdate.Invoke(item);

        if (CustomUpdate != null)
            await CustomUpdate.Invoke(item);
        else
            ItemRepository.Update(item);

        // Reset
        ShowUpdate = false;
        await InvokeAsync(StateHasChanged);
        await LazyLoader.Reload();
        await ToastService.Success("Successfully updated item");
    }

    private async Task StartCreate()
    {
        CreateForm = Activator.CreateInstance<TCreateForm>()!;

        ShowCreate = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task FinishCreate()
    {
        var item = Mapper.Map<TItem>(CreateForm!);

        if (ValidateAdd != null) // Optional additional validation
            await ValidateAdd.Invoke(item);

        if (CustomAdd != null)
            await CustomAdd.Invoke(item);
        else
            ItemRepository.Add(item);

        // Reset
        ShowCreate = false;
        await InvokeAsync(StateHasChanged);
        await LazyLoader.Reload();
        await ToastService.Success("Successfully added item");
    }

    private async Task StartDelete(TItem item)
    {
        ItemToDelete = item;
        await DeleteModal.Show();
    }

    private async Task FinishDelete()
    {
        if (ValidateDelete != null) // Optional additional validation
            await ValidateDelete.Invoke(ItemToDelete);

        if (CustomDelete != null)
            await CustomDelete.Invoke(ItemToDelete);
        else
            ItemRepository.Delete(ItemToDelete);

        // Reset
        await DeleteModal.Hide();
        await LazyLoader.Reload();
        await ToastService.Success("Successfully deleted item");
    }

    private async Task GoToView()
    {
        ShowCreate = false;
        ShowUpdate = false;

        await InvokeAsync(StateHasChanged);
    }
}