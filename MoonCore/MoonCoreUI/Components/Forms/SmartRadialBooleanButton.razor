@using Microsoft.AspNetCore.Components.Forms
@inherits InputBase<bool>

<div class="btn-group w-100">
    <label class="btn btn-outline btn-color-muted btn-active-primary @(CurrentValue ? "" : "active")">
        <input class="btn-check" type="radio" name="method" value="0" @onclick="() => SetValue(false)"/>
        @if (!string.IsNullOrEmpty(FalseIcon))
        {
            <i class="bx bx-sm @FalseIcon align-middle"></i>
        }
        <span class="align-middle">
            @FalseText
        </span>
    </label>

    <label class="btn btn-outline btn-color-muted btn-active-primary @(CurrentValue ? "active" : "")">
        <input class="btn-check" type="radio" name="method" value="1" @onclick="() => SetValue(true)"/>
        @if (!string.IsNullOrEmpty(TrueIcon))
        {
            <i class="bx bx-sm @TrueIcon align-middle"></i>
        }
        <span class="align-middle">
            @TrueText
        </span>
    </label>
</div>

@code
{
    [Parameter]
    public string TrueText { get; set; } = "";
    
    [Parameter]
    public string FalseText { get; set; } = "";

    [Parameter]
    public string TrueIcon { get; set; } = "";
    
    [Parameter]
    public string FalseIcon { get; set; } = "";

    private async Task SetValue(bool b)
    {
        CurrentValue = b;
        await ValueChanged.InvokeAsync(CurrentValue);

        await InvokeAsync(StateHasChanged);
    }

    protected override bool TryParseValueFromString(string? value, out bool result, out string? validationErrorMessage)
    {
        validationErrorMessage = "";

        if (bool.TryParse(value, out result))
            return false;

        result = false;
        return false;
    }
}