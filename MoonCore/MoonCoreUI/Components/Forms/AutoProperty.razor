@using System.Reflection
@using System.ComponentModel
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.DependencyInjection
@using MoonCore.Abstractions
@using MoonCore.Helpers
@using MoonCoreUI.Attributes
@using MoonCoreUI.Helpers

@typeparam TProp

@inject IServiceProvider ServiceProvider

<div class="@ColCssClass">
    @if (EnablePropertyName)
    {
        <label class="form-label">
            @if (TryGetCasted(out DisplayNameAttribute nameAttribute))
            {
                @nameAttribute.DisplayName
            }
            else
            {
                @(Formatter.ConvertCamelCaseToSpaces(Property.Name))
            }
        </label>
    }

    @* Actual value binding *@

    @if (Property.PropertyType == typeof(string))
    {
        <div class="w-100">
            <input id="@Property.Name" @bind="Binder.StringValue" type="@FormType" class="@CustomCss" placeholder="@Placeholder" autocomplete="off" spellcheck="false"/>
        </div>
    }
    else if (Property.PropertyType == typeof(int))
    {
        if (TryGetCasted<ByteSizeAttribute>(out var byteSizeAttribute))
        {
            <ByteSizeInput @bind-Value="Binder.IntValue"
                           Converter="byteSizeAttribute.Converter"
                           MinimumUnit="byteSizeAttribute.MinimumUnit"
                           DefaultUnit="byteSizeAttribute.DefaultUnit"/>
        }
        else
        {
            <input id="@Property.Name" @bind="Binder.IntValue" type="@FormType" class="@CustomCss"/>
        }
    }
    else if (Property.PropertyType == typeof(double))
    {
        <input id="@Property.Name" @bind="Binder.DoubleValue" type="@FormType" class="@CustomCss"/>
    }
    else if (Property.PropertyType == typeof(long))
    {
        <input id="@Property.Name" @bind="Binder.LongValue" type="@FormType" class="@CustomCss"/>
    }
    else if (Property.PropertyType == typeof(bool))
    {
        if (TryGetCasted(out RadioButtonBoolAttribute radioButtonBoolAttribute))
        {
            <SmartRadialBooleanButton @bind-Value="Binder.BoolValue"
                                      FalseIcon="@radioButtonBoolAttribute.FalseIcon"
                                      TrueIcon="@radioButtonBoolAttribute.TrueIcon"
                                      FalseText="@radioButtonBoolAttribute.FalseText"
                                      TrueText="@radioButtonBoolAttribute.TrueText"/>
        }
        else
        {
            var css = "form-check " + CustomCss.Replace("form-control", "");

            <div class="form-check @css">
                <InputCheckbox id="@Property.Name" @bind-Value="Binder.BoolValue" class="form-check-input"/>
            </div>
        }
    }
    else if (Property.PropertyType == typeof(DateTime))
    {
        <InputDate id="@Property.Name" @bind-Value="Binder.DateTimeValue" class="@CustomCss"/>
    }
    else if (Property.PropertyType == typeof(decimal))
    {
        <InputNumber id="@Property.Name" step="0.01" @bind-Value="Binder.DoubleValue" class="@CustomCss"/>
    }
    else if (Property.PropertyType.IsEnum)
    {
        <select @bind="Binder.Class" class="form-select @CustomCss">
            @foreach (var status in (TProp[])Enum.GetValues(typeof(TProp)))
            {
                if (Binder.Class.ToString() == status.ToString())
                {
                    <option value="@(status)" selected="">@(status)</option>
                }
                else
                {
                    <option value="@(status)">@(status)</option>
                }
            }
        </select>
    }
    else if (Property.PropertyType.IsClass)
    {
        if (TryGetCasted(out SelectorAttribute selectorAttribute))
        {
            if (selectorAttribute.UseDropdown)
            {
                <AdvancedSmartDropdown @bind-Value="Binder.Class" DisplayFunc="DisplayFunc" SearchProp="SearchFunc" Items="Items"/>
            }
            else
            {
                <SmartSelect @bind-Value="Binder.Class" DisplayField="DisplayFunc" Items="Items" CanBeNull="true"/>
            }
        }
    }

    @if (TryGetCasted<DescriptionAttribute>(out var descriptionAttribute))
    {
        <div class="form-text fs-6 text-gray-600">
            @(descriptionAttribute.Description)
        </div>
    }
</div>

@code
{
    [Parameter] public object Data { get; set; }

    [Parameter] public PropertyInfo Property { get; set; }

    [Parameter] public bool EnablePropertyName { get; set; } = true;
    [Parameter] public bool EnablePlaceholderName { get; set; } = false;

    [Parameter] public bool EnableColumnDetection { get; set; } = false;

    [CascadingParameter] public Dictionary<string, object> CustomItemLoaders { get; set; }

    private PropBinder<TProp> Binder;
    private TProp[] Items = Array.Empty<TProp>();

    private Attribute[] Attributes;

    private string ColCssClass = "";
    private string Placeholder = "";
    private string CustomCss = "";
    private string FormType = "";

    private Func<TProp, string> DisplayFunc;
    private Func<TProp, string> SearchFunc;

    protected override void OnInitialized()
    {
        Binder = new(Property, Data);

        Attributes = Property
            .GetCustomAttributes()
            .ToArray();

        // ColCssClass
        if (EnableColumnDetection)
        {
            var columns = 3;

            if (Property.PropertyType == typeof(string))
                columns = 6;

            ColCssClass = "col-12 col-md-6 col-xl-" + columns;
        }

        // Custom css
        CustomCss += "form-control ";

        if (TryGetCasted<CustomFormClassAttribute>(out var classAttribute))
            CustomCss += classAttribute.Classes;

        // Form type
        if (Property.PropertyType == typeof(string))
            FormType = "text";
        else if (Property.PropertyType == typeof(int))
            FormType = "number";
        else if (Property.PropertyType == typeof(double))
            FormType = "number";
        else if (Property.PropertyType == typeof(long))
            FormType = "number";
        else if (Property.PropertyType == typeof(decimal))
            FormType = "number";

        if (TryGetCasted<CustomFormTypeAttribute>(out var formTypeAttribute))
            FormType = formTypeAttribute.Type;

        // Placeholder
        Placeholder = EnablePlaceholderName ? Property.Name : "";

        // Search and display functions
        if (TryGetCasted(out SelectorAttribute selectorAttribute))
        {
            DisplayFunc = FormHelper.GetPropertyExpression<TProp>(selectorAttribute.DisplayProp);

            if (selectorAttribute.UseDropdown)
                SearchFunc = DisplayFunc = FormHelper.GetPropertyExpression<TProp>(selectorAttribute.SelectorProp);
        }
    }

    protected override void OnParametersSet()
    {
        Binder = new(Property, Data);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!TryGetCasted(out SelectorAttribute _))
                return;
            
            // Create generic type to resolve from di
            var typeToGetByDi = typeof(Repository<>).MakeGenericType(typeof(TProp));
                
            // Resolve generic repo from di
            var repo = ServiceProvider.GetRequiredService(typeToGetByDi);

            if (TryGetCasted(out CustomItemLoaderAttribute loaderAttribute))
            {
                // Check if custom loader exists, if not, skip it
                if(!CustomItemLoaders.TryGetValue(loaderAttribute.Id, out var customLoader))
                    return;
                
                // Invoke the loader with the repo as an argument and an expected IEnumerable result
                var iEnumerable = customLoader
                    .GetType()
                    .GetMethods()
                    .First(x => x.Name == "Invoke")
                    .Invoke(customLoader, new[] { repo }) as IEnumerable<TProp>;
                
                // Execute db command (see EF ToArray() )
                Items = iEnumerable!.ToArray();
            }
            else // Fallback to default loader
            {
                // Invoke the repo get function with the no arguments and an expected IEnumerable result
                var dbSet = repo.GetType().GetMethods().First(x => x.Name == "Get").Invoke(repo, null) as IEnumerable<TProp>;
                
                // Execute db command (see EF ToArray() )
                Items = dbSet!.ToArray();
            }
            
            await InvokeAsync(StateHasChanged);
        }
    }

    private bool TryGetCasted<T>(out T result) where T : class
    {
        result = default!;

        if (Attributes.Length < 1)
            return false;

        var attribute = Attributes.FirstOrDefault(x => x.GetType() == typeof(T));

        if (attribute == null)
            return false;

        if (attribute is not T castedAttribute)
            return false;

        result = castedAttribute;
        return true;
    }
}