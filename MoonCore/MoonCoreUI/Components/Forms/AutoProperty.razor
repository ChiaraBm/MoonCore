@using System.Reflection
@using System.ComponentModel
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.DependencyInjection
@using MoonCore.Abstractions
@using MoonCore.Helpers
@using MoonCoreUI.Attributes

@typeparam TProp
@inject IServiceProvider ServiceProvider

@{
    var colCssClass = "";

    if (EnableColumnDetection)
    {
        var columns = 3;

        if (Property.PropertyType == typeof(string))
            columns = 6;

        colCssClass = "col-12 col-md-" + columns;
    }
}

<div class="@colCssClass">
    @{
        var customAttributes = Property.GetCustomAttributes(true);

        bool TryGetCasted<T>(out T result) where T : class
        {
            if (customAttributes == null)
            {
                result = default(T)!;
                return false;
            }

            var attribute = customAttributes!.FirstOrDefault(x => x.GetType() == typeof(T));

            if (attribute == null)
            {
                result = default(T)!;
                return false;
            }

            var castedAttribute = attribute as T;

            if (castedAttribute == null)
            {
                result = default(T)!;
                return false;
            }

            result = castedAttribute;
            return true;
        }

        var customCss = "form-control ";

        if (TryGetCasted<CustomFormClassAttribute>(out var classAttribute))
        {
            customCss += classAttribute.Classes;
        }

        var formType = "";

        if (Property.PropertyType == typeof(string))
            formType = "text";
        else if (Property.PropertyType == typeof(int))
            formType = "number";
        else if (Property.PropertyType == typeof(double))
            formType = "number";
        else if (Property.PropertyType == typeof(long))
            formType = "number";
        else if (Property.PropertyType == typeof(decimal))
            formType = "number";

        if (TryGetCasted<CustomFormTypeAttribute>(out var formTypeAttribute))
        {
            formType = formTypeAttribute.Type;
        }

        var placeholder = EnablePlaceholderName ? Property.Name : "";
    }

    @if (EnablePropertyName)
    {
        <label class="form-label">
            @if (TryGetCasted(out DisplayNameAttribute nameAttribute))
            {
                @nameAttribute.DisplayName
            }
            else
            {
                @(Formatter.ConvertCamelCaseToSpaces(Property.Name))
            }
        </label>
    }

    @* Actual value binding *@

    @if (Property.PropertyType == typeof(string))
    {
        <div class="w-100">
            <input id="@Property.Name" @bind="Binder.StringValue" type="@formType" class="@customCss" placeholder="@placeholder" autocomplete="off" spellcheck="false"/>
        </div>
    }
    else if (Property.PropertyType == typeof(int))
    {
        if (TryGetCasted<ByteSizeAttribute>(out var byteSizeAttribute))
        {
            <ByteSizeInput @bind-Value="Binder.IntValue"
                           Converter="byteSizeAttribute.Converter"
                           MinimumUnit="byteSizeAttribute.MinimumUnit"
                           DefaultUnit="byteSizeAttribute.DefaultUnit"/>
        }
        else
        {
            <input id="@Property.Name" @bind="Binder.IntValue" type="@formType" class="@customCss"/>
        }
    }
    else if (Property.PropertyType == typeof(double))
    {
        <input id="@Property.Name" @bind="Binder.DoubleValue" type="@formType" class="@customCss"/>
    }
    else if (Property.PropertyType == typeof(long))
    {
        <input id="@Property.Name" @bind="Binder.LongValue" type="@formType" class="@customCss"/>
    }
    else if (Property.PropertyType == typeof(bool))
    {
        if (TryGetCasted(out RadioButtonBoolAttribute radioButtonBoolAttribute))
        {
            <SmartRadialBooleanButton @bind-Value="Binder.BoolValue"
                                      FalseIcon="@radioButtonBoolAttribute.FalseIcon"
                                      TrueIcon="@radioButtonBoolAttribute.TrueIcon"
                                      FalseText="@radioButtonBoolAttribute.FalseText"
                                      TrueText="@radioButtonBoolAttribute.TrueText"/>
        }
        else
        {
            var css = "form-check " + customCss.Replace("form-control", "");

            <div class="form-check @css">
                <InputCheckbox id="@Property.Name" @bind-Value="Binder.BoolValue" class="form-check-input"/>
            </div>
        }
    }
    else if (Property.PropertyType == typeof(DateTime))
    {
        <InputDate id="@Property.Name" @bind-Value="Binder.DateTimeValue" class="@customCss"/>
    }
    else if (Property.PropertyType == typeof(decimal))
    {
        <InputNumber id="@Property.Name" step="0.01" @bind-Value="Binder.DoubleValue" class="@customCss"/>
    }
    else if (Property.PropertyType.IsEnum)
    {
        <select @bind="Binder.Class" class="form-select @customCss">
            @foreach (var status in (TProp[])Enum.GetValues(typeof(TProp)))
            {
                if (Binder.Class.ToString() == status.ToString())
                {
                    <option value="@(status)" selected="">@(status)</option>
                }
                else
                {
                    <option value="@(status)">@(status)</option>
                }
            }
        </select>
    }
    else if (Property.PropertyType.IsClass)
    {
        var attribute = Property.GetCustomAttributes(true)
            .FirstOrDefault(x => x.GetType() == typeof(SelectorAttribute)) as SelectorAttribute;

        if (attribute != null)
        {
            if (attribute.UseDropdown)
            {
                var displayFunc = new Func<TProp, string>(x =>
                {
                    var prop = typeof(TProp).GetProperties().First(x => x.Name == attribute.DisplayProp);
                    return prop.GetValue(x) as string ?? "N/A";
                });

                var searchFunc = new Func<TProp, string>(x =>
                {
                    var prop = typeof(TProp).GetProperties().First(x => x.Name == attribute.SelectorProp);
                    return prop.GetValue(x) as string ?? "N/A";
                });

                <AdvancedSmartDropdown @bind-Value="Binder.Class" DisplayFunc="displayFunc" SearchProp="searchFunc" Items="Items"/>
            }
            else
            {
                var displayFunc = new Func<TProp, string>(x =>
                {
                    var prop = typeof(TProp).GetProperties().First(x => x.Name == attribute.DisplayProp);
                    return prop.GetValue(x) as string ?? "N/A";
                });

                <SmartSelect @bind-Value="Binder.Class" DisplayField="displayFunc" Items="Items" CanBeNull="true"/>
            }
        }
    }

    @if (TryGetCasted<DescriptionAttribute>(out var descriptionAttribute))
    {
        <div class="form-text fs-6 text-gray-600">
            @(descriptionAttribute.Description)
        </div>
    }
</div>

@code
{
    [Parameter] public object Data { get; set; }

    [Parameter] public PropertyInfo Property { get; set; }

    [Parameter] public bool EnablePropertyName { get; set; } = true;
    [Parameter] public bool EnablePlaceholderName { get; set; } = false;

    [Parameter] public bool EnableColumnDetection { get; set; } = false;

    private PropBinder<TProp> Binder;
    private TProp[] Items = Array.Empty<TProp>();

    protected override void OnInitialized()
    {
        Binder = new(Property, Data);
    }

    protected override void OnParametersSet()
    {
        Binder = new(Property, Data);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Property.GetCustomAttributes(true).Any(x => x.GetType() == typeof(SelectorAttribute)))
            {
                var typeToGetByDi = typeof(Repository<>).MakeGenericType(typeof(TProp));
                var repo = ServiceProvider.GetRequiredService(typeToGetByDi);
                var dbSet = repo.GetType().GetMethods().First(x => x.Name == "Get").Invoke(repo, null) as IEnumerable<TProp>;
                Items = dbSet!.ToArray();

                await InvokeAsync(StateHasChanged);
            }
        }
    }
}