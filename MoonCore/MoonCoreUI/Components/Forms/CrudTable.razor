@using System.Linq.Expressions
@using System.Reflection
@using MoonCore.Helpers

@typeparam TItem

<div class="table-responsive mb-3">
    <table class="table table-row-bordered table-row-gray-200 align-middle gs-0 gy-3 fs-6 table-rounded">
        <CascadingValue Value="@this">
            @ChildContent
        </CascadingValue>

        <thead class="fw-bold text-muted">
        <tr>
            @foreach (var column in Columns)
            {
                <th class="@column.HeadCssClasses">
                    @if (column.HeadTemplate != null)
                    {
                        @column.HeadTemplate
                    }
                    else
                    {
                        @column.Title
                    }
                </th>
            }
        </tr>
        </thead>
        <tbody>

        @if (IsLoading)
        {
            <tr>
                <td class="fs-5 text-body fw-semibold">
                    Loading
                </td>
            </tr>
        }
        else
        {
            foreach (var item in CurrentItems)
            {
                <tr>
                    @foreach (var column in Columns)
                    {
                        <td class="@column.CssClasses">
                            @if (column.Template == null)
                            {
                                var val = column.Field!.Compile().Invoke(item);

                                @(val == null ? "-" : val.ToString())
                            }
                            else
                            {
                                @column.Template.Invoke(item)
                            }
                        </td>
                    }
                </tr>
            }
        }
        </tbody>
    </table>
</div>

@if (ShowPagination)
{
    <div class="d-flex justify-content-between align-items-center mx-2">
        <div class="d-none d-lg-block">
            <span class="text-gray-600 fs-5">Showing @CurrentItems.Length of @TotalItems results</span>
        </div>
        <div>
            @if (AllowPageSizeChange)
            {
                <div class="input-group input-group-sm">
                    <span class="input-group-text">Per page</span>
                    <select class="form-select">
                        <option selected="selected">10</option>
                        <option>25</option>
                        <option>50</option>
                        <option>100</option>
                    </select>
                </div>
            }
        </div>
        <div>
            <ul class="pagination">
                <li class="page-item previous @(Page <= 0 ? "disabled" : "")">
                    <a href="#" class="page-link" @onclick:preventDefault @onclick="() => SetPage(Page - 1)">
                        <i class="previous"></i>
                    </a>
                </li>
                @if (Page > 0)
                {
                    <li class="page-item ">
                        <a href="#" class="page-link" @onclick:preventDefault @onclick="() => SetPage(Page - 1)">@(Page)</a>
                    </li>
                }
                <li class="page-item active">
                    <a href="#" class="page-link" @onclick:preventDefault>@(Page + 1)</a>
                </li>
                @if (Page < TotalPages)
                {
                    <li class="page-item ">
                        <a href="#" class="page-link" @onclick:preventDefault @onclick="() => SetPage(Page + 1)">@(Page + 2)</a>
                    </li>
                }
                <li class="page-item next @(Page >= TotalPages ? "disabled" : "")">
                    <a href="#" class="page-link" @onclick:preventDefault @onclick="() => SetPage(Page + 1)">
                        <i class="next"></i>
                    </a>
                </li>
            </ul>
        </div>
    </div>
}

@code
{
    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public IEnumerable<TItem> ItemSource { get; set; }
    
    [Parameter] public Func<Task>? OnItemsChanged { get; set; }

    [Parameter] public int PageSize { get; set; } = 25;

    [Parameter] public bool ShowPagination { get; set; } = true;

    [Parameter] public bool AllowPageSizeChange { get; set; } = true;

    private List<CrudColumn<TItem>> Columns = new();

    public TItem[] CurrentItems { get; private set; } = Array.Empty<TItem>();
    private int TotalItems = 0;
    private int Page = 0;
    private int TotalPages = 0;

    private bool IsLoading = true;
    
    public async Task SetPage(int x)
    {
        Page = x;

        if (Page < 0)
            Page = 0;

        if (Page > TotalPages)
            Page = TotalPages;

        await Refresh();
    }

    public Task AddColumn(CrudColumn<TItem> column)
    {
        Columns.Add(column);

        return Task.CompletedTask;
    }

    public async Task Refresh(bool fullRefresh = false)
    {
        IsLoading = true;
        await InvokeAsync(StateHasChanged);
        
        if (fullRefresh)
        {
            TotalItems = ItemSource.Count();
        }

        var pagesMod = TotalItems % PageSize;
        
        if(pagesMod == 0)
            TotalPages = TotalItems / PageSize;
        else if(TotalItems > PageSize)
            TotalPages = (TotalItems - pagesMod) / PageSize + 1;
        else
            TotalPages = (TotalItems - pagesMod) / PageSize;

        // Reduce the total pages by one to match the page counter starting with zero
        TotalPages -= 1;
        
        CurrentItems = ItemSource
            .Skip(Page * PageSize)
            .Take(PageSize)
            .ToArray();
        
        if (OnItemsChanged != null)
            await OnItemsChanged.Invoke();

        IsLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Refresh(fullRefresh: true);
        }
    }

    private PropertyInfo GetPropertyInfo(Expression<Func<TItem, object>> expression)
    {
        MemberExpression? memberExpression = default;

        if (expression.Body is MemberExpression body)
            memberExpression = body;
        else if (expression.Body is UnaryExpression unaryExpression && unaryExpression.NodeType == ExpressionType.Convert)
        {
            if (unaryExpression.Operand is MemberExpression operand)
                memberExpression = operand;
        }

        if (memberExpression == null)
            throw new ArgumentException("Unable to process expression");

        if (memberExpression.Member is PropertyInfo propertyInfo)
        {
            return propertyInfo;
        }

        throw new ArgumentException("Expression does not represent a property.");
    }
}