@using MoonCoreUI.Models

@implements IDisposable

@inject  MoonCoreUiConfiguration Configuration

@if (Loaded)
{
    @ChildContent
}
else
{
    if (UseSkeleton)
    {
        <div class="card placeholder placeholder-wave bg-light w-100 d-flex justify-content-center align-items-center" style="height: @(SkeletonHeight)vw">
            <span class="fs-2 fw-semibold">@(Text)</span>
        </div>
    }
    else if (ShowAsCard)
    {
        <div class="d-flex flex-column flex-center">
            <div class="card card-body">
                <div class="d-flex justify-content-center py-4">
                    <span class="fs-1 spinner-border spinner-border-lg align-middle me-2"></span>
                    <span class="ms-3 fs-5 align-middle">@(Text)</span>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-center py-4">
            <span class="fs-1 spinner-border spinner-border-lg align-middle me-2"></span>
            <span class="ms-3 fs-5 align-middle">@(Text)</span>
        </div>
    }
}

@code
{
    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public bool ShowAsCard { get; set; } = false;

    [Parameter] public Func<LazyLoader, Task> Load { get; set; }

    [Parameter] public string Text { get; set; } = "";

    [Parameter] public bool UseGlobalSettings { get; set; } = true;

    [Parameter] public bool UseSkeleton { get; set; } = false;
    [Parameter] public int SkeletonHeight { get; set; } = 20;

    private bool Loaded = false;
    private CancellationTokenSource Cancellation = new();

    protected override void OnInitialized()
    {
        if(!UseGlobalSettings)
            return;

        UseSkeleton = Configuration.UseSkeletonInLazyLoader;
        SkeletonHeight = Configuration.LazyLoaderSkeletonHeight;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Load.Invoke(this);
            
            Loaded = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task SetText(string text)
    {
        Text = text;
        await InvokeAsync(StateHasChanged);
    }

    // Explanation to preLoadTask:
    // The preLoadTask runs during the reload function, so while the ui is blocked
    // by the loading animation, to modify context before the regular load method gets invoked
    public async Task Reload(Func<LazyLoader, Task>? preLoadTask)
    {
        Loaded = false;
        await InvokeAsync(StateHasChanged);

        if (preLoadTask != null)
            await preLoadTask.Invoke(this);

        await Load.Invoke(this);
        
        Loaded = true;
        await InvokeAsync(StateHasChanged);
    }

    public async Task Reload() => await Reload(preLoadTask: null);

    public void Dispose()
    {
        Cancellation.Cancel();
    }
}