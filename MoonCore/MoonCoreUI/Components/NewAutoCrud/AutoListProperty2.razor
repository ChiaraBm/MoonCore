@typeparam TItem where TItem : class
    @typeparam TForm
    @typeparam TProperty where TProperty : List<TSubItem>
@typeparam TSubItem

@using System.ComponentModel
@using System.Reflection
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.AspNetCore.Components.Forms
@using MoonCoreUI.Components.Forms
@using MoonCore.Abstractions
@using MoonCore.Helpers
@using MoonCoreUI.Attributes
@using MoonCoreUI.Helpers

@inject IServiceProvider ServiceProvider

<div class="@ColCssClasses">
    <label class="form-label">
        @Name
    </label>

    @if (TryGetCasted(out MultiSelectionAttribute _))
    {
        <MultiItemSelect Value="Binder.Class"
                         ValueExpression="@(() => Binder.Class)"
                         Items="Items"
                         DisplayFunc="DisplayFunc"
                         SearchFunc="SearchFunc"
                         IconFunc="IconFunc"/>
    }

    @if (!string.IsNullOrEmpty(Description))
    {
        <div class="form-text fs-6 text-gray-600">
            @Description
        </div>
    }
</div>

@code
{
    [Parameter] public TForm Model { get; set; }
    [Parameter] public PropertyInfo Property { get; set; }
    [Parameter] public bool EnableColumns { get; set; } = false;

    [CascadingParameter] public AutoCrud2<TItem>? AutoCrud { get; set; }

    private string ColCssClasses = "";
    private string Name = "";
    private string Description = "";

    private PropBinder<TProperty> Binder;
    private Attribute[] Attributes;

    private Func<TSubItem, string> DisplayFunc;
    private Func<TSubItem, string> SearchFunc;
    private Func<TSubItem, string>? IconFunc;

    private List<TSubItem> Items = new();

    protected override void OnParametersSet()
    {
        Init();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!TryGetCasted(out MultiSelectionAttribute _))
                return;

            // Create generic type to resolve from di
            var typeToGetByDi = typeof(Repository<>).MakeGenericType(typeof(TSubItem));

            // Resolve generic repo from di
            var repo = ServiceProvider.GetRequiredService(typeToGetByDi);

            if (TryGetCasted(out CustomItemLoaderAttribute loaderAttribute))
            {
                if (AutoCrud == null)
                    return;

                // Check if custom loader exists, if not, skip it
                if (!AutoCrud.Options.CustomItemLoaders.TryGetValue(loaderAttribute.Id, out var customLoader))
                    return;

                // Invoke the loader with the repo as an argument and an expected IEnumerable result
                var iEnumerable = customLoader
                    .GetType()
                    .GetMethods()
                    .First(x => x.Name == "Invoke")
                    .Invoke(customLoader, new[] { repo, AutoCrud.Context.CurrentItem }) as IEnumerable<TSubItem>;

                // Execute db command (see EF ToArray() )
                Items = iEnumerable!.ToList();
            }
            else // Fallback to default loader
            {
                // Invoke the repo get function with the no arguments and an expected IEnumerable result
                var dbSet = repo.GetType().GetMethods().First(x => x.Name == "Get").Invoke(repo, null) as IEnumerable<TSubItem>;

                // Execute db command (see EF ToArray() )
                Items = dbSet!.ToList();
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    private void Init()
    {
        Binder = new(Property, Model!);

        Attributes = Property
            .GetCustomAttributes()
            .ToArray();

        if (TryGetCasted(out DisplayNameAttribute nameAttribute))
            Name = nameAttribute.DisplayName;
        else
            Name = Formatter.ConvertCamelCaseToSpaces(Property.Name);

        if (TryGetCasted(out DescriptionAttribute descriptionAttribute))
            Description = descriptionAttribute.Description;

        if (EnableColumns)
        {
            var columns = 3;

            if (TryGetCasted(out MultiSelectionAttribute _))
                columns = 6;

            ColCssClasses = "col-12 col-md-6 col-xl-" + columns;
        }

        if (TryGetCasted(out MultiSelectionAttribute multiSelectionAttribute))
        {
            if (TryGetCasted(out CustomDisplayFunctionAttribute displayFunctionAttribute) && AutoCrud != null)
            {
                if (AutoCrud.Options.TryGetCastedOption<Func<TSubItem, string>>(
                        options => options.CustomDisplayFunctions,
                        displayFunctionAttribute.Id,
                        out var val))
                {
                    DisplayFunc = val;
                }
            }
            else
                DisplayFunc = FormHelper.GetPropertyExpression<TSubItem>(multiSelectionAttribute.DisplayField);

            if (TryGetCasted(out CustomSearchFunctionAttribute searchFunctionAttribute) && AutoCrud != null)
            {
                if (AutoCrud.Options.TryGetCastedOption<Func<TSubItem, string>>(
                        options => options.CustomSearchFunctions,
                        searchFunctionAttribute.Id,
                        out var val))
                {
                    SearchFunc = val;
                }
            }
            else
                SearchFunc = DisplayFunc = FormHelper.GetPropertyExpression<TSubItem>(multiSelectionAttribute.SearchProp);

            if (!string.IsNullOrEmpty(multiSelectionAttribute.Icon))
                IconFunc = _ => multiSelectionAttribute.Icon;
        }
    }

    private bool TryGetCasted<T>(out T result) where T : class
    {
        result = default!;

        if (Attributes.Length < 1)
            return false;

        var attribute = Attributes.FirstOrDefault(x => x.GetType() == typeof(T));

        if (attribute == null)
            return false;

        if (attribute is not T castedAttribute)
            return false;

        result = castedAttribute;
        return true;
    }
}