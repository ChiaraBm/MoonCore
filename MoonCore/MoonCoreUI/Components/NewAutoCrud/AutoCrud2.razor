@typeparam TItem where TItem : class

@using MoonCore.Abstractions
@using MoonCoreUI.Components.Forms
@using MoonCoreUI.Helpers
@using MoonCoreUI.Services

@inject Repository<TItem> ItemRepository
@inject ToastService ToastService

@if (CustomComponents != null)
{
    <CascadingValue TValue="AutoCrud2<TItem>" Name="Crud" Value="this" IsFixed="true">
        @CustomComponents
    </CascadingValue>
}

@if (CustomPages != null)
{
<CascadingValue TValue="AutoCrud2<TItem>" Name="Crud" Value="this" IsFixed="true">
    @CustomPages
</CascadingValue>
}

@if (Context.State == AutoCrudState.Viewing)
{
    <div class="card card-body mb-7 py-2 px-2">
        <div class="d-flex justify-content-between align-items-center">
            @if (SelectedItems.Count > 0)
            {
                <div>
                    <div class="ms-2 fs-4 fw-semibold">@SelectedItems.Count item(s) selected</div>
                </div>
                <div>
                    @if (SelectionActions != null)
                    {
                        @SelectionActions
                    }
                    
                    <WButton OnClick="StartDelete" CssClasses="btn-danger">
                        <i class="bx bx-sm bx-trash"></i>
                        <span class="ms-1">Delete</span>
                    </WButton>
                </div>
            }
            else
            {
                <div>
                    @if (SearchFunction != null)
                    {
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bx bx-sm bx-search-alt"></i>
                            </span>
                            <input placeholder="Search" class="form-control" @onchange="OnSearchTermChanged">
                        </div>
                    }
                </div>
                <div>
                    @if (ViewToolbar != null)
                    {
                        @ViewToolbar
                    }
                    
                    <button class="btn btn-primary" @onclick="() => SwitchToState(AutoCrudState.Creating)">Create</button>
                </div>
            }
        </div>
    </div>

    <div class="card card-body">
        <div class="mx-3">
            <CrudTable @ref="ViewTable" TItem="TItem" ItemSourceCallback="GetViewSource" OnRefreshed="OnTableRefreshed">
                <ChildContent>
                    <CrudColumn TItem="TItem" HeadCssClasses="w-10px align-middle" CssClasses="w-10px align-middle">
                        <HeadTemplate>
                            <div class="form-check">
                                @if (IsAllSelected)
                                {
                                    <input class="form-check-input" type="checkbox" checked="checked" @onclick="() => ChangeAllSelection(false)">
                                }
                                else
                                {
                                    <input class="form-check-input" type="checkbox" @onclick="() => ChangeAllSelection(true)">
                                }
                            </div>
                        </HeadTemplate>
                        <Template>
                            <div class="form-check">
                                @if (SelectedItems.Contains(context!))
                                {
                                    <input class="form-check-input" type="checkbox" checked="checked" @onclick="() => ChangeSelection(context, false)">
                                }
                                else
                                {
                                    <input class="form-check-input" type="checkbox" @onclick="() => ChangeSelection(context, true)">
                                }
                            </div>
                        </Template>
                    </CrudColumn>

                    @View

                    <CrudColumn TItem="TItem">
                        <Template>
                            <div class="text-end">
                                <a class="me-5" href="#" @onclick:preventDefault @onclick="() => SwitchToState(AutoCrudState.Editing, context)">
                                    <div class="bx bx-edit me-1"></div>
                                    Edit
                                </a>
                            </div>
                        </Template>
                    </CrudColumn>
                </ChildContent>
                
                <NoItemsContent>
                    @if (NoItemsView != null)
                    {
                        @NoItemsView
                    }
                    else
                    {
                        <div class="text-body fw-semibold text-center fs-4 my-3">
                            No items found
                        </div>
                    }
                </NoItemsContent>
                
                <LoadingContent>
                    @if (LoadingView != null)
                    {
                        @LoadingView
                    }
                    else
                    {
                        <div class="text-body fw-semibold text-center fs-4 my-3">
                            Loading
                        </div>
                    }
                </LoadingContent>
            </CrudTable>
        </div>
    </div>
    
    <SmartModal @ref="DeleteModal" CssClasses="modal-dialog-centered">
        <div class="modal-header">
            <h5 class="modal-title">Do you want to delete this item?</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <p class="text-gray-800 fs-5 fw-semibold">
                This action cannot be undone. The data will be deleted and cannot be restored
            </p>
        </div>
        <div class="modal-footer p-3">
            <div class="btn-group w-100">
                <WButton OnClick="FinishDelete" Text="Delete" CssClasses="btn btn-danger w-50 me-3"/>
                <button class="btn btn-secondary w-50" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </SmartModal>
}
else if (Context.State == AutoCrudState.Editing)
{
    @EditRender
}
else if (Context.State == AutoCrudState.Creating)
{
    @CreateRender
}

@code
{
    // Core

    [Parameter] public Func<Repository<TItem>, IEnumerable<TItem>> DataSource { get; set; }
    [Parameter] public Action<AutoCrudOptions2<TItem>>? OnConfigure { get; set; }

    public readonly AutoCrudContext2<TItem> Context = new();
    public readonly AutoCrudOptions2<TItem> Options = new();
    private IEnumerable<TItem> GetSource() => DataSource.Invoke(ItemRepository);

    public readonly Dictionary<string, object> CustomComponentCache = new();
    public readonly Dictionary<string, object> CustomPageCache = new();

    // View

    [Parameter] public RenderFragment? CustomComponents { get; set; }
    [Parameter] public RenderFragment? CustomPages { get; set; }
    [Parameter] public RenderFragment View { get; set; }
    [Parameter] public RenderFragment? NoItemsView { get; set; }
    [Parameter] public RenderFragment? LoadingView { get; set; }
    [Parameter] public RenderFragment? ViewToolbar { get; set; }
    [Parameter] public RenderFragment<List<TItem>>? SelectionActions { get; set; }
    [Parameter] public Func<IEnumerable<TItem>, string, IEnumerable<TItem>>? SearchFunction { get; set; }

    private CrudTable<TItem> ViewTable;

    private string SearchTerm = "";

    private bool IsAllSelected => ViewTable.CurrentItems.Length == SelectedItems.Count && ViewTable.CurrentItems.Length != 0;
    private List<TItem> SelectedItems = new();

    private SmartModal DeleteModal;

    // Edit

    [Parameter] public Type EditForm { get; set; }
    [Parameter] public RenderFragment<TItem>? EditActions { get; set; }
    
    [Parameter] public Type CreateForm { get; set; }

    private RenderFragment EditRender;
    private RenderFragment CreateRender;

    protected override void OnInitialized()
    {
        // Core
        if (DataSource == null)
            throw new ArgumentNullException(nameof(DataSource));

        if (View == null)
            throw new ArgumentNullException(nameof(View));

        Context.State = AutoCrudState.Viewing;

        if (OnConfigure != null)
            OnConfigure.Invoke(Options);

        // Edit
        if (EditForm == null)
            throw new ArgumentNullException(nameof(EditForm));

        var editType = typeof(AutoCrudEdit2<,>).MakeGenericType(typeof(TItem), EditForm);

        EditRender = ComponentHelper.FromType(editType, parameters =>
        {
            parameters.Add("AutoCrud", this);
            parameters.Add("ToolbarAddition", EditActions!); // Ignored as the parameter is nullable
        });

        // Create
        if (CreateForm == null)
            throw new ArgumentNullException(nameof(CreateForm));

        var createType = typeof(AutoCrudCreate2<,>).MakeGenericType(typeof(TItem), CreateForm);

        CreateRender = ComponentHelper.FromType(createType, parameters => { parameters.Add("AutoCrud", this); });
    }

    public async Task Reload()
    {
        if(Context.State != AutoCrudState.Viewing)
            return;

        await ViewTable.Refresh(isSilent: false, fullRefresh: true);
    }

    private IEnumerable<TItem> GetViewSource()
    {
        if (SearchFunction != null && !string.IsNullOrEmpty(SearchTerm))
            return SearchFunction.Invoke(GetSource(), SearchTerm);

        return GetSource();
    }

    private async Task OnSearchTermChanged(ChangeEventArgs args)
    {
        SearchTerm = args.Value?.ToString() ?? "";

        await ViewTable.Refresh(fullRefresh: true);
    }

    private async Task OnTableRefreshed()
    {
        SelectedItems.Clear();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ChangeSelection(TItem item, bool state)
    {
        if (state)
        {
            if (!SelectedItems.Contains(item))
                SelectedItems.Add(item);
        }
        else
        {
            if (SelectedItems.Contains(item))
                SelectedItems.Remove(item);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task ChangeAllSelection(bool state)
    {
        SelectedItems.Clear();

        if (state)
            SelectedItems.AddRange(ViewTable.CurrentItems);

        await InvokeAsync(StateHasChanged);
    }

    public async Task SwitchToState(AutoCrudState state, TItem? currentItem = null)
    {
        Context.State = state;
        Context.CurrentItem = currentItem;

        await InvokeAsync(StateHasChanged);
    }

    private async Task StartDelete() => await DeleteModal.Show();

    private async Task FinishDelete()
    {
        foreach (var item in SelectedItems)
        {
            if (Options.ValidateDelete != null)
                await Options.ValidateDelete.Invoke(item);
        
            if (Options.CustomDelete != null)
                await Options.CustomDelete.Invoke(item);
            else
                ItemRepository.Delete(item);
        }
        
        
        await ToastService.Success("Successfully deleted items");
        
        SelectedItems.Clear();
        await ViewTable.Refresh(fullRefresh: true, isSilent: false);
        await InvokeAsync(StateHasChanged);
    }

    public void AddCustomComponent(string id, object renderCall)
    {
        CustomComponentCache[id] = renderCall;
    }
    
    public void AddCustomPage(string name, object renderCall)
    {
        CustomPageCache[name] = renderCall;
    }
}