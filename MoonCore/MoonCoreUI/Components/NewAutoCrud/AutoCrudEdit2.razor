@typeparam TItem where TItem : class
@typeparam TForm

@using Mappy.Net
@using MoonCore.Abstractions
@using MoonCore.Exceptions
@using MoonCoreUI.Components.Forms
@using MoonCoreUI.Services

@inject Repository<TItem> ItemRepository
@inject ToastService ToastService

<SmartForm Model="Form" OnValidSubmit="OnSubmit">
    <div class="card card-body mb-7 px-2 py-2">
        <div class="d-flex justify-content-between align-items-center">
            <a href="#" class="text-body fs-4" @onclick:preventDefault @onclick="() => AutoCrud.SwitchToState(AutoCrudState.Viewing)">
                <i class="bx bx-md bx-chevron-left align-middle"></i>
                <span class="align-middle">Back</span>
            </a>
            
            <div>
                @if (ToolbarAddition != null)
                {
                    @ToolbarAddition.Invoke(AutoCrud.Context.CurrentItem!)
                }
                
                <button @onclick="StartDelete" type="button" class="btn btn-danger me-2">
                    <i class="bx bx-sm bx-trash"></i>
                    Delete
                </button>

                <button type="submit" class="btn btn-primary">
                    <i class="bx bx-sm bx-save"></i>
                    Update
                </button>
            </div>
        </div>
    </div>

    <CascadingValue Value="AutoCrud">
        <AutoCrudForm2 TItem="TItem" TForm="TForm" Model="Form"/>
    </CascadingValue>
</SmartForm>

<SmartModal @ref="DeleteModal" CssClasses="modal-dialog-centered">
    <div class="modal-header">
        <h5 class="modal-title">Do you want to delete this item?</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    <div class="modal-body">
        <p class="text-gray-800 fs-5 fw-semibold">
            This action cannot be undone. The data will be deleted and cannot be restored
        </p>
    </div>
    <div class="modal-footer p-3">
        <div class="btn-group w-100">
            <WButton OnClick="FinishDelete" Text="Delete" CssClasses="btn btn-danger w-50 me-3"/>
            <button class="btn btn-secondary w-50" data-bs-dismiss="modal">Cancel</button>
        </div>
    </div>
</SmartModal>

@code
{
    [Parameter] public AutoCrud2<TItem> AutoCrud { get; set; }
    [Parameter] public RenderFragment<TItem>? ToolbarAddition { get; set; }

    private TForm Form;
    private SmartModal DeleteModal;

    protected override void OnInitialized()
    {
        Form = Mapper.Map<TForm>(AutoCrud.Context.CurrentItem!);
    }

    private async Task OnSubmit()
    {
        var finalItem = Mapper.Map(AutoCrud.Context.CurrentItem!, Form!);

        if (AutoCrud.Options.ValidateEdit != null)
            await AutoCrud.Options.ValidateEdit.Invoke(finalItem);
        
        if (AutoCrud.Options.CustomEdit != null)
            await AutoCrud.Options.CustomEdit.Invoke(finalItem);
        else
            ItemRepository.Update(finalItem);

        await ToastService.Success("Successfully created item");
        await AutoCrud.SwitchToState(AutoCrudState.Viewing);
    }

    private async Task StartDelete() => await DeleteModal.Show();

    private async Task FinishDelete()
    {
        await DeleteModal.Hide();
        
        try
        {
            if (AutoCrud.Options.ValidateDelete != null)
                await AutoCrud.Options.ValidateDelete.Invoke(AutoCrud.Context.CurrentItem!);
        
            if (AutoCrud.Options.CustomDelete != null)
                await AutoCrud.Options.CustomDelete.Invoke(AutoCrud.Context.CurrentItem!);
            else
                ItemRepository.Delete(AutoCrud.Context.CurrentItem!);

            await ToastService.Success("Successfully deleted item");
            await AutoCrud.SwitchToState(AutoCrudState.Viewing);
        }
        catch (DisplayException e)
        {
            await ToastService.Danger(e.Message);
        }
    }
}