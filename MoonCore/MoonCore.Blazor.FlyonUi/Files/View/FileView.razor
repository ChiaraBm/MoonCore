@using MoonCore.Blazor.FlyonUi.DataTables
@using MoonCore.Helpers
@using MoonCore.Blazor.FlyonUi.Components

<DataTable @ref="Table"
           TItem="FileEntry"
           ItemSource="ItemSource"
           OnClick="OnClick"
           OnContextMenu="OnContextMenu">
    <Configuration>
        @if (ShowIcons)
        {
            <DataTableColumn TItem="FileEntry"
                             Index="0"
                             HeaderCss="w-12 px-2"
                             ColumnCss="w-12 px-2">
                <ColumnTemplate>
                    <div class="flex justify-center">
                        @if (context.IsFolder)
                        {
                            <i class="icon-folder text-primary text-2xl"></i>
                        }
                        else
                        {
                            <i class="icon-file text-warning text-2xl"></i>
                        }
                    </div>
                </ColumnTemplate>
            </DataTableColumn>
        }

        <DataTableColumn TItem="FileEntry"
                         Name="Name"
                         Field="@(x => x.Name)"
                         Index="1"/>

        @if (ShowSize)
        {
            <DataTableColumn TItem="FileEntry"
                             Name="Size"
                             Field="@(x => x.Size)"
                             Index="2"
                             HeaderCss="hidden md:table-cell"
                             ColumnCss="hidden md:table-cell">
                <ColumnTemplate>
                    @if (context.IsFolder)
                    {
                        <span>-</span>
                    }
                    else
                    {
                        <span>
                            @Formatter.FormatSize(context.Size)
                        </span>
                    }
                </ColumnTemplate>
            </DataTableColumn>
        }

        @if (ShowDate)
        {
            <DataTableColumn TItem="FileEntry"
                             Name="Updated at"
                             Field="@(x => x.UpdatedAt)"
                             Index="3"
                             HeaderCss="hidden md:table-cell"
                             ColumnCss="hidden md:table-cell">
                <ColumnTemplate>
                    <span>
                        @Formatter.FormatDate(context.UpdatedAt)
                    </span>
                </ColumnTemplate>
            </DataTableColumn>
        }

        @if (ChildContent != null)
        {
            @ChildContent
        }
    </Configuration>
    <NoItemsIndicator>
        @if (NoFilesContent == null)
        {
            <div class="p-5">
                <IconAlert Title="No files/folders found"
                           Icon="icon-file-stack"
                           Color="text-info">
                    No files and folders found in that directory
                </IconAlert>
            </div>
        }
        else
        {
            @NoFilesContent
        }
    </NoItemsIndicator>
</DataTable>

@code
{
    [Parameter] public Func<Task<FileEntry[]>> Load { get; set; }
    [Parameter] public Func<FileEntry, Task>? OnClick { get; set; }
    [Parameter] public Func<FileEntry, string>? CustomClickLink { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? NoFilesContent { get; set; }
    
    [Parameter] public Func<MouseEventArgs, FileEntry, Task>? OnContextMenu { get; set; }

    [Parameter] public bool ShowIcons { get; set; } = true;
    [Parameter] public bool ShowDate { get; set; } = false;
    [Parameter] public bool ShowSize { get; set; } = false;

    private DataTable<FileEntry> Table;

    private async Task<FileEntry[]> ItemSource()
        => await Load.Invoke();

    public async Task Refresh(bool silent = false) => await Table.Refresh(silent: silent);
}
