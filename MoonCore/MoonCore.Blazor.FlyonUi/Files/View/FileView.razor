@using MoonCore.Blazor.FlyonUi.DataTables
@using MoonCore.Helpers
@using MoonCore.Blazor.FlyonUi.Components

<DataTable @ref="Table"
           TItem="FsEntry"
           ItemSource="ItemSourceAsync"
           OnClick="OnClick"
           OnContextMenu="OnContextMenu">
    <Configuration>
        @if (ShowIcons)
        {
            <DataTableColumn TItem="FsEntry"
                             Index="0"
                             HeaderCss="w-12 px-2"
                             ColumnCss="w-12 px-2">
                <ColumnTemplate>
                    <div class="flex justify-center">
                        @if (context.IsFolder)
                        {
                            <i class="icon-folder text-primary text-2xl"></i>
                        }
                        else
                        {
                            string icon;

                            if (UseDynamicIcons)
                                icon = FileIconHelper.GetByName(context.Name);
                            else
                                icon = "icon-file";
                            
                            <i class="@icon text-warning text-2xl"></i>
                        }
                    </div>
                </ColumnTemplate>
            </DataTableColumn>
        }

        <DataTableColumn TItem="FsEntry"
                         Name="Name"
                         Field="@(x => x.Name)"
                         Index="1"/>

        @if (ShowSize)
        {
            <DataTableColumn TItem="FsEntry"
                             Name="Size"
                             Field="@(x => x.Size)"
                             Index="2"
                             HeaderCss="hidden md:table-cell"
                             ColumnCss="hidden md:table-cell">
                <ColumnTemplate>
                    @if (context.IsFolder)
                    {
                        <span>-</span>
                    }
                    else
                    {
                        <span>
                            @Formatter.FormatSize(context.Size)
                        </span>
                    }
                </ColumnTemplate>
            </DataTableColumn>
        }

        @if (ShowDate)
        {
            <DataTableColumn TItem="FsEntry"
                             Name="Updated at"
                             Field="@(x => x.UpdatedAt)"
                             Index="3"
                             HeaderCss="hidden md:table-cell"
                             ColumnCss="hidden md:table-cell">
                <ColumnTemplate>
                    <span>
                        @Formatter.FormatDate(context.UpdatedAt.DateTime)
                    </span>
                </ColumnTemplate>
            </DataTableColumn>
        }

        @if (ChildContent != null)
        {
            @ChildContent
        }
    </Configuration>
    <NoItemsIndicator>
        @if (NoFilesContent == null)
        {
            <div class="p-5">
                <IconAlert Title="No files/folders found"
                           Icon="icon-file-stack"
                           Color="text-info">
                    No files and folders found in that directory
                </IconAlert>
            </div>
        }
        else
        {
            @NoFilesContent
        }
    </NoItemsIndicator>
</DataTable>

@code
{
    /// <summary>
    /// Callback to retrieve the file entries
    /// </summary>
    [Parameter] public Func<Task<FsEntry[]>> Load { get; set; }
    
    /// <summary>
    /// <b>Optional:</b> Callback which handles when a file is clicked
    /// </summary>
    [Parameter] public Func<FsEntry, Task>? OnClick { get; set; }
    
    /// <summary>
    /// <b>Optional:</b> Custom middle click link provider callback
    /// </summary>
    [Parameter] public Func<FsEntry, string>? CustomClickLink { get; set; }
    
    /// <summary>
    /// <b>Optional:</b> Location to put your configuration into
    /// </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    /// <summary>
    /// <b>Optional:</b> Template to override the default NoFiles UI
    /// </summary>
    [Parameter] public RenderFragment? NoFilesContent { get; set; }
    
    /// <summary>
    /// <b>Optional:</b> Callback for handlng context menu actions
    /// </summary>
    [Parameter] public Func<MouseEventArgs, FsEntry, Task>? OnContextMenu { get; set; }

    /// <summary>
    /// Toggles whether to use icons when displaying files and folders. Default: true
    /// </summary>
    [Parameter] public bool ShowIcons { get; set; } = true;
    
    /// <summary>
    /// Toggles whether to use the <see cref="FileIconHelper"/> when displaying files to determine the best icon. Default: true
    /// </summary>
    [Parameter] public bool UseDynamicIcons { get; set; } = true;
    
    /// <summary>
    /// Toggles whether to show the modification time of a file. Default: false
    /// </summary>
    [Parameter] public bool ShowDate { get; set; } = false;
    
    /// <summary>
    /// Toggles whether to show the size of a file. Default: false
    /// </summary>
    [Parameter] public bool ShowSize { get; set; } = false;

    private DataTable<FsEntry> Table;

    private async Task<FsEntry[]> ItemSourceAsync()
        => await Load.Invoke();

    /// <summary>
    /// Proxy function to refresh the underlying table
    /// </summary>
    /// <param name="silent">Whether to refresh the table without showing a loading animation</param>
    public async Task RefreshAsync(bool silent = false) => await Table.RefreshAsync(silent: silent);
}
