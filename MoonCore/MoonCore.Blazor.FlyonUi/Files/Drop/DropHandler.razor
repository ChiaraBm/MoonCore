@using Microsoft.JSInterop
@using MoonCore.Blazor.FlyonUi.Components

@inject IJSRuntime JsRuntime
@inject DropHandlerService HandlerService

@if (IsEnabled)
{
    <div @ref="DropElement" class="overlay-backdrop pointer-events-none fixed inset-0 overflow-y-auto z-50 bg-base-300/30 @(IsActive ? "opacity-100" : "opacity-0")"
         @ondragenter="OnDragStart"
         @ondragleave="OnDragLeave">
        @if (IsActive)
        {
            <div class="overlay modal modal-middle open opened opacity-100"
                 role="dialog" tabindex="-1" aria-overlay="true">
                <div class="modal-dialog opacity-100">
                    <div class="modal-content bg-transparent">
                        <div class="p-8 border-2 border-dashed border-base-content rounded-lg">
                            <IconAlert Title="Drop files to upload" Color="text-base-content" Icon="icon-files">
                                Drop your files and folders here in order to upload
                            </IconAlert>
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>
}

@code
{
    public bool IsEnabled { get; set; } = false;
    
    private bool IsInitialized = false;
    private bool IsActive => Counter != 0;

    private int Counter = 0;
    private ElementReference DropElement;

    protected override void OnInitialized()
    {
        HandlerService.SetHandler(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsEnabled && !IsInitialized)
            await JsRuntime.InvokeVoidAsync("moonCore.dropzone.init", DropElement, DotNetObjectReference.Create(this));
    }

    public async Task Enable()
    {
        IsEnabled = true;
        IsInitialized = false;
        await InvokeAsync(StateHasChanged);
    }

    public async Task Disable()
    {
        IsEnabled = false;
        await InvokeAsync(StateHasChanged);
    }

    #region Drag Handlers
    
    private async Task OnDragStart()
    {
        Counter++;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnDragLeave()
    {
        Counter--;
        await InvokeAsync(StateHasChanged);
    }
    
    #endregion
}
