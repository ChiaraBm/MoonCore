@using MoonCore.Blazor.FlyonUi.Ace
@using MoonCore.Blazor.FlyonUi.Alerts
@using MoonCore.Blazor.FlyonUi.Components
@using MoonCore.Blazor.FlyonUi.Toasts

@inject AlertService AlertService
@inject ToastService ToastService

<div class="card card-body flex flex-row justify-between items-center p-2 mb-5">
    <div class="flex items-center text-base-content">
        <i class="icon-file-text text-lg ms-2 me-1.5"></i>
        <span>@FileName</span>
    </div>
    <div>
        <WButton OnClick="SaveAsync" CssClasses="btn btn-primary">Save</WButton>
        <button @onclick="CloseAsync" class="btn btn-error">Close</button>
    </div>
</div>

<CodeEditor @ref="Editor" InitialContent="@Content" OnConfigure="OnConfigure" />

@code
{
    /// <summary>
    /// Content of the file to put into the editor
    /// </summary>
    [Parameter] public string Content { get; set; }
    
    /// <summary>
    /// Callback which wll be invoked when the user wants to save the file
    /// </summary>
    [Parameter] public Func<string, Task> OnSave { get; set; }
    
    /// <summary>
    /// Callback which will be invoked when the user wants to close the file
    /// </summary>
    [Parameter] public Func<Task> OnClose { get; set; }
    
    /// <summary>
    /// File name of the opened file to determine the syntax highlighting from
    /// </summary>
    [Parameter] public string FileName { get; set; }

    private CodeEditor Editor;

    private void OnConfigure(CodeEditorOptions options)
    {
        options.Mode = $"ace/mode/{CodeEditorModeHelper.GetModeFromFile(FileName)}";
    }

    private async Task SaveAsync(WButton _)
    {
        var editedContent = await Editor.GetValueAsync();
        await OnSave.Invoke(editedContent);

        await ToastService.SuccessAsync("Successfully saved file");

        // Update the "initial" content field so the
        // unsaved changes popup won't trigger when closing after saving
        Content = editedContent;
    }

    private async Task CloseAsync()
    {
        var editedContent = await Editor.GetValueAsync();

        if (editedContent != Content)
        {
            await AlertService.ConfirmDangerAsync(
                "Unsaved changes",
                "You have unsaved changes to the file. You you really want to close the editor? Changes will be lost",
                async () => await OnClose.Invoke()
            );
        }
        else
            await OnClose.Invoke();
    }
}