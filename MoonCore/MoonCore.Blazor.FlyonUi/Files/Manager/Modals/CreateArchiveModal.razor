@using System.ComponentModel.DataAnnotations
@using MoonCore.Blazor.FlyonUi.Components
@using MoonCore.Blazor.FlyonUi.Exceptions
@using MoonCore.Blazor.FlyonUi.Files.Manager.Abstractions
@using MoonCore.Blazor.FlyonUi.Forms
@using MoonCore.Helpers

@inherits MoonCore.Blazor.FlyonUi.Modals.Components.BaseModal

<HandleForm @ref="HandleForm" Model="Form" OnValidSubmit="HandleSubmit">
    <div class="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-primary">
        <i class="icon-archive text-primary-content text-xl"></i>
    </div>
    <div class="mt-3 text-center sm:mt-5">
        <h3 class="text-lg font-semibold leading-6 text-base-content" id="modal-title">
            @Title
        </h3>
        <div class="mt-2">
            <InputItem TItem="ArchiveFormat"
                       DisplayField="@(x => x.DisplayName)"
                       ItemSource="ItemSource"
                       Value="SelectedFormat"
                       ValueChanged="OnFormatChanged"/>
        </div>
        <div class="mt-2">
            <input class="input" @bind="Form.Name" placeholder="Enter a file name"/>
        </div>
    </div>
    <div class="mt-5 sm:mt-6 flex justify-center">
        <button @onclick="Hide" type="button" class="btn btn-secondary me-2">
            Cancel
        </button>
        <WButton IsWorking="HandleForm.IsSubmitting" Type="submit">
            Create
        </WButton>
    </div>
</HandleForm>

@code
{
    [Parameter] public string Title { get; set; } = "Creating archive";
    [Parameter] public ArchiveFormat[] Formats { get; set; }
    [Parameter] public required Func<string, ArchiveFormat, Task> OnSubmit { get; set; }

    private FormData Form = new();
    private HandleForm HandleForm;
    private ArchiveFormat? SelectedFormat;

    protected override void OnInitialized()
    {
        SelectedFormat = Formats.FirstOrDefault();

        // If we have a format with an extension defined we create a nice default name
        if (SelectedFormat is { Extensions.Length: > 0 })
            Form.Name = $"archive-{DateTime.Now:yyyy-MM-dd_HH-mm-ss}.{SelectedFormat.Extensions[0]}";
    }

    record FormData
    {
        [Required(ErrorMessage = "You need to provide a file name")]
        public string Name { get; set; }
    }

    private async Task HandleSubmit()
    {
        if (SelectedFormat == null)
            throw new DisplayException("You need to select an archive format");
        
        await OnSubmit.Invoke(Form.Name, SelectedFormat);
        await Hide();
    }

    private Task<ArchiveFormat[]> ItemSource()
        => Task.FromResult(Formats);

    private async Task OnFormatChanged(ArchiveFormat? newFormat)
    {
        if (newFormat != null && newFormat.Extensions.Length != 0 && SelectedFormat != null && !string.IsNullOrEmpty(Form.Name))
        {
            var oldName = Form.Name;

            foreach (var extension in SelectedFormat.Extensions)
            {
                if (oldName.EndsWith(extension))
                {
                    oldName = Formatter.ReplaceEnd(oldName, extension, "");
                    break;
                }
            }

            Form.Name = $"{oldName}{newFormat.Extensions[0]}";
        }

        SelectedFormat = newFormat;

        await InvokeAsync(StateHasChanged);
    }
}