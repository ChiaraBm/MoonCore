@using System.ComponentModel.DataAnnotations
@using MoonCore.Blazor.FlyonUi.Components

@inherits MoonCore.Blazor.FlyonUi.Modals.Components.BaseModal

<div class="p-5">
    <div class="flex items-center gap-4">
        <div class="avatar avatar-placeholder max-sm:hidden">
            <div class="border-base-content/20 rounded-box w-13 border-1">
                <span class="icon-folder text-xl"></span>
            </div>
        </div>
        <div class="space-y-1">
            <h3 class="text-base-content text-2xl font-semibold">Create directory</h3>
            <p class="text-base-content/80">Create a new directory at the current location</p>
        </div>
    </div>
    <div class="mt-5">
        <HandleForm @ref="HandleForm" Model="Form" OnValidSubmit="HandleSubmitAsync">
            <div class="mt-2">
                <label class="label-text">Directory name</label>
                <input class="input" @bind="Form.Name" placeholder="Enter a name"/>
            </div>
        </HandleForm>
    </div>
    <div class="mt-5 flex justify-end">
        <button @onclick="HideAsync" type="button" class="btn btn-secondary me-2">
            Cancel
        </button>
        <WButton OnClick="HandleForm.SubmitAsync">
            Create
        </WButton>
    </div>
</div>

@code
{
     /// <summary>
    /// Define the default value of the new directory
    /// </summary>
    [Parameter] public string InitialName { get; set; } = "";
    
    /// <summary>
    /// Callback which will be invoked when the user specified a directory name
    /// </summary>
    [Parameter] public required Func<string, Task> OnSubmit { get; set; }

    private FormData Form = new();
    private HandleForm HandleForm;

    protected override void OnInitialized()
    {
        Form.Name = InitialName;
    }

    record FormData
    {
        [Required(ErrorMessage = "You need to provide a name")]
        public string Name { get; set; }
    }

    private async Task HandleSubmitAsync()
    {
        await OnSubmit.Invoke(Form.Name);
        await HideAsync();
    }
}
