@using MoonCore.Blazor.FlyonUi.Components
@using MoonCore.Blazor.FlyonUi.Files.View
@using MoonCore.Helpers
@using MoonCore.Blazor.FlyonUi.DataTables
@using MoonCore.Blazor.FlyonUi.Files.Manager.Partials
@inherits MoonCore.Blazor.FlyonUi.Modals.Components.BaseModal

<div class="p-5">
    <div class="flex items-center gap-4">
        <div class="avatar avatar-placeholder max-sm:hidden">
            <div class="border-base-content/20 rounded-box w-13 border-1">
                <span class="icon-folder-input text-xl"></span>
            </div>
        </div>
        <div class="space-y-1">
            <h3 class="text-base-content text-2xl font-semibold">Move item(s)</h3>
            <p class="text-base-content/80">Select a location to move the item(s) to</p>
        </div>
    </div>

    <div class="mt-5">
        <PathBreadcrumb Path="@Path" OnClick="SetPathAsync"/>
    </div>

    <div class="mt-3 border-base-content/20 bg-base-200 border-2 rounded-lg overflow-y-auto">
        <FileView @ref="FileView" Load="LoadAsync" OnClick="OnClick">
            <DataTableRow TItem="FsEntry" Index="int.MinValue">
                <Template>
                    @if (Path != "/")
                    {
                        <td @onclick="GoUpAsync" scope="row" colspan="99999"
                            class="py-1.5 px-3 text-left font-normal cursor-pointer">
                            <div class="flex flex-row items-center">
                                <i class="icon-folder-up text-accent text-2xl me-5"></i>
                                <div>Go up</div>
                            </div>
                        </td>
                    }
                </Template>
            </DataTableRow>
        </FileView>
    </div>
    <div class="mt-5 flex justify-end">
        <button @onclick="HideAsync" type="button" class="btn btn-secondary me-2">
            Cancel
        </button>
        <WButton OnClick="_ => SubmitAsync()">
            Select
        </WButton>
    </div>
</div>

@code
{
    /// <summary>
    /// <see cref="IFsAccess"/> to use for acessing the folder structure in order to allow the user to browse for the move target
    /// </summary>
    [Parameter] public IFsAccess FsAccess { get; set; }
    
    /// <summary>
    /// Initial path where the move modal will start from
    /// </summary>
    [Parameter] public string InitialPath { get; set; }
    
    /// <summary>
    /// Callback with the selected path where the move operation should move to
    /// </summary>
    [Parameter] public Func<string, Task> OnSubmit { get; set; }

    private string Path;
    private FileView FileView;

    protected override Task OnInitializedAsync()
    {
        Path = InitialPath;

        return Task.CompletedTask;
    }

    private async Task<FsEntry[]> LoadAsync()
    {
        var items = await FsAccess.ListAsync(Path);

        return items
            .OrderByDescending(x => x.IsFolder)
            .ThenBy(x => x.Name)
            .ToArray();
    }

    private async Task OnClick(FsEntry entry)
    {
        if (!entry.IsFolder)
            return;

        Path = UnixPath.Combine(Path, entry.Name);

        await FileView.RefreshAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetPathAsync(string path)
    {
        Path = path;

        await FileView.RefreshAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task GoUpAsync()
    {
        Path = UnixPath.GetFullPath(
            UnixPath.Combine(Path, "..")
        );

        await FileView.RefreshAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task SubmitAsync()
    {
        await OnSubmit.Invoke(Path);
        await HideAsync();
    }
}
