<div class="input grow">
    @if (OnClick == null)
    {
        <div class="icon-house text-base-content/70 my-auto shrink-0"></div>
    }
    else
    {
        <a href="#"
           @onclick="@(_ => OnClick.Invoke("/"))"
           @onclick:preventDefault
           class="icon-house text-base-content/70 hover:text-base-content my-auto shrink-0"></a>
    }
   
    <div class="flex items-center grow">
        @{
            var path = Path;
            var pathParts = path.Split("/", StringSplitOptions.RemoveEmptyEntries);

            var isOverflow = pathParts.Length > 3;
            var pathPrefix = isOverflow ? string.Join('/', pathParts.Take(pathParts.Length - 3)) : string.Empty;
            var parts = isOverflow ? pathParts.TakeLast(3).ToArray() : pathParts;
        }

        @if (isOverflow)
        {
            <span class="text-sm font-medium text-base-content/70 ms-1">
                ...
            </span>
        }

        @for (var i = 0; i < parts.Length; i++)
        {
            var pathName = parts[i];
            var itemPath = string.Join("/", parts.Take(i + 1));
            var currentPath = isOverflow ? pathPrefix + "/" + itemPath : itemPath;

            <i class="text-base-content/60 mx-1 icon-chevron-right"></i>

            if (parts.Length == 1 || i == parts.Length - 1 || OnClick == null)
            {
                <div class="text-sm font-medium text-base-content/70 ms-1">
                    @pathName
                </div>
            }
            else
            {
                <div @onclick="() => OnClick.Invoke(currentPath)"
                     @onclick:preventDefault
                     class="text-sm cursor-pointer font-medium text-base-content/70 hover:text-base-content ms-1">
                    @pathName
                </div>
            }
        }
    </div>
</div>

@code
{
    /// <summary>
    /// Path to show as breadcrumb
    /// </summary>
    [Parameter] public string Path { get; set; }
    
    /// <summary>
    /// <b>Optional:</b> Callback which gets invoked when a part of the breadcrumb is clicked with the full path to the item
    /// </summary>
    [Parameter] public Func<string, Task>? OnClick { get; set; }
    
    /// <summary>
    /// <b>Optional:</b> Provider for a custom link for the middle click action for the breadcrumbs
    /// </summary>
    [Parameter] public Func<string, string>? CustomClickLink { get; set; }
}