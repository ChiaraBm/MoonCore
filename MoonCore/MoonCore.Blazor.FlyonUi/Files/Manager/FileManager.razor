@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using MoonCore.Blazor.FlyonUi.Alerts
@using MoonCore.Blazor.FlyonUi.Files.View
@using MoonCore.Blazor.FlyonUi.DataTables
@using MoonCore.Blazor.FlyonUi.Files.Manager.Partials
@using MoonCore.Blazor.FlyonUi.Modals
@using MoonCore.Blazor.FlyonUi.Toasts
@using MoonCore.Blazor.FlyonUi.Components

@inject ModalService ModalService
@inject ToastService ToastService
@inject ILogger<FileManager> Logger
@inject DropHandlerService DropHandlerService
@inject AlertService AlertService

@implements IAsyncDisposable

<FileManagerHeader CurrentPath="@CurrentPath"
                   OnBreadcrumbClick="SetPath"
                   OnHomeClick="@(() => SetPath("/"))"
                   OnRefreshClick="() => FileView.Refresh()"
                   OnNewFileClick="CreateNewFile"
                   OnNewFolderClick="CreateNewDirectory"
                   OnFileSelected="HandleFileUpload"
                   ShowSelectionItems="@(SelectedEntries.Length > 0)"
                   OnDeleteClick="DeleteSelection"
                   OnMoveClick="MoveSelection"/>

<div class="mt-5">
    <FileView @ref="FileView" Load="Load" ShowDate="true" ShowSize="true" OnClick="OnClick"
              CustomClickLink="CustomClickLink" OnContextMenu="OnContextMenu">
        <ChildContent>
            <DataTableRow TItem="FileEntry" Index="int.MinValue">
                <Template>
                    @if (CurrentPath != "/")
                    {
                        <td @onclick="GoUp" scope="row" colspan="99999"
                            class="py-1.5 px-3 text-left font-normal cursor-pointer">
                            <div class="flex flex-row items-center">
                                <i class="icon-folder-up text-accent text-2xl me-5"></i>
                                <div>Go up</div>
                            </div>
                        </td>
                    }
                </Template>
            </DataTableRow>

            <Selection TItem="FileEntry" OnSelectionChanged="OnSelectionChanged"/>
            <DataTableColumn TItem="FileEntry" Index="int.MaxValue">
                <ColumnTemplate>
                    <div class="flex justify-end me-1.5">
                        <a href="#" @onclick="e => OnContextMenu(e.ClientX - 215, e.ClientY, context)" @onclick:preventDefault @onclick:stopPropagation>
                            <i class="icon-ellipsis text-lg"></i>
                        </a>
                    </div>
                </ColumnTemplate>
            </DataTableColumn>
        </ChildContent>
    </FileView>
</div>

<ContextMenu @ref="ContextMenu">
    <button type="button" class="dropdown-item">
        <i class="icon-cloud-download text-primary text-lg"></i>
        Download
    </button>
    <button type="button" class="dropdown-item">
        <i class="icon-folder-archive text-warning text-lg"></i>
        Archive
    </button>
    <button type="button" class="dropdown-item">
        <i class="icon-folder-pen text-accent text-lg"></i>
        Rename
    </button>
    <button @onclick="MoveViaContext" type="button" class="dropdown-item">
        <i class="icon-folder-input text-primary text-lg"></i>
        Move
    </button>
    <button @onclick="DeleteViaContext" type="button" class="dropdown-item">
        <i class="icon-trash-2 text-error text-lg"></i>
        Delete
    </button>
</ContextMenu>

@code
{
    
    [Parameter] public IFileAccess FileAccess { get; set; }
    [Parameter] public long UploadLimit { get; set; } = -1;

    
    public FileView FileView { get; private set; }

    private ContextMenu ContextMenu;
    
    protected override async Task OnInitializedAsync()
    {
        await InitializeUpload();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)
            return;

        await LateInitializeUpload();
    }

    public async ValueTask DisposeAsync()
    {
        DropHandlerService.OnDropped -= HandleFileDrop;
        
        try
        {
            await DropHandlerService.Disable();
        }
        catch (JSException)
        {
            // Ignored
        }
    }
}
