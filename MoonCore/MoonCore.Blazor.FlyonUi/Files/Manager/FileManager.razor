@using MoonCore.Blazor.FlyonUi.Files.View
@using MoonCore.Blazor.FlyonUi.DataTables
@using MoonCore.Helpers

<FileManagerHeader CurrentPath="@CurrentPath"
                   OnBreadcrumbClick="SetPath"
                   OnHomeClick="@(() => SetPath("/"))"
                   OnRefreshClick="() => FileView.Refresh()"/>

<div class="mt-5">
    <FileView @ref="FileView" Load="Load" ShowDate="true" ShowSize="true" OnClick="OnClick"
              CustomClickLink="CustomClickLink">
        <ChildContent>
            <DataTableRow TItem="FileEntry" Index="int.MinValue">
                <Template>
                    @if (CurrentPath != "/")
                    {
                        <td @onclick="GoUp" scope="row" colspan="99999"
                            class="py-1.5 px-3 text-left font-normal cursor-pointer">
                            <div class="flex flex-row items-center">
                                <i class="icon-folder-up text-accent text-2xl me-5"></i>
                                <div>Go up</div>
                            </div>
                        </td>
                    }
                </Template>
            </DataTableRow>

            <Selection TItem="FileEntry" OnSelectionChanged="OnSelectionChanged"/>
            <DataTableColumn TItem="FileEntry" Index="int.MaxValue">
                <ColumnTemplate>
                    <div class="flex justify-end me-1.5">
                        <a href="#" @onclick:preventDefault @onclick:stopPropagation>
                            <i class="icon-ellipsis text-lg"></i>
                        </a>
                    </div>
                </ColumnTemplate>
            </DataTableColumn>
        </ChildContent>
    </FileView>
</div>

@code
{
    [Parameter] public IFileAccess FileAccess { get; set; }

    private string CurrentPath = "/";
    private FileView FileView;

    private async Task<FileEntry[]> Load()
    {
        var items = await FileAccess.List(CurrentPath);

        return items
            .OrderByDescending(x => x.IsFolder)
            .ThenBy(x => x.Name)
            .ToArray();
    }

    private async Task OnClick(FileEntry fileEntry)
    {
        if (fileEntry.IsFolder)
        {
            CurrentPath = UnixPath.Combine(CurrentPath, fileEntry.Name);

            await FileView.Refresh();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task GoUp()
    {
        CurrentPath = UnixPath.GetFullPath(
            UnixPath.Combine(CurrentPath, "..")
        );

        await FileView.Refresh();
    }

    private string CustomClickLink(FileEntry arg) => $"/files?path=/{arg.Name}";

    private Task OnSelectionChanged(FileEntry[] arg)
    {
        return Task.CompletedTask;
    }

    private async Task SetPath(string path)
    {
        CurrentPath = path;
        
        await FileView.Refresh();
        await InvokeAsync(StateHasChanged);
    }
}
