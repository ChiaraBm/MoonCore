@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using MoonCore.Blazor.FlyonUi.Files.View
@using MoonCore.Blazor.FlyonUi.DataTables
@using MoonCore.Blazor.FlyonUi.Files.Manager.Partials
@using MoonCore.Blazor.FlyonUi.Modals
@using MoonCore.Blazor.FlyonUi.Toasts
@using MoonCore.Blazor.FlyonUi.Components
@using MoonCore.Blazor.FlyonUi.Files.Manager.Abstractions

@inject ModalService ModalService
@inject ToastService ToastService
@inject ILogger<FileManager> Logger
@inject DropHandlerService DropHandlerService

@inject IEnumerable<IFileOperation> InjectedOperations
@inject IEnumerable<IFileOpenOperation> InjectedOpenOperations
@inject IEnumerable<IToolbarOperation> InjectedToolbarOperations

@implements IAsyncDisposable
@implements IFileManager

<FileManagerHeader CurrentPath="@CurrentPath"
                   OnBreadcrumbClick="SetPath"
                   OnHomeClick="@(() => SetPath("/"))"
                   OnRefreshClick="() => FileView.Refresh()"
                   OnFileSelected="HandleFileUpload"
                   ShowSelectionItems="@(SelectedEntries.Length > 0)"
                   SelectionOperations="SingleFileOperations"
                   OnSelectionClicked="RunSelectionOperation"
                   ToolbarOperations="ToolbarOperations"
                   OnToolbarClicked="RunToolbarOperation"/>

<div class="mt-5">
    <FileView @ref="FileView" Load="Load" ShowDate="true" ShowSize="true" OnClick="OnClick"
              CustomClickLink="CustomClickLink" OnContextMenu="OnContextMenu">
        <ChildContent>
            <DataTableRow TItem="FileEntry" Index="int.MinValue">
                <Template>
                    @if (CurrentPath != "/")
                    {
                        <td @onclick="GoUp" scope="row" colspan="99999"
                            class="py-1.5 px-3 text-left font-normal cursor-pointer">
                            <div class="flex flex-row items-center">
                                <i class="icon-folder-up text-accent text-2xl me-5"></i>
                                <div>Go up</div>
                            </div>
                        </td>
                    }
                </Template>
            </DataTableRow>

            <Selection TItem="FileEntry" OnSelectionChanged="OnSelectionChanged"/>
            <DataTableColumn TItem="FileEntry" Index="int.MaxValue">
                <ColumnTemplate>
                    <div class="flex justify-end me-1.5">
                        <a href="#" @onclick="e => OnContextMenu(e.ClientX - 215, e.ClientY, context)" @onclick:preventDefault @onclick:stopPropagation>
                            <i class="icon-ellipsis text-lg"></i>
                        </a>
                    </div>
                </ColumnTemplate>
            </DataTableColumn>
        </ChildContent>
    </FileView>
</div>

<ContextMenu @ref="ContextMenu">
    @foreach (var operation in FileOperations)
    {
        <button @onclick="_ => RunContextOperation(operation)" type="button" class="dropdown-item">
            <i class="@(operation.Icon) @(operation.ContextCss) text-lg"></i>
            @operation.Name
        </button>
    }
</ContextMenu>

@code
{
    
    [Parameter] public IFileAccess FileAccess { get; set; }
    [Parameter] public long UploadLimit { get; set; } = -1;
    
    public FileView FileView { get; private set; }

    private ContextMenu ContextMenu;

    private IFileOperation[] FileOperations;
    private IFileOperation[] SingleFileOperations;
    private IToolbarOperation[] ToolbarOperations;
    private IFileOpenOperation[] OpenOperations;
    
    protected override async Task OnInitializedAsync()
    {
        FileOperations = InjectedOperations.OrderByDescending(x => x.Order).ToArray();
        SingleFileOperations = FileOperations.Where(x => !x.OnlySingleFile).ToArray();
        OpenOperations = InjectedOpenOperations.OrderByDescending(x => x.Order).ToArray();
        ToolbarOperations = InjectedToolbarOperations.OrderByDescending(x => x.Order).ToArray();
        
        await InitializeUpload();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)
            return;

        await LateInitializeUpload();
    }

    public async ValueTask DisposeAsync()
    {
        DropHandlerService.OnDropped -= HandleFileDrop;
        
        try
        {
            await DropHandlerService.Disable();
        }
        catch (JSException)
        {
            // Ignored
        }
    }

    public Task Refresh()
        => FileView.Refresh();

    public Task CloseOpenScreen()
    {
        throw new NotImplementedException();
    }
}
