@using Microsoft.AspNetCore.Components.Rendering
@using MoonCore.Blazor.FlyonUi.Components
@typeparam TGridItem

<CascadingValue TValue="DataGrid<TGridItem>" Value="this" IsFixed="true">
    @ChildContent
</CascadingValue>

@if (IsInitialized)
{
    if (EnableFiltering)
    {
        <div class="flex flex-row justify-end items-center mb-3">
            @if (EnableLiveFiltering)
            {
                <form class="flex flex-row" @onsubmit="_ => FilterAsync()">
                    <div class="join max-w-sm">
                        <input @oninput="e => FilterAsync(e)" class="input join-item" type="text"
                               placeholder="Search..."/>
                        <button type="submit" class="btn btn-square btn-primary join-item">
                            <i class="icon-search"></i>
                        </button>
                    </div>
                </form>
            }
            else
            {
                <form class="flex flex-row" @onsubmit="_ => FilterAsync()">
                    <div class="join max-w-sm">
                        <input @bind="FilterInput" class="input join-item" type="text" placeholder="Search..."/>
                        <button type="submit" class="btn btn-square btn-secondary join-item">
                            <i class="icon-search"></i>
                        </button>
                    </div>
                </form>
            }

            @ToolbarItemRender
        </div>
    }
    else if (ToolbarItems.Length > 0)
    {
        <div class="flex flex-row justify-end items-center mb-3">
            <div>
                @ToolbarItemRender
            </div>
        </div>
    }

    <div class="overflow-x-auto rounded-lg">
        <table class="table min-w-full bg-base-100 text-sm">
            <thead class="font-bold text-sm">
            <tr class="border-0 bg-base-200/50">
                @HeaderRender
            </tr>
            </thead>
            <tbody>

            @if (IsLoadCompleted)
            {
                if (IsLoadFailed)
                {
                    <tr>
                        <td colspan="99999">
                            <div class="flex justify-center items-center my-3">
                                <ErrorStateDisplay Exception="LoadException"/>
                            </div>
                        </td>
                    </tr>
                }
                else
                {
                    if (Items.Length == 0)
                    {
                        <tr>
                            <td colspan="99999">
                                @if (NoItemsContent == null)
                                {
                                    <div class="my-5">
                                        <div class="text-center">
                                            <h3 class="mt-2 font-semibold text-base-content text-lg">
                                                ¯\_(ツ)_/¯
                                            </h3>
                                            <div class="text-base text-base-content/80">No items could be found</div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    @NoItemsContent
                                }
                            </td>
                        </tr>
                    }
                    else
                    {
                        @RowsRender

                        foreach (var item in Items)
                        {
                            if (ColumnsContainer == null)
                            {
                                <tr>
                                    @CellsRender.Invoke(item)
                                </tr>
                            }
                            else
                            {
                                @ColumnsContainer.Invoke(CellsRender.Invoke(item), item)
                            }
                        }
                    }
                }
            }
            else
            {
                <tr>
                    <td colspan="99999">
                        <div class="flex justify-center items-center my-5">
                            <Spinner/>
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    if (EnablePagination)
    {
        var nextCount = StartIndex + 1 + Count;

        <div class="flex items-center justify-between gap-3 mt-3 max-md:flex-wrap max-md:justify-center">
            <div class="text-sm text-base-content/80">
                Showing
                @(TotalCount == 0 ? 0 : StartIndex + 1)
                to
                @(nextCount > TotalCount ? TotalCount : StartIndex + Count)
                of
                @(TotalCount)
            </div>
            <div class="flex items-center space-x-1">
                <select @onchange="UpdatePaginationAsync" class="select select-sm">
                    @foreach (var pageSize in PageSizes)
                    {
                        <option value="@pageSize">
                            @pageSize
                        </option>
                    }
                </select>
                @if (StartIndex == 0)
                {
                    <button type="button" class="btn btn-text btn-circle btn-sm disabled" disabled="disabled">
                        <span class="icon-chevrons-left"></span>
                        <span class="sr-only">Start</span>
                    </button>

                    <button type="button" class="btn btn-text btn-circle btn-sm disabled" disabled="disabled">
                        <span class="icon-chevron-left"></span>
                        <span class="sr-only">Previous</span>
                    </button>
                }
                else
                {
                    <button @onclick="NavigateStartAsync" type="button" class="btn btn-text btn-circle btn-sm">
                        <span class="icon-chevrons-left"></span>
                        <span class="sr-only">Start</span>
                    </button>

                    <button @onclick="() => NavigateAsync(-Count)" type="button" class="btn btn-text btn-circle btn-sm">
                        <span class="icon-chevron-left"></span>
                        <span class="sr-only">Previous</span>
                    </button>
                }
                @if (nextCount > TotalCount)
                {
                    <button type="button" class="btn btn-text btn-circle btn-sm disabled" disabled="disabled">
                        <span class="sr-only">Next</span>
                        <span class="icon-chevron-right"></span>
                    </button>

                    <button type="button" class="btn btn-text btn-circle btn-sm disabled" disabled="disabled">
                        <span class="icon-chevrons-right"></span>
                        <span class="sr-only">End</span>
                    </button>
                }
                else
                {
                    <button @onclick="() => NavigateAsync(Count)" type="button" class="btn btn-text btn-circle btn-sm">
                        <span class="sr-only">Next</span>
                        <span class="icon-chevron-right"></span>
                    </button>

                    <button @onclick="NavigateEndAsync" type="button" class="btn btn-text btn-circle btn-sm">
                        <span class="icon-chevrons-right"></span>
                        <span class="sr-only">End</span>
                    </button>
                }
            </div>
        </div>
    }
}

@code
{
    private void RenderAndCombineHeader(RenderTreeBuilder __builder)
    {
        foreach (var column in Columns)
            column.RenderHeader(__builder);
    }

    private void RenderAndCombineCells(RenderTreeBuilder __builder, TGridItem item)
    {
        foreach (var column in Columns)
            column.RenderCell(__builder, item);
    }

    private void RenderAndCombineRows(RenderTreeBuilder __builder)
    {
        foreach (var row in Rows)
            row.RenderContent(__builder);
    }

    private void RenderAndCombineToolbarItems(RenderTreeBuilder __builder)
    {
        foreach (var toolbarItem in ToolbarItems)
            toolbarItem.RenderContent(__builder);
    }
}
