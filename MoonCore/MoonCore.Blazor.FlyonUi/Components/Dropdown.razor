<div class="dropdown relative inline-flex @(Show ? "open" : "")">
    <a href="#" @onclick="ToggleAsync" @onclick:preventDefault>
        @Activator
    </a>
    <div @ref="Reference" @onclick="OnFocusOutDelayed" class="dropdown-menu dropdown-open:opacity-100 block absolute @Align mt-12 w-56 origin-top-left z-150" role="menu" aria-orientation="vertical" aria-labelledby="dropdown-default">
        @Content
    </div>
</div>

@if (Show)
{
    <div @onclick="OnFocusOut" class="overlay-backdrop transition duration-300 fixed inset-0 overflow-y-auto z-70"></div>
}

@code
{
    /// <summary>
    /// Element content for the activator. Used for opening the dropdown. Put a button or simular here
    /// </summary>
    [Parameter] public RenderFragment Activator { get; set; }
    
    /// <summary>
    /// Content of the dropdown
    /// </summary>
    [Parameter] public RenderFragment Content { get; set; }
    
    /// <summary>
    /// CSS class for alignment. By default, <b>left-0</b> is used
    /// </summary>
    [Parameter] public string Align { get; set; } = "left-0";

    private bool Show = false;
    private ElementReference Reference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!Show)
            return;

        await Reference.FocusAsync();
    }

    private async Task ToggleAsync()
    {
        Show = !Show;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnFocusOutDelayed()
    {
        try
        {
            await Task.Delay(150);
            await OnFocusOut();
        }
        catch (TaskCanceledException)
        {
        }
    }
    
    private async Task OnFocusOut()
    {
        Show = false;
        await InvokeAsync(StateHasChanged);
    }
}
