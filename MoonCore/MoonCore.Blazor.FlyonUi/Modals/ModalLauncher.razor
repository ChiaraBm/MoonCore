@using MoonCore.Blazor.FlyonUi.Modals.Components
@using MoonCore.Helpers

@inject ModalService ModalService

@if (Modals.Count > 0)
{
    var i = 0;

    foreach (var modal in Modals)
    {
        <div @onclick="HandleOutOfFocusClickAsync"
             class="overlay-backdrop transition duration-300 fixed inset-0 bg-base-300/50 overflow-y-auto"
             style="z-index: @(i + 100)">
        </div>

        <div class="overlay modal transition-all transform modal-middle z-50 open opened opacity-100"
             role="dialog"
             tabindex="-1"
             aria-overlay="true"
             style="z-index: @(i + 101)">
            <div class="modal-dialog overlay-open:opacity-100 overlay-open:duration-50 @modal.Size">
                <div class="modal-content overflow-y-auto">
                    @modal.Component
                </div>
            </div>
        </div>
        
        i += 2;
    }


    @* class="sm:max-w-md sm:max-w-lg sm:max-w-xl sm:max-w-2xl sm:max-w-3xl sm:max-w-4xl sm:max-w-5xl sm:max-w-6xl sm:max-w-7xl" *@
}

@code
{
    private ConcurrentList<ModalItem> Modals = new();

    protected override void OnInitialized()
    {
        ModalService.SetLauncher(this);
    }

    /// <summary>
    /// Launch the provided component inside a modal container
    /// </summary>
    /// <param name="onConfigure"><b>Optional:</b> Callback to configure the components parameters</param>
    /// <param name="size"><b>Optional:</b> Tailwind width class to define the modal size</param>
    /// <param name="allowUnfocusHide"><b>Optional:</b>  Toggles if clicking outside the modal (onto the backdrop) will hide the modal</param>
    /// <typeparam name="T">Type of the component</typeparam>
    /// <returns>ModalItem to close the modal using <see cref="CloseAsync"/></returns>
    public async Task<ModalItem> LaunchAsync<T>(Action<Dictionary<string, object>>? onConfigure = null, string size = "max-w-lg", bool allowUnfocusHide = false) where T : BaseModal
    {
        var item = new ModalItem()
        {
            Size = size,
            AllowUnfocusHide = allowUnfocusHide
        };

        item.Component = ComponentHelper.FromType<T>(buildAttr =>
        {
            buildAttr.Add("Launcher", this);
            buildAttr.Add("ModalItem", item);

            onConfigure?.Invoke(buildAttr);
        });

        Modals.Add(item);
        await InvokeAsync(StateHasChanged);

        return item;
    }

    private async Task HandleOutOfFocusClickAsync()
    {
        var modal = Modals.LastOrDefault();

        if (modal == null)
            return;

        if (!modal.AllowUnfocusHide)
            return;

        await CloseAsync(modal);
    }

    /// <summary>
    /// Closes the provided modal
    /// </summary>
    /// <param name="item">Reference item to the active modal</param>
    public async Task CloseAsync(ModalItem item)
    {
        Modals.Remove(item);
        await InvokeAsync(StateHasChanged);
    }
}