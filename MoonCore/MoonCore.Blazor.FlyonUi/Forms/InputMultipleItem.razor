@using Microsoft.Extensions.Logging
@typeparam TItem

@inject ILogger<InputItem<TItem>> Logger

<div class="advance-select relative active">
    @if (IsLoading)
    {
        <button type="button" aria-expanded="true"
                class="advance-select-toggle select-disabled:pointer-events-none select-disabled:opacity-40"
                disabled="disabled">
            <span class="truncate italic">Loading</span>
        </button>
    }
    else if (IsFailed)
    {
        <button type="button" aria-expanded="true"
                class="advance-select-toggle select-disabled:pointer-events-none select-disabled:opacity-40"
                disabled="disabled">
            <span class="truncate text-error">Failed to load</span>
        </button>
    }
    else
    {
        <button @onclick="ToggleVisibility" type="button" aria-expanded="true"
                class="advance-select-toggle">
            @if (Value.Count == 0)
            {
                <span class="truncate">
                    Select option...
                </span>
            }
            else
            {
                <span class="truncate">
                    @{
                        string displayValue;
                        
                        // Show the display field value of maximum the first 2 elements, then we just say + amount if more than 2
                        displayValue = string.Join(", ", Value.Take(2).Select(x => DisplayField.Invoke(x).ToString()));

                        if (Value.Count > 2)
                            displayValue += $", +{Value.Count - 2}";
                    }
                    
                    @displayValue
                </span>
            }
        </button>
    }

    @if (IsVisible && VisibleItems != null)
    {
        <div class="absolute advance-select-menu opened top-full mt-3 z-50 max-h-52 overflow-y-auto pt-0 px-2.5" role="listbox" tabindex="-1"
             aria-orientation="vertical">

            @if (SearchField != null)
            {
                <div class="bg-base-100 sticky top-0 mb-2 px-2 pt-3">
                    <input @oninput="OnSearchInput" value="@SearchTerm"
                           type="text" placeholder="Search..."
                           class="input">
                </div>
            }

            @foreach (var item in VisibleItems)
            {
                <div @onclick="() => Select(item)"
                     tabindex="0"
                     class="cursor-pointer advance-select-option selected:select-active @(Value.Contains(item) ? "selected" : "")">
                    <div class="flex items-center w-full">
                        <span>
                            @DisplayField.Invoke(item)
                        </span>
                    </div>
                </div>
            }
        </div>
        
        <div @onclick="OnFocusOut" class="overlay-backdrop transition duration-300 fixed inset-0 overflow-y-auto z-40"></div>
    }

    @if (IsLoading)
    {
        <span class="loading loading-spinner loading-xs absolute top-1/2 end-3 -translate-y-1/2"></span>
    }
    else if (IsFailed)
    {
        <i class="icon-triangle-alert text-error absolute top-1/2 end-3 -translate-y-1/2"></i>
    }
    else
    {
        <i class="icon-chevrons-up-down text-base-content absolute top-1/2 end-3 -translate-y-1/2"></i>
    }
</div>


@code
{
    [Parameter] public IList<TItem> Value { get; set; }
    [Parameter] public required Func<Task<TItem[]>> ItemSource { get; set; }
    [Parameter] public required Func<TItem, object> DisplayField { get; set; }
    [Parameter] public Func<TItem, object>? SearchField { get; set; }

    private bool IsLoading;
    private bool IsVisible;
    private bool IsFailed;
    private TItem[]? Items;
    private TItem[]? VisibleItems;

    private string SearchTerm = "";

    private async Task OnFocusOut()
    {
        IsVisible = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Select(TItem item)
    {
        if (Value.Contains(item))
            Value.Remove(item);
        else
            Value.Add(item);
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleVisibility()
    {
        IsVisible = !IsVisible;

        if (IsVisible && Items == null)
        {
            IsLoading = true;
            Task.Run(LoadItems);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadItems()
    {
        try
        {
            Items = await ItemSource.Invoke();
            VisibleItems = Items;
        }
        catch (Exception e)
        {
            Logger.LogError(e, "An error occured while loading items");

            IsFailed = true;
        }
        finally
        {
            IsLoading = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSearchInput(ChangeEventArgs eventArgs)
    {
        if(Items == null || SearchField == null)
            return;
        
        SearchTerm = eventArgs.Value?.ToString() ?? "";

        if (!string.IsNullOrEmpty(SearchTerm))
        {
            VisibleItems = Items
                .Where(item =>
                    {
                        var fieldStr = SearchField.Invoke(item).ToString() ?? "";
                        return fieldStr.Contains(SearchTerm, StringComparison.InvariantCultureIgnoreCase);
                    }
                )
                .ToArray();
        }
        else
            VisibleItems = Items;

        await InvokeAsync(StateHasChanged);
    }
}