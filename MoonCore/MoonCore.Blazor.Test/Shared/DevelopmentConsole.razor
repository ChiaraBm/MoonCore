@using MoonCore.Blazor.Extensions

@inject IJSRuntime JsRuntime
@inject DevelopmentConsoleService DevelopmentConsoleService

@implements IDisposable

@if (Enabled)
{
    <style>
    .devconsole-window {
        position: fixed;
        width: 600px;
        height: 350px;
        z-index: 10324;
    }
</style>

    <div id="devConsole" class="card card-body p-5 bg-black devconsole-window text-white fs-5 d-flex align-items-start flex-column @(Visibility ? "" : "d-none")">
        @if (Visibility)
        {
            <div class="mb-auto">
                <div class="fw-semibold">Render Trackers:</div>
                @foreach (var counter in DevelopmentConsoleService.GetCounters())
                {
                    <div>
                        <span>@counter.Item1</span>
                        <span class="ms-2 text-primary">@counter.Item2</span>
                    </div>
                }
            </div>
            <div>
                <span class="text-muted fs-6">MoonCore.Blazor Development Console</span>
            </div>
        }
    </div>
}

@code
{
    private bool Visibility = false;
    private bool Enabled = false;
    private bool InitializedWindow = false;

    private Timer? UpdateTimer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsyncHandled("mooncore.blazor.debugConsole.register", DotNetObjectReference.Create(this));

            Enabled = true;
            await InvokeAsync(StateHasChanged);

            UpdateTimer = new(async _ =>
            {
                await InvokeAsync(StateHasChanged);
            }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        }

        if (Enabled && !InitializedWindow)
        {
            InitializedWindow = true;
            await JsRuntime.InvokeVoidAsyncHandled("mooncore.blazor.debugConsole.initWindow", "devConsole");
        }
    }

    [JSInvokable]
    public async Task Toggle()
    {
        Visibility = !Visibility;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        UpdateTimer?.Dispose();
    }
}