@page "/fct"
@using System.ComponentModel.DataAnnotations
@using MoonCore.Abstractions
@using MoonCore.Blazor.Test.Data
@using MoonCore.Blazor.Forms.Table
@using MoonCore.Blazor.Helpers
@using MoonCore.Blazor.Services
@using MoonCore.Blazor.Forms.FastForms
@using MoonCore.Blazor.Forms.FastForms.Components
@using MoonCore.Blazor.Models.FastForms

@inject AlertService AlertService

<FastCrud TItem="Car"
          Loader="Loader"
          Search="Search"
          OnConfigureCreate="OnConfigureCreate"
          OnConfigureEdit="OnConfigureEdit">
    <View>
        <MCBColumn TItem="Car" Field="@(x => x.Name)" Title="Name" />
        <MCBColumn TItem="Car" Field="@(x => x.Plate)" Title="Plate" />
    </View>
    <EditToolbar>
        <WButton CssClasses="btn btn-info me-1" OnClick="() => Testy(context)">
            Tell me the name
        </WButton>
    </EditToolbar>
</FastCrud>

@code
{
    private IEnumerable<Car> Loader(Repository<Car> repository)
    {
        return repository.Get();
    }

    private IEnumerable<Car> Search(IEnumerable<Car> dataSource, string term)
    {
        return dataSource.Where(x => x.Name.Contains(term));
    }

    private void OnConfigureCreate(FastFormConfiguration<Car> configuration, Car _)
    {
        configuration.AddProperty(x => x.Name)
            .WithValidation(FastFormValidators.Required)
            .WithDefaultComponent();

        configuration.AddProperty(x => x.Plate)
            .WithValidation(FastFormValidators.Required)
            .WithDefaultComponent();
    }

    private void OnConfigureEdit(FastFormConfiguration<Car> configuration, Car car)
    {
        configuration.AddProperty(x => x.Id)
            .WithValidation(x
                => x == car.Id ? ValidationResult.Success : new ValidationResult("You are not allowed to change the id"))
            .WithSection("owo")
            .WithComponent<MyCoolCustomComponent>();
        
        configuration.AddProperty(x => x.Name)
            .WithValidation(FastFormValidators.Required)
            .WithDefaultComponent();
        
        configuration.AddProperty(x => x.Plate)
            .WithValidation(FastFormValidators.Required)
            .WithDefaultComponent();

        configuration.AddProperty(x => x.IsElectric)
            .WithName("Is an electric car?")
            .WithComponent<CheckboxComponent>();

        configuration.AddProperty(x => x.DriverType)
            .WithName(":c")
            .WithComponent<EnumSelectComponent<CarDriverType>>();

        configuration.AddCustomPage("Custom page", ComponentHelper.FromType<CoolCustomPage>(parameters =>
        {
            parameters.Add("Car", car);
        }));
    }

    private async Task Testy(Car car)
    {
        await AlertService.Info("Current car name is: " + car.Name);
    }
}
