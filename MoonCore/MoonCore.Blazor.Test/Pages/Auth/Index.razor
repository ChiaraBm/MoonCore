@page "/auth"

@using MoonCore.Blazor.Bootstrap.Services
@using MoonCore.Blazor.Test.Data
@using MoonCore.Services

@inject IdentityService Identity
@inject CookieService CookieService

@implements IDisposable

<LazyLoader Load="Load">
    @if (Identity.IsAuthenticated)
    {
        var user = Identity.Storage.Get<User>();

        <h1>Logged in: @user.Email</h1>
    }
    else
    {
        <h1>Not logged in</h1>
    }

    <input @bind="Email" type="text" class="form-control" placeholder="Email"/>
    <input @bind="Password" type="password" class="form-control" placeholder="Password"/>

    <button class="btn btn-primary" @onclick="DoLogin">
        Login
    </button>

    <button class="btn btn-danger" @onclick="Logout">
        Logout
    </button>
</LazyLoader>

@code
{
    private string Email = "";
    private string Password = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Identity.OnStateChanged += OnAuthStateChanged;
        }
    }

    public async Task Logout()
    {
        await Identity.Logout();
    }

    public async Task DoLogin()
    {
        var user = CustomAuthStateProvider.Users.First(x => x.Email == Email);

        if (user.Password != Password)
            return;

        var token = await Identity.Login(user.Id.ToString(), TimeSpan.FromSeconds(15));
        await CookieService.SetValue("testyToken", token, 30);
    }

    private async Task OnAuthStateChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Identity.OnStateChanged -= OnAuthStateChanged;
    }

    private async Task Load(LazyLoader arg)
    {
        var token = await CookieService.GetValue("testyToken");
        await Identity.Authenticate(token);
    }
}