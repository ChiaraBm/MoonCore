@page "/forms/selection"
@using Bogus
@using MoonCore.Blazor.Tailwind.Components
@using MoonCore.Blazor.Tailwind.Input2
@using MoonCore.Blazor.Tailwind.Test.Models

<div class="mb-5">
    <NavTabs Index="1" Names="UiConstants.FormsNames" Links="UiConstants.FormsLinks"/>
</div>

<div class="my-5">
    Selected item: @(SelectedItem == null ? "Nothing" : SelectedItem.Email)
</div>

<div class="grid grid-cols-3 gap-5">
    <div class="col-span-1">
        <DropdownList TItem="DemoDataModel"
                      @bind-Value="SelectedItem"
                      DisplayProperty="@(x => x.Email)"
                      ItemSource="ItemSource"/>
    </div>
    <div class="col-span-1">
        <DropdownSearchList TItem="DemoDataModel"
                            @bind-Value="SelectedItem"
                            DisplayProperty="@(x => x.Email)"
                            ItemSource="ItemSearchSource"/>
    </div>
</div>

@code
{
    private DemoDataModel? SelectedItem;

    private DemoDataModel[] Data;

    protected override void OnInitialized()
    {
        var faker = new Faker<DemoDataModel>()
            .RuleFor(x => x.Id, x => x.UniqueIndex)
            .RuleFor(x => x.Email, x => x.Person.Email)
            .RuleFor(x => x.Flag, x => x.Random.Bool())
            .RuleFor(x => x.Name, x => x.Person.UserName);

        Data = faker
            .Generate(20)
            .ToArray();
    }

    private async Task<DemoDataModel[]> ItemSource()
    {
        await Task.Delay(1000);
        return Data;
    }

    private async Task<DemoDataModel[]> ItemSearchSource(string term)
    {
        await Task.Delay(1000);

        if (string.IsNullOrEmpty(term))
            return Data.Take(10).ToArray();

        return Data
                .Where(x => x.Email.Contains(term, StringComparison.InvariantCultureIgnoreCase))
                .Take(10)
                .ToArray();
    }
}
