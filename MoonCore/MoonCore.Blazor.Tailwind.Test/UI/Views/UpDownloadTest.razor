@page "/updownloadtest"
@using MoonCore.Blazor.Tailwind.Fm
@using MoonCore.Blazor.Tailwind.Services
@using MoonCore.Blazor.Tailwind.Toasts
@using MoonCore.Blazor.Tailwind.Xhr
@using MoonCore.Helpers

@inject DownloadService DownloadService
@inject ToastService ToastService
@inject XmlHttpClient XmlHttpClient

<button @onclick="DownloadViaUrl" class="btn btn-primary">Download via URL</button>
<button @onclick="DownloadViaStream" class="btn btn-primary">Download via Stream</button>
<button @onclick="DownloadViaXhr" class="btn btn-primary">Download via Xhr</button>

<button @onclick="UploadViaXhrForms" class="btn btn-primary">Upload via Xhr forms</button>

@code
{
    private async Task DownloadViaUrl()
    {
        await ToastService.Launch<DownloadToast>(parameters =>
        {
            parameters.Add("Work", async Task (DownloadToast toast) =>
            {
                var lastTime = DateTime.Now;
                var lastBytes = 0L;

                await DownloadService.DownloadUrl("testy.bin", "http://localhost:5230/testy.bin", async (bytesDownloaded, end) =>
                {
                    var diffBytes = bytesDownloaded - lastBytes;
                    var diffTime = DateTime.Now - lastTime;

                    await toast.Update(
                        Formatter.TransferSpeed(diffBytes, diffTime),
                        Formatter.FormatSize(bytesDownloaded)
                    );

                    lastBytes = bytesDownloaded;
                    lastTime = DateTime.Now;
                }, headers =>
                {
                    headers.Add("TestyA", "TestyB");
                });
            });
        });
    }

    private async Task DownloadViaStream()
    {
        await ToastService.Launch<DownloadToast>(parameters =>
        {
            parameters.Add("Work", async Task (DownloadToast toast) =>
            {
                var lastTime = DateTime.Now;
                var lastBytes = 0L;

                var fs = File.Open(PathBuilder.File("wwwroot", "testy.bin"), FileMode.Open, FileAccess.Read, FileShare.ReadWrite);

                await DownloadService.DownloadStream("testy.bin", fs, async (bytesDownloaded, end) =>
                {
                    var diffBytes = bytesDownloaded - lastBytes;
                    var diffTime = DateTime.Now - lastTime;

                    await toast.Update(
                        Formatter.TransferSpeed(diffBytes, diffTime),
                        Formatter.FormatSize(bytesDownloaded)
                    );

                    lastBytes = bytesDownloaded;
                    lastTime = DateTime.Now;
                    
                    if(end)
                        fs.Close();
                });
            });
        });
    }

    private async Task DownloadViaXhr()
    {
        var request = await XmlHttpClient.Create();

        await request.Open("GET", "http://localhost:5230/testy.bin");
        
        await request.SetResponseType("blob");

        request.OnDownloadProgress += async ev =>
        {
            Console.WriteLine($"Progress: {ev.Loaded}/{ev.Total}");
        };

        request.OnLoadend += async _ =>
        {
            Console.WriteLine("Loaded :)");
        };

        request.OnReadyStateChange += async i =>
        {
            Console.WriteLine("Ready state: " + i);
            
            if (i != 4)
                return;

            Console.WriteLine("Ready");

            var jsStream = await request.GetResponseStream();
            var stream = await jsStream.OpenReadStreamAsync(long.MaxValue);

            Console.WriteLine(stream.Length);
        };

        await request.Send();
    }

    private async Task UploadViaXhrForms()
    {
        var fs = File.Open(Path.Combine("wwwroot", "testy.bin"), FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
         
        // xhr
        var xhr = await XmlHttpClient.Create();

        await xhr.Open("POST", "api/testy/upload");

        xhr.OnUploadProgress += pe =>
        {
            Console.WriteLine($"pe: {pe.Loaded}");
            return Task.CompletedTask;
        };
        
        xhr.OnLoadend += async _ =>
        {
            Console.WriteLine("Uploaded");
            
            fs.Close();
            await fs.DisposeAsync();
        };
        
        await xhr.SendFile(fs, "file", "file");
    }
}
