@page "/dataTables/selection"

@using Bogus
@using MoonCore.Blazor.Tailwind.Dt
@using MoonCore.Blazor.Tailwind.Test.Models
@using MoonCore.Blazor.Tailwind.Components

<div class="mb-5">
    <NavTabs Index="2" Names="UiConstants.DataTablesNames" Links="UiConstants.DataTablesLinks" />
</div>

<div class="my-3 text-lg">
    @if (SelectedItems.Length == 0)
    {
        <span>No items selected</span>
    }
    else
    {
        <span>Selected items: @string.Join(", ", SelectedItems.Select(x => x.Name))</span>
    }
</div>

<DataTable TItem="DemoDataModel" ItemSource="ItemSource">
    <Configuration>
        <Selection TItem="DemoDataModel" OnSelectionChanged="OnSelectionChanged" />
        
        <DataTableColumn TItem="DemoDataModel" Field="@(x => x.Id)" Name="Id"/>
        <DataTableColumn TItem="DemoDataModel" Field="@(x => x.Email)" Name="Email"/>
        <DataTableColumn TItem="DemoDataModel" Field="@(x => x.Name)" Name="Username"/>
        <DataTableColumn TItem="DemoDataModel" Field="@(x => x.Flag)" Name="Flag"/>
    </Configuration>
</DataTable>

@code
{
    private DemoDataModel[] SelectedItems = [];
    
    private Task<DemoDataModel[]> ItemSource()
    {
        var faker = new Faker<DemoDataModel>()
            .RuleFor(x => x.Id, x => x.UniqueIndex)
            .RuleFor(x => x.Email, x => x.Person.Email)
            .RuleFor(x => x.Flag, x => x.Random.Bool())
            .RuleFor(x => x.Name, x => x.Person.UserName);

        var items = faker
            .Generate(20)
            .ToArray();

        return Task.FromResult(items);
    }

    private async Task OnSelectionChanged(DemoDataModel[] demoDataModels)
    {
        SelectedItems = demoDataModels;
        await InvokeAsync(StateHasChanged);
    }
}