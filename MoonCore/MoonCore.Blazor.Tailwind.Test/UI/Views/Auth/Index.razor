@page "/auth"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using MoonCore.Blazor.Tailwind.Components
@using MoonCore.Blazor.Tailwind.Toasts

@inject ToastService ToastService
@inject IAuthorizationService AuthorizationService

<div class="mb-5">
    <NavTabs Index="0" Names="UiConstants.AuthNames" Links="UiConstants.AuthLinks"/>
</div>

@if (Identity.Identity?.IsAuthenticated ?? false)
{
    <IconAlert Color="text-success"
               Title="Welcome"
               Icon="icon-hand">
        <div class="mt-2">
            You are logged in
        </div>

        <div class="mt-3">
            <ul>
                @foreach (var claim in Identity.Claims)
                {
                    <li>@claim.Type - @claim.Value</li>
                }
            </ul>
        </div>
    </IconAlert>
}
else
{
    <IconAlert Color="text-danger"
               Title="Not authentication"
               Icon="icon-log-in">
        You are not logged in
    </IconAlert>
}

<div class="mt-5">
    <WButton OnClick="CheckForPerm">
        Check for <b>only.unprivileged.debug</b>
    </WButton>
</div>

@code
{
    [CascadingParameter] public Task<AuthenticationState> AuthState { get; set; }

    private ClaimsPrincipal Identity;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        Identity = authState.User;
    }

    private async Task CheckForPerm(WButton _)
    {
        var res = await AuthorizationService.AuthorizeAsync(
            Identity,
            "permissions:only.unprivileged.debug"
        );

        if (res.Succeeded)
            await ToastService.Success("You have the required permissions");
        else
            await ToastService.Danger("You are missing the required permissions");
    }
}
