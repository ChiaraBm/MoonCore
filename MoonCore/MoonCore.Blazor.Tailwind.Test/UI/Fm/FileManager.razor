@using System.Text
@using MoonCore.Blazor.Tailwind.Alerts
@using MoonCore.Blazor.Tailwind.Modals
@using MoonCore.Blazor.Tailwind.Services
@using MoonCore.Blazor.Tailwind.Test.UI.Ace
@using MoonCore.Blazor.Tailwind.Toasts
@using MoonCore.Helpers
@using MoonCore.Blazor.Tailwind.Components
@using MoonCore.Blazor.Tailwind.HotKeys
@using MoonCore.Blazor.Tailwind.Toasts.Components

@inject ModalService ModalService
@inject ToastService ToastService
@inject AlertService AlertService
@inject DownloadService DownloadService
@inject HotKeyService HotKeyService

@inject ILogger<FileManager> Logger

<div class="bg-gray-800 rounded-lg py-1 mb-5">
    <div class="flex justify-between items-center px-3 py-2">
        @if (IsEditing)
        {
            <div class="flex items-center text-base font-semibold">
                <i class="icon-file text-lg me-3"></i>
                <span class="me-1">@EditorEntry.Name</span>
                <span class="text-sm text-gray-400 hidden sm:block">/ @Formatter.FormatSize(EditorEntry.Size)</span>
            </div>
            <div class="flex flex-row gap-x-2">
                <WButton OnClick="_ => SaveFile()" CssClasses="btn btn-primary">
                    <i class="icon-save"></i>
                    <span class="hidden sm:block ms-2">Save changes</span>
                </WButton>

                <button @onclick="CloseEditor" class="btn btn-danger">
                    <i class="icon-door-open"></i>
                    <span class="hidden sm:block ms-2">Close</span>
                </button>
            </div>
        }
        else if (SelectedEntries.Length > 0)
        {
            <div class="flex items-center text-base font-semibold">
                <i class="icon-files text-lg me-3"></i>
                <span class="me-1">@SelectedEntries.Length item(s) selected</span>
            </div>
            <div class="flex flex-row gap-x-2">
                @if (SelectionActionTemplate != null)
                {
                    @SelectionActionTemplate.Invoke(SelectedEntries)
                }

                @if (CompressProvider != null)
                {
                    <button @onclick="() => Compress(SelectedEntries)" class="btn btn-success">
                        <i class="icon-file-archive"></i>
                        <span class="hidden sm:block ms-2">Archive</span>
                    </button>
                }

                <button @onclick="DeleteSelection" class="btn btn-danger">
                    <i class="icon-trash-2"></i>
                    <span class="hidden sm:block ms-2">Delete</span>
                </button>
            </div>
        }
        else
        {
            <div></div>
            <div class="flex flex-row gap-x-2">
                @if (ActionTemplate != null)
                {
                    @ActionTemplate
                }

                <button @onclick="LaunchUploadModal" class="btn btn-primary">
                    <i class="icon-cloud-upload me-2"></i>
                    Upload
                </button>

                <button @onclick="LaunchFileModal" class="btn btn-primary">
                    <i class="icon-file-plus me-2"></i>
                    New File
                </button>

                <button @onclick="LaunchFolderModal" class="btn btn-primary">
                    <i class="icon-folder-plus me-2"></i>
                    New Folder
                </button>
            </div>
        }
    </div>
</div>

@if (IsEditing)
{
    <LazyLoader Load="LoadEditor">
        <CodeEditor @ref="FileEditor" InitialContent="@EditorInitialContent" OnConfigure="ConfigureEditor"/>
    </LazyLoader>
}
else
{
    <div class="bg-gray-800 rounded-lg py-1" @ondragenter="HandleDrag">
        <div class="flex justify-between items-center px-4 py-2">
            <div>
                <nav class="flex">
                    <ol class="inline-flex items-center space-x-0.5 md:space-x-2">
                        <li class="inline-flex items-center">
                            <a href="#" @onclick="@(() => FileView!.GoTo("/"))" @onclick:preventDefault
                               class="inline-flex items-center text-sm font-medium text-gray-400 hover:text-white">
                                <i class="icon-hard-drive text-lg me-2.5"></i>
                                Home
                            </a>
                        </li>

                        @{
                            var path = CurrentPath;
                            var pathParts = path.Split("/");
                        }

                        @for (var i = 1; i < pathParts.Length; i++)
                        {
                            var pathName = pathParts[i];
                            var currentPath = string.Join("/", pathParts.Take(i + 1));

                            if (i == pathParts.Length - 1)
                            {
                                <li aria-current="page">
                                    <div class="flex items-center">
                                        <i class="text-gray-400 mx-0.5 icon-chevron-right"></i>
                                        <span class="ms-1 text-sm font-medium text-gray-500 md:ms-2 dark:text-gray-400">
                                        @pathName
                                    </span>
                                    </div>
                                </li>
                            }
                            else
                            {
                                <li>
                                    <div class="flex items-center">
                                        <i class="text-gray-400 mx-0.5 icon-chevron-right"></i>
                                        <a href="#" @onclick="@(() => FileView!.GoTo(currentPath))"
                                           @onclick:preventDefault
                                           class="ms-1 text-sm font-medium md:ms-2 text-gray-400 hover:text-white">
                                            @pathName
                                        </a>
                                    </div>
                                </li>
                            }
                        }
                    </ol>
                </nav>
            </div>
        </div>

        <FileView @ref="FileView"
                  EnableSelection="true"
                  FileSystemProvider="FileSystemProvider"
                  OnInteract="OnInteract"
                  OnNavigated="OnNavigated"
                  InitialPath="@CurrentPath"
                  OnSelectionChanged="OnSelectionChanged">
            <ContextMenuTemplate>
                @if (ContextMenuTemplate != null)
                {
                    @ContextMenuTemplate.Invoke(context)
                }

                <a href="#" @onclick="() => Move(context)" @onclick:preventDefault @onmousedown:preventDefault
                   @onmousedown:stopPropagation
                   class="flex px-4 py-2 items-center hover:bg-gray-700 border-b border-gray-700" role="menuitem"
                   tabindex="-1">
                    <i class="me-2 text-warning-500 icon-move text-lg"></i>
                    <span class="text-sm">Move</span>
                </a>
                <a href="#" @onclick="() => Download(context)" @onclick:preventDefault @onmousedown:preventDefault
                   @onmousedown:stopPropagation
                   class="flex px-4 py-2 items-center hover:bg-gray-700 border-b border-gray-700" role="menuitem"
                   tabindex="-1">
                    <i class="me-2 text-primary-500 icon-hard-drive-download text-lg"></i>
                    <span class="text-sm">Download</span>
                </a>

                @if (CompressProvider != null)
                {
                    <a href="#" @onclick="() => Compress([context])" @onclick:preventDefault @onmousedown:preventDefault
                       @onmousedown:stopPropagation
                       class="flex px-4 py-2 items-center hover:bg-gray-700 border-b border-gray-700" role="menuitem"
                       tabindex="-1">
                        <i class="me-2 text-success-500 icon-file-archive text-lg"></i>
                        <span class="text-sm">Archive</span>
                    </a>
                }

                <a href="#" @onclick="() => Rename(context)" @onclick:preventDefault @onmousedown:preventDefault
                   @onmousedown:stopPropagation
                   class="flex px-4 py-2 items-center hover:bg-gray-700 border-b border-gray-700" role="menuitem"
                   tabindex="-1">
                    <i class="me-2 text-tertiary-500 icon-pencil-line text-lg"></i>
                    <span class="text-sm">Rename</span>
                </a>
                <a href="#" @onclick="() => Delete(context)" @onclick:preventDefault @onmousedown:preventDefault
                   @onmousedown:stopPropagation
                   class="flex px-4 py-2 items-center hover:bg-gray-700" role="menuitem" tabindex="-1">
                    <i class="me-2 text-danger-500 icon-trash-2 text-lg"></i>
                    <span class="text-sm">Delete</span>
                </a>
            </ContextMenuTemplate>
        </FileView>
    </div>
}

@code
{
    [Parameter] public IFileSystemProvider FileSystemProvider { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await InvokeAsync(StateHasChanged);
    }

    private async Task<bool> OnInteract(FileSystemEntry entry)
    {
        if (entry.IsFile)
        {
            if (entry.Size > MaxEditorOpenSize)
            {
                await ToastService.Danger("Unable to open file in text editor. The file is too big");
                return true;
            }

            await OpenEditor(entry);
            return true;
        }

        return false;
    }
}
