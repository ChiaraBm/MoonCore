@using MoonCore.Blazor.Tailwind.Modals
@using MoonCore.Blazor.Tailwind.Services
@using MoonCore.Blazor.Tailwind.Toasts
@using MoonCore.Helpers

@inject ModalService ModalService
@inject ToastService ToastService
@inject DownloadService DownloadService
@inject ILogger<FileManager> Logger

<div class="bg-gray-800 rounded-lg py-1">
    <div class="flex justify-between items-center px-3 py-2">
        <div></div>
        <div class="flex flex-row gap-x-2">
            <button @onclick="LaunchUploadModal" class="btn btn-primary">
                <i class="icon-cloud-upload me-2"></i>
                Upload
            </button>

            <button @onclick="LaunchFileModal" class="btn btn-primary">
                <i class="icon-file-plus me-2"></i>
                New File
            </button>

            <button @onclick="LaunchFolderModal" class="btn btn-primary">
                <i class="icon-folder-plus me-2"></i>
                New Folder
            </button>
        </div>
    </div>
</div>

<div class="bg-gray-800 rounded-lg py-1 mt-5" @ondragenter="HandleDrag">
    <div class="flex justify-between items-center px-4 py-2">
        <div>
            <nav class="flex">
                <ol class="inline-flex items-center space-x-0.5 md:space-x-2">
                    <li class="inline-flex items-center">
                        <a href="#" @onclick="@(() => FileView!.GoTo("/"))" @onclick:preventDefault
                           class="inline-flex items-center text-sm font-medium text-gray-400 hover:text-white">
                            <i class="icon-hard-drive text-lg me-2.5"></i>
                            Home
                        </a>
                    </li>

                    @{
                        var path = FileView?.CurrentPath ?? "/";
                        var pathParts = path.Split("/");
                    }

                    @for (var i = 1; i < pathParts.Length; i++)
                    {
                        var pathName = pathParts[i];
                        var currentPath = string.Join("/", pathParts.Take(i + 1));

                        if (i == pathParts.Length - 1)
                        {
                            <li aria-current="page">
                                <div class="flex items-center">
                                    <i class="text-gray-400 mx-0.5 icon-chevron-right"></i>
                                    <span class="ms-1 text-sm font-medium text-gray-500 md:ms-2 dark:text-gray-400">
                                        @pathName
                                    </span>
                                </div>
                            </li>
                        }
                        else
                        {
                            <li>
                                <div class="flex items-center">
                                    <i class="text-gray-400 mx-0.5 icon-chevron-right"></i>
                                    <a href="#" @onclick="@(() => FileView!.GoTo(currentPath))" @onclick:preventDefault
                                       class="ms-1 text-sm font-medium md:ms-2 text-gray-400 hover:text-white">
                                        @pathName
                                    </a>
                                </div>
                            </li>
                        }
                    }
                </ol>
            </nav>
        </div>
    </div>

    <FileView @ref="FileView"
              FileSystemProvider="FileSystemProvider"
              OnNavigated="OnNavigated">
        <ContextMenuTemplate>
            <a href="#" @onclick="() => Download(context)" @onclick:preventDefault @onmousedown:preventDefault @onmousedown:stopPropagation class="flex px-4 py-2 items-center hover:bg-gray-700 border-b border-gray-700" role="menuitem" tabindex="-1">
                <i class="me-2 text-primary-500 icon-hard-drive-download text-lg"></i>
                <span class="text-sm">Download</span>
            </a>
            <a href="#" @onclick:preventDefault @onmousedown:preventDefault @onmousedown:stopPropagation class="flex px-4 py-2 items-center hover:bg-gray-700 border-b border-gray-700" role="menuitem" tabindex="-1">
                <i class="me-2 text-success-500 icon-file-archive text-lg"></i>
                <span class="text-sm">Archive</span>
            </a>
            <a href="#" @onclick:preventDefault @onmousedown:preventDefault @onmousedown:stopPropagation class="flex px-4 py-2 items-center hover:bg-gray-700" role="menuitem" tabindex="-1">
                <i class="me-2 text-danger-500 icon-trash text-lg"></i>
                <span class="text-sm">Delete</span>
            </a>
        </ContextMenuTemplate>
    </FileView>
</div>

@code
{
    [Parameter] public IFileSystemProvider FileSystemProvider { get; set; }

    private FileView? FileView;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnNavigated(string newPath)
        => await InvokeAsync(StateHasChanged);

    #region Create File / Folder

    private async Task LaunchFileModal()
    {
        await ModalService.Launch<CreateFileModal>(parameters =>
        {
            parameters.Add("OnSubmit", async (string fileName) =>
            {
                try
                {
                    await FileSystemProvider.Create(
                        Path.Join(FileView!.CurrentPath, fileName),
                        new MemoryStream([])
                    );

                    await ToastService.Success("Successfully created file");
                    await FileView.Refresh();
                }
                catch (Exception e)
                {
                    Logger.LogError("Unable to create file '{fileName}': {e}", fileName, e);
                    await ToastService.Danger($"Unable to create file: {fileName}");
                }
            });
        });
    }

    private async Task LaunchFolderModal()
    {
        await ModalService.Launch<CreateFolderModal>(parameters =>
        {
            parameters.Add("OnSubmit", async (string folderName) =>
            {
                try
                {
                    await FileSystemProvider.CreateDirectory(
                        Path.Join(FileView!.CurrentPath, folderName)
                    );
                    
                    await ToastService.Success("Successfully created folder");
                    await FileView.Refresh();
                }
                catch (Exception e)
                {
                    Logger.LogError("Unable to create folder '{folderName}': {e}", folderName, e);
                    await ToastService.Danger($"Unable to create folder: {folderName}");
                }
            });
        });
    }

    #endregion

    #region Uploading

    private DateTime LastDragEventHandledAt = DateTime.MinValue;

    private async Task LaunchUploadModal()
    {
        Logger.LogInformation("Launching modal");

        await ModalService.Launch<UploadModal>(size: "max-w-xl", allowUnfocusHide: true, onConfigure: parameters =>
        {
            parameters.Add("OnUpload", async Task (string path, Stream dataStream) =>
            {
                Logger.LogInformation("Uploading file: {path} ({size})", path, Formatter.FormatSize(dataStream.Length));

                var pathToUpload = Path.Join(FileView!.CurrentPath, path);
                await FileSystemProvider.Create(pathToUpload, dataStream);
            });

            parameters.Add("OnUploadCompleted", async () => { await FileView!.Refresh(); });
        });
    }

    private async Task HandleDrag()
    {
        // Debounce time of one second
        if ((DateTime.UtcNow - LastDragEventHandledAt).TotalSeconds < 1)
            return;

        LastDragEventHandledAt = DateTime.UtcNow;

        await LaunchUploadModal();
    }

    #endregion

    private async Task Download(FileSystemEntry entry)
    {
        if (!entry.IsFile)
        {
            await ToastService.Danger("Folder downloads are not supported at the moment");
            return;
        }

        await ToastService.Info($"Downloading {entry.Name}...");
        
        var stream = await FileSystemProvider.Read(Path.Join(FileView!.CurrentPath, entry.Name));
        await DownloadService.DownloadStream(entry.Name, stream);

        stream.Close();
    }
}
