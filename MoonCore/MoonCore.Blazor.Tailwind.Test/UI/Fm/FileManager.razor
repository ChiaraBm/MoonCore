@using System.Text
@using MoonCore.Blazor.Tailwind.Alerts
@using MoonCore.Blazor.Tailwind.Modals
@using MoonCore.Blazor.Tailwind.Services
@using MoonCore.Blazor.Tailwind.Test.UI.Ace
@using MoonCore.Blazor.Tailwind.Toasts
@using MoonCore.Helpers
@using MoonCore.Blazor.Tailwind.Components

@inject ModalService ModalService
@inject ToastService ToastService
@inject AlertService AlertService
@inject DownloadService DownloadService
@inject ILogger<FileManager> Logger

<div class="bg-gray-800 rounded-lg py-1 mb-5">
    <div class="flex justify-between items-center px-3 py-2">
        @if (IsEditing)
        {
            <div class="flex items-center text-base font-semibold">
                <i class="icon-file text-lg me-3"></i>
                <span class="me-1">@EditorEntry.Name</span>
                <span class="text-sm text-gray-400">/ @Formatter.FormatSize(EditorEntry.Size)</span>
            </div>
            <div class="flex flex-row gap-x-2">
                <button @onclick="SaveFile" class="btn btn-primary">
                    <i class="icon-save me-2"></i>
                    Save changes
                </button>

                <button @onclick="CloseEditor" class="btn btn-danger">
                    <i class="icon-door-open me-2"></i>
                    Close
                </button>
            </div>
        }
        else
        {
            <div></div>
            <div class="flex flex-row gap-x-2">
                <button @onclick="LaunchUploadModal" class="btn btn-primary">
                    <i class="icon-cloud-upload me-2"></i>
                    Upload
                </button>

                <button @onclick="LaunchFileModal" class="btn btn-primary">
                    <i class="icon-file-plus me-2"></i>
                    New File
                </button>

                <button @onclick="LaunchFolderModal" class="btn btn-primary">
                    <i class="icon-folder-plus me-2"></i>
                    New Folder
                </button>
            </div>
        }
    </div>
</div>

@if (IsEditing)
{
    <LazyLoader Load="LoadEditor">
        <CodeEditor @ref="FileEditor" InitialContent="@EditorInitialContent" OnConfigure="ConfigureEditor"/>
    </LazyLoader>
}
else
{
    <div class="bg-gray-800 rounded-lg py-1" @ondragenter="HandleDrag">
        <div class="flex justify-between items-center px-4 py-2">
            <div>
                <nav class="flex">
                    <ol class="inline-flex items-center space-x-0.5 md:space-x-2">
                        <li class="inline-flex items-center">
                            <a href="#" @onclick="@(() => FileView!.GoTo("/"))" @onclick:preventDefault
                               class="inline-flex items-center text-sm font-medium text-gray-400 hover:text-white">
                                <i class="icon-hard-drive text-lg me-2.5"></i>
                                Home
                            </a>
                        </li>

                        @{
                            var path = CurrentPath;
                            var pathParts = path.Split("/");
                        }

                        @for (var i = 1; i < pathParts.Length; i++)
                        {
                            var pathName = pathParts[i];
                            var currentPath = string.Join("/", pathParts.Take(i + 1));

                            if (i == pathParts.Length - 1)
                            {
                                <li aria-current="page">
                                    <div class="flex items-center">
                                        <i class="text-gray-400 mx-0.5 icon-chevron-right"></i>
                                        <span class="ms-1 text-sm font-medium text-gray-500 md:ms-2 dark:text-gray-400">
                                        @pathName
                                    </span>
                                    </div>
                                </li>
                            }
                            else
                            {
                                <li>
                                    <div class="flex items-center">
                                        <i class="text-gray-400 mx-0.5 icon-chevron-right"></i>
                                        <a href="#" @onclick="@(() => FileView!.GoTo(currentPath))"
                                           @onclick:preventDefault
                                           class="ms-1 text-sm font-medium md:ms-2 text-gray-400 hover:text-white">
                                            @pathName
                                        </a>
                                    </div>
                                </li>
                            }
                        }
                    </ol>
                </nav>
            </div>
        </div>

        <FileView @ref="FileView"
                  EnableSelection="true"
                  FileSystemProvider="FileSystemProvider"
                  OnInteract="OnInteract"
                  OnNavigated="OnNavigated">
            <ContextMenuTemplate>
                <a href="#" @onclick="() => Move(context)" @onclick:preventDefault @onmousedown:preventDefault
                   @onmousedown:stopPropagation
                   class="flex px-4 py-2 items-center hover:bg-gray-700 border-b border-gray-700" role="menuitem"
                   tabindex="-1">
                    <i class="me-2 text-warning-500 icon-move text-lg"></i>
                    <span class="text-sm">Move</span>
                </a>
                <a href="#" @onclick="() => Download(context)" @onclick:preventDefault @onmousedown:preventDefault
                   @onmousedown:stopPropagation
                   class="flex px-4 py-2 items-center hover:bg-gray-700 border-b border-gray-700" role="menuitem"
                   tabindex="-1">
                    <i class="me-2 text-primary-500 icon-hard-drive-download text-lg"></i>
                    <span class="text-sm">Download</span>
                </a>
                <a href="#" @onclick:preventDefault @onmousedown:preventDefault @onmousedown:stopPropagation
                   class="flex px-4 py-2 items-center hover:bg-gray-700 border-b border-gray-700" role="menuitem"
                   tabindex="-1">
                    <i class="me-2 text-success-500 icon-file-archive text-lg"></i>
                    <span class="text-sm">Archive</span>
                </a>
                <a href="#" @onclick="() => Rename(context)" @onclick:preventDefault @onmousedown:preventDefault
                   @onmousedown:stopPropagation
                   class="flex px-4 py-2 items-center hover:bg-gray-700 border-b border-gray-700" role="menuitem"
                   tabindex="-1">
                    <i class="me-2 text-tertiary-500 icon-pencil-line text-lg"></i>
                    <span class="text-sm">Rename</span>
                </a>
                <a href="#" @onclick="() => Delete(context)" @onclick:preventDefault @onmousedown:preventDefault
                   @onmousedown:stopPropagation
                   class="flex px-4 py-2 items-center hover:bg-gray-700" role="menuitem" tabindex="-1">
                    <i class="me-2 text-danger-500 icon-trash text-lg"></i>
                    <span class="text-sm">Delete</span>
                </a>
            </ContextMenuTemplate>
        </FileView>
    </div>
}

@code
{
    [Parameter] public IFileSystemProvider FileSystemProvider { get; set; }

    private FileView FileView;
    private string CurrentPath = "/";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnNavigated(string newPath)
    {
        CurrentPath = newPath;
        await InvokeAsync(StateHasChanged);
    }

    #region Create File / Folder

    private async Task LaunchFileModal()
    {
        await ModalService.Launch<CreateFileModal>(parameters =>
        {
            parameters.Add("OnSubmit", async (string fileName) =>
            {
                try
                {
                    await FileSystemProvider.Create(
                        Path.Join(CurrentPath, fileName),
                        new MemoryStream([])
                    );

                    await ToastService.Success("Successfully created file");
                    await FileView.Refresh();
                }
                catch (Exception e)
                {
                    Logger.LogError("Unable to create file '{fileName}': {e}", fileName, e);
                    await ToastService.Danger($"Unable to create file: {fileName}");
                }
            });
        });
    }

    private async Task LaunchFolderModal()
    {
        await ModalService.Launch<CreateFolderModal>(parameters =>
        {
            parameters.Add("OnSubmit", async (string folderName) =>
            {
                try
                {
                    await FileSystemProvider.CreateDirectory(
                        Path.Join(CurrentPath, folderName)
                    );

                    await ToastService.Success("Successfully created folder");
                    await FileView.Refresh();
                }
                catch (Exception e)
                {
                    Logger.LogError("Unable to create folder '{folderName}': {e}", folderName, e);
                    await ToastService.Danger($"Unable to create folder: {folderName}");
                }
            });
        });
    }

    #endregion

    #region Uploading

    private DateTime LastDragEventHandledAt = DateTime.MinValue;

    private async Task LaunchUploadModal()
    {
        await ModalService.Launch<UploadModal>(size: "max-w-xl", allowUnfocusHide: true, onConfigure: parameters =>
        {
            parameters.Add("OnUpload", async Task (string path, Stream dataStream) =>
            {
                Logger.LogInformation("Uploading file: {path} ({size})", path, Formatter.FormatSize(dataStream.Length));

                var pathToUpload = Path.Join(CurrentPath, path);
                await FileSystemProvider.Create(pathToUpload, dataStream);
            });

            parameters.Add("OnUploadCompleted", async () => { await FileView!.Refresh(); });
        });
    }

    private async Task HandleDrag()
    {
        // Debounce time of one second
        if ((DateTime.UtcNow - LastDragEventHandledAt).TotalSeconds < 1)
            return;

        LastDragEventHandledAt = DateTime.UtcNow;

        await LaunchUploadModal();
    }

    #endregion

    #region Context Actions

    private async Task Download(FileSystemEntry entry)
    {
        if (!entry.IsFile)
        {
            await ToastService.Danger("Folder downloads are not supported at the moment");
            return;
        }

        await ToastService.Info($"Downloading {entry.Name}...");

        var stream = await FileSystemProvider.Read(Path.Join(CurrentPath, entry.Name));
        await DownloadService.DownloadStream(entry.Name, stream);

        stream.Close();
    }

    private async Task Move(FileSystemEntry entry)
    {
        await ModalService.Launch<LocationSelectModal>(size: "max-w-2xl", onConfigure: parameters =>
        {
            parameters.Add("OnSubmit", async (string path) =>
            {
                await FileSystemProvider.Move(
                    Path.Join(CurrentPath, entry.Name),
                    Path.Join(path, entry.Name)
                );

                await FileView!.Refresh();
            });

            parameters.Add("FileSystemProvider", FileSystemProvider);
        });
    }

    private async Task Rename(FileSystemEntry entry)
    {
        if (entry.IsFile)
        {
            await ModalService.Launch<RenameFileModal>(size: "max-w-2xl", onConfigure: parameters =>
            {
                parameters.Add("DefaultValue", entry.Name);
                parameters.Add("OnSubmit", async (string val) =>
                {
                    await FileSystemProvider.Move(
                        Path.Join(CurrentPath, entry.Name),
                        Path.Join(CurrentPath, val)
                    );

                    await FileView!.Refresh();
                });
            });
        }
        else
        {
            await ModalService.Launch<RenameFolderModal>(size: "max-w-2xl", onConfigure: parameters =>
            {
                parameters.Add("DefaultValue", entry.Name);
                parameters.Add("OnSubmit", async (string val) =>
                {
                    await FileSystemProvider.Move(
                        Path.Join(CurrentPath, entry.Name),
                        Path.Join(CurrentPath, val)
                    );

                    await FileView!.Refresh();
                });
            });
        }
    }

    private async Task Delete(FileSystemEntry entry)
    {
        await AlertService.ConfirmDanger(
            "Do you really want to delete this " + (entry.IsFile ? "file" : "folder"),
            "This cannot be undone",
            async () =>
            {
                await ToastService.Progress("Deleting", string.Empty, async _ =>
                {
                    await FileSystemProvider.Delete(Path.Join(CurrentPath, entry.Name));
                    await FileView.Refresh();
                });
            }
        );
    }

    #endregion

    #region File Editing

    [Parameter] public Action<CodeEditorOptions>? OnConfigureEditor { get; set; }

    private bool IsEditing = false;
    private FileSystemEntry EditorEntry;
    private string EditorInitialContent;
    private CodeEditor FileEditor;

    private async Task OpenEditor(FileSystemEntry entry)
    {
        IsEditing = true;
        EditorEntry = entry;

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadEditor(LazyLoader _)
    {
        var fs = await FileSystemProvider.Read(Path.Join(CurrentPath, EditorEntry.Name));
        var sr = new StreamReader(fs, Encoding.UTF8);

        EditorInitialContent = await sr.ReadToEndAsync();

        sr.Close();
        fs.Close();
    }

    private async Task SaveFile()
    {
        var content = await FileEditor.GetValue();

        using var dataStream = new MemoryStream(
            Encoding.UTF8.GetBytes(content)
        );

        await FileSystemProvider.Create(Path.Join(CurrentPath, EditorEntry.Name), dataStream);
        await ToastService.Success("Successfully saved changes");
    }

    private async Task CloseEditor()
    {
        await FileEditor.DisposeAsync();
        IsEditing = false;

        await InvokeAsync(StateHasChanged);
    }

    private void ConfigureEditor(CodeEditorOptions editorOptions)
    {
        var mode = CodeEditorModeHelper.GetModeFromFile(EditorEntry.Name);
        editorOptions.Mode = $"ace/mode/{mode}";

        OnConfigureEditor?.Invoke(editorOptions);
    }

    #endregion

    private async Task<bool> OnInteract(FileSystemEntry entry)
    {
        if (entry.IsFile)
        {
            // TODO: Check if its a text file and not too big
            await OpenEditor(entry);
            return true;
        }

        return false;
    }
}
