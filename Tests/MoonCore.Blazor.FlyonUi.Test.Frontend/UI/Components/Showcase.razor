@using MoonCore.Blazor.FlyonUi.Components
@using MoonCore.Helpers

@inject HttpApiClient ApiClient

<div class="flex justify-between gap-4">
    <div>
        <div class="text-lg font-semibold">@Title</div>
        <div class="text-base-content/80">@Description</div>
    </div>

    <div>
        <nav class="tabs gap-x-1 overflow-x-auto p-1.5 bg-base-100 rounded-lg" aria-label="Tabs" role="tablist" aria-orientation="horizontal">
            <button type="button"
                    class="btn btn-sm btn-text text-base-content/80 active-tab:bg-primary active-tab:text-primary-content hover:text-primary hover:bg-primary/20 @(ShowCode ? "" : "active")"
                    role="tab"
                    data-tab="dummy"
                    @onclick="() => SetShowCodeAsync(false)">
                <i class="icon-square-chart-gantt"></i>
                <span class="hidden sm:inline">Preview</span>
            </button>
            
            <button type="button"
                    class="btn btn-sm btn-text text-base-content/80 active-tab:bg-primary active-tab:text-primary-content hover:text-primary hover:bg-primary/20 @(ShowCode ? "active" : "")"
                    role="tab"
                    data-tab="dummy"
                    @onclick="() => SetShowCodeAsync(true)">
                <i class="icon-square-code"></i>
                <span class="hidden sm:inline">Code</span>
            </button>
        </nav>
    </div>
</div>

<div class="mt-5">
    @if (ShowCode)
    {
        <LazyLoader Load="LoadAsync">
            <Highlight Content="@Code"/>
        </LazyLoader>
    }
    else
    {
        @ChildContent
    }
</div>

@code
{
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string Source { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public string Description { get; set; }

    private bool ShowCode = false;
    private string Code;

    private async Task LoadAsync(LazyLoader _)
    {
        Code = await ApiClient.GetString($"api/showcase/{Source}");
        Code = Code.Replace("\n\r", "");
    }

    private async Task SetShowCodeAsync(bool toggle)
    {
        ShowCode = toggle;
        await InvokeAsync(StateHasChanged);
    }
}
